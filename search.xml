<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>R.I.P. for John Horton Conway</title>
      <link href="/2020/05/15/r-i-p-for-john-horton-conway/"/>
      <url>/2020/05/15/r-i-p-for-john-horton-conway/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 元胞自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Poj 1659 Frogs’ Neighborhood Havel–Hakimi算法</title>
      <link href="/2019/11/12/poj-1659-frogs-neighborhood-havel-hakimi-suan-fa/"/>
      <url>/2019/11/12/poj-1659-frogs-neighborhood-havel-hakimi-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Poj-1659-Frogs’-Neighborhood"><a href="#Poj-1659-Frogs’-Neighborhood" class="headerlink" title="Poj 1659 Frogs’ Neighborhood"></a>Poj 1659 Frogs’ Neighborhood</h2><p><a href="http://poj.org/problem?id=1659" target="_blank" rel="noopener">题目地址</a></p><p>如果提前了解到Havel–Hakimi算法，这道题就十分简单了。</p><p>HH算法是用来解决简单可图化问题，即给定一个有限多的非负整数序列，是否存在一个简单图使得其度序列恰好为该序列。</p><p>下面给出一个不可简单图化例子：</p><pre><code>    原始序列：3 5 4 2 5 2==&gt; 排序后得：5 5 4 3 2 2==&gt; 第一递归：0 4 3 2 1 1==&gt; 第一排序：4 3 2 1 1 0==&gt; 第二递归：0 2 1 0 0 0==&gt; 第二排序：2 1 0 0 0 0==&gt; 第三递归：0 0 -1 0 0 0</code></pre><p>下面给出一个可以简单图化的例子：</p><pre><code>    原始序列：3 5 3 5 3 5==&gt; 排序后得：5 5 5 3 3 3==&gt; 第一递归：0 4 4 2 2 2==&gt; 第一排序：4 4 2 2 2 0==&gt; 第二递归：0 3 1 1 1 0==&gt; 第二排序：3 1 1 1 0 0==&gt; 第三递归：0 0 0 0 0 0</code></pre><p>AC代码：</p><table><thead><tr><th>Memory</th><th>Time</th></tr></thead><tbody><tr><td>216k</td><td>0MS</td></tr></tbody></table><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> Lake<span class="token punctuation">{</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span>  <span class="token keyword">int</span> Frognum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>bool <span class="token function">acompare</span><span class="token punctuation">(</span>Lake lhs<span class="token punctuation">,</span> Lake rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>Frognum <span class="token operator">></span> rhs<span class="token punctuation">.</span>Frognum<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Lake lake<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Lakenum<span class="token punctuation">;</span>    <span class="token keyword">int</span> answer<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Lakenum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Lakenum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">>></span>lake<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Frognum<span class="token punctuation">;</span>      lake<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">=</span>i<span class="token punctuation">;</span>      ##cout<span class="token operator">&lt;&lt;</span>lake<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>lake<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Frognum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Lakenum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">sort</span><span class="token punctuation">(</span>lake<span class="token punctuation">,</span>lake<span class="token operator">+</span>Lakenum<span class="token punctuation">,</span>acompare<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> index<span class="token operator">=</span>lake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Frognum<span class="token punctuation">;</span>      ##<span class="token keyword">int</span> jumpout<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      ##<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>Lakenum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>lake<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Frognum<span class="token punctuation">;</span>      ##cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      lake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Frognum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>index<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        answer<span class="token punctuation">[</span>lake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>lake<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        answer<span class="token punctuation">[</span>lake<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>lake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        lake<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Frognum<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> JOJO<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Lakenum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>lake<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Frognum<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>          JOJO<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>JOJO<span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Lakenum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>Lakenum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>          cout<span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Havel–Hakimi算法 </tag>
            
            <tag> Poj </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019MLA</title>
      <link href="/2019/11/02/2019mla/"/>
      <url>/2019/11/02/2019mla/</url>
      
        <content type="html"><![CDATA[<h2 id="Developing-Advanced-Telechnology-for-Better-Access-of-Information"><a href="#Developing-Advanced-Telechnology-for-Better-Access-of-Information" class="headerlink" title="Developing Advanced Telechnology for Better Access of Information"></a>Developing Advanced Telechnology for Better Access of Information</h2><ul><li>Serach System</li></ul><p>QDC：</p><pre><code>QueryDocumentClick</code></pre><p>Postation Bias: User prefer top diucuments</p><ul><li>Recommanded System</li></ul><p>用户可以和系统交互</p><hr><h2 id="图像的非监督增强匹配"><a href="#图像的非监督增强匹配" class="headerlink" title="图像的非监督增强匹配"></a>图像的非监督增强匹配</h2><ul><li>小样本学习</li></ul><p>困难：Data Capture，需求就是降低数据标注量，如果使用Few—shot Learning， 只使用几张样本就可以完成学习。 即Semi—Supervised Learing，将标注传播。 对数据进行增广，将突袭那个旋转旋转等，这样损失函数会有两个，分别来自原图想和增广图像。</p><p>，使用计算机图新洒狗血生成呢个的图片进行学习最后应用到实际生活中，和传统做法不一样的地方，在中呢格式数据上做分布时，泛数对齐（SCV Best mention）。</p><p>Mult—Instance Learning</p><p>Mult—Label Learing： Car——Street——Bulding 之间有联系，根据这个分类</p><p>Co—Traning： 根据内容做分类器，在根据link做一个分类器，当没有标签的数据经过有网络时，先过分类器，如果获得一个表较好的标注，那就认为其有标注。</p><ul><li>图像的非监督增强匹配</li></ul><p>字体的结构很相似，比如学习字的边旁笔画，借鉴DTW 动态时间扭曲，使用DPW 动态位置扭曲，两个模块位置和相似性的互相迭代。还可以将相似性度量用在其他字体的识别上, TOP1可以达到80%-90%，Top5 可以达到 98%-99%</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MLA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>telegram实现定时QQ发信——再也不用每天宿舍签到啦！</title>
      <link href="/2019/10/26/telegram-shi-xian-ding-shi-qq-fa-xin-zai-ye-bu-yong-mei-tian-su-she-qian-dao-la/"/>
      <url>/2019/10/26/telegram-shi-xian-ding-shi-qq-fa-xin-zai-ye-bu-yong-mei-tian-su-she-qian-dao-la/</url>
      
        <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>作为一个马上要去美帝的留学党，突然强行被指派成了舍长？王德发，舍长也就算了，还要每天10:30在QQ群发布查寝情况？看着一个个没事就出去开房的舍友，emmmmmm，我就这个表情</p><p><img src="https://s2.ax1x.com/2019/10/26/KDZfOI.jpg" alt="KDZfOI.jpg"></p><p>不如就写个bot来替我每天发“人齐了”签到吧(๑•̀ㅂ•́)و✧。</p><h2 id="你需要有"><a href="#你需要有" class="headerlink" title="你需要有"></a>你需要有</h2><hr><ul><li>海外VPS一台(Debian 9)</li><li>telegram帐号</li><li>一个额外的QQ帐号</li><li>Windows 用户需要 SSH 客户端</li></ul><p>VPS的选择和配置可以参考我的这篇 <a href="http://jinzhnegxu.online/2019/03/14/Ubuntu18.04下通过Vultr服务搭建vps科学上网/" target="_blank" rel="noopener">Ubuntu18.04下通过Vultr服务搭建vps科学上网</a> ，VPS功能多多还能拿来科学上网建议小伙伴们搞一个。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><hr><p><img src="https://s2.ax1x.com/2019/10/26/KDJkgP.png" alt="KDJkgP.png"></p><h2 id="telegram配置bot"><a href="#telegram配置bot" class="headerlink" title="telegram配置bot"></a>telegram配置bot</h2><p>首先在telegram中搜索BotFather，找到以后向<a href="https://t.me/BotFather" target="_blank" rel="noopener">@BotFather</a>发送<code>/newbot</code>创建一个新的机器人。然后指定这个 Bot 的名称与用户名（用户名必须以 bot 结尾）。创建成功后BotFather会向你提供一个密钥token，这个密钥是bot 的唯一ID，注意不要泄漏。</p><p><img src="https://s2.ax1x.com/2019/10/26/KDa4nx.png" alt="KDa4nx.png"></p><p>接下来对 Bot 进行进一步的配置：允许 Bot 读取非指令信息、允许将 Bot 添加进群组、以及提供指令列表。</p><p>发送 /setprivacy 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Disable”.<br>发送 /setjoingroups 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Enable”.<br>发送 /setcommands 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后发送如下内容：</p><pre><code>link - 将会话绑定到 Telegram 群组chat - 生成会话头recog - 回复语音消息以进行识别extra - 获取更多功能</code></pre><p>然后找到机器人<a href="https://t.me/get_id_bot" target="_blank" rel="noopener">@get_id_bot</a>发送<code>/start</code>，获得自己帐号的chat_id</p><h2 id="VPS安装docker"><a href="#VPS安装docker" class="headerlink" title="VPS安装docker"></a>VPS安装docker</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io containerd runc$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> \    apt-transport-https \    ca-certificates \    curl \    gnupg2 \    software-properties-common$ curl -fsSL https://download.docker.com/linux/debian/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -$ <span class="token function">sudo</span> apt-key fingerprint 0EBFCD88pub   4096R/0EBFCD88 2017-02-22      Key fingerprint <span class="token operator">=</span> 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88uid                  Docker Release <span class="token punctuation">(</span>CE deb<span class="token punctuation">)</span> <span class="token operator">&lt;</span>docker@docker.com<span class="token operator">></span>sub   4096R/F273FCD8 2017-02-22</code></pre><h3 id="安装新版本"><a href="#安装新版本" class="headerlink" title="安装新版本"></a>安装新版本</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</code></pre><p>选择一个版本：</p><pre class=" language-bash"><code class="language-bash">$ apt-cache madison docker-ce  docker-ce <span class="token operator">|</span> 5:18.09.1~3-0~debian-stretch <span class="token operator">|</span> https://download.docker.com/linux/debian stretch/stable amd64 Packages  docker-ce <span class="token operator">|</span> 5:18.09.0~3-0~debian-stretch <span class="token operator">|</span> https://download.docker.com/linux/debian stretch/stable amd64 Packages  docker-ce <span class="token operator">|</span> 18.06.1~ce~3-0~debian        <span class="token operator">|</span> https://download.docker.com/linux/debian stretch/stable amd64 Packages  docker-ce <span class="token operator">|</span> 18.06.0~ce~3-0~debian        <span class="token operator">|</span> https://download.docker.com/linux/debian stretch/stable amd64 Packages  <span class="token punctuation">..</span>.</code></pre><p>假如我选择的是<code>5:18.09.1~3-0~debian-stretch</code>那下面的VERSION_STRING就是<code>5:18.09.1~3-0~debian-stretch</code>：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> docker-ce-cli<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> containerd.io</code></pre><p>检查是否安装成功：</p><pre><code>$ sudo docker run hello-worldHello from Docker!This message shows that your installation appears to be working correctly....</code></pre><h2 id="VPS部署EFB，CoolQ和telegram-cli"><a href="#VPS部署EFB，CoolQ和telegram-cli" class="headerlink" title="VPS部署EFB，CoolQ和telegram-cli"></a>VPS部署EFB，CoolQ和telegram-cli</h2><h3 id="安装EFBZ主端-CoolQ从端"><a href="#安装EFBZ主端-CoolQ从端" class="headerlink" title="安装EFBZ主端,CoolQ从端"></a>安装EFBZ主端,CoolQ从端</h3><p>ssh登录vps后安装相关依赖：</p><pre class=" language-bash"><code class="language-bash">$ apt <span class="token function">install</span> python3 python3-pip python3-pil python3-setuptools python3-numpy python3-yaml python3-requests ffmpeg libmagic-dev libwebp-dev vim -y</code></pre><p>安装EFB：</p><pre class=" language-bash"><code class="language-bash">$ pip3 <span class="token function">install</span> ehforwarderbot efb-telegram-master efb-qq-slave</code></pre><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><h4 id="创建-EFB-配置文件"><a href="#创建-EFB-配置文件" class="headerlink" title="创建 EFB 配置文件"></a>创建 EFB 配置文件</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p ~/.ehforwarderbot/profiles/qq/$ vim ~/.ehforwarderbot/profiles/qq/config.yaml</code></pre><p>输入以下内容:</p><pre><code>master_channel: blueset.telegramslave_channels:- milkice.qq</code></pre><h4 id="创建ETM-配置文件"><a href="#创建ETM-配置文件" class="headerlink" title="创建ETM 配置文件"></a>创建ETM 配置文件</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p ~/.ehforwarderbot/profiles/qq/blueset.telegram$ vim ~/.ehforwarderbot/profiles/qq/blueset.telegram/config.yaml</code></pre><p>输入以下内容:</p><pre><code>token: &quot;值为你在 @BotFather 处获得的 bot token&quot;admins:- 值为你在 @get_id_bot 处获得的 chat id</code></pre><h4 id="创建-EQS-配置文件"><a href="#创建-EQS-配置文件" class="headerlink" title="创建 EQS 配置文件"></a>创建 EQS 配置文件</h4><p>CoolQ：</p><pre class=" language-bash"><code class="language-bash">$ docker pull richardchien/cqhttp:latest$ <span class="token function">mkdir</span> coolq$ docker run -ti --rm --name cqhttp-test --net<span class="token operator">=</span><span class="token string">"host"</span> \     -v <span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span>/coolq:/home/user/coolq     `<span class="token comment" spellcheck="true"># mount coolq folder` \</span>     -p 9000:9000                         `<span class="token comment" spellcheck="true"># 网页noVNC端口` \</span>     -p 5700:5700                         `<span class="token comment" spellcheck="true"># 酷Q对外提供的API接口的端口` \</span>     -e VNC_PASSWD<span class="token operator">=</span>MAX8char               `<span class="token comment" spellcheck="true"># 请修改 VNC 密码！！！！` \</span>     -e COOLQ_PORT<span class="token operator">=</span>5700                   `<span class="token comment" spellcheck="true"># 酷Q对外提供的API接口的端口` \</span>     -e COOLQ_ACCOUNT<span class="token operator">=</span>123456              `<span class="token comment" spellcheck="true"># 在此输入要登录的QQ号，虽然可选但是建议填入` \</span>     -e CQHTTP_POST_URL<span class="token operator">=</span>http://127.0.0.1:8000   `<span class="token comment" spellcheck="true"># efb-qq-slave监听的端口/地址 用于接受传入的消息` \</span>     -e CQHTTP_SERVE_DATA_FILES<span class="token operator">=</span>yes       `<span class="token comment" spellcheck="true"># 允许以HTTP方式访问酷Q数据文件` \</span>     -e CQHTTP_ACCESS_TOKEN<span class="token operator">=</span>ac0f790e1fb74ebcaf45da77a6f9de47  `<span class="token comment" spellcheck="true"># Access Token` \</span>     -e CQHTTP_POST_MESSAGE_FORMAT<span class="token operator">=</span>array  `<span class="token comment" spellcheck="true"># 回传消息时使用数组（必选）` \</span>     richardchien/cqhttp:latest</code></pre><p>将 docker run 命令中的参数根据注释改为相应数值</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p ~/.ehforwarderbot/profiles/qq/milkice.qq$ vim ~/.ehforwarderbot/profiles/qq/milkice.qq/config.yaml</code></pre><p>输入以下内容:</p><pre><code>Client: CoolQ # 指定要使用的 QQ 客户端（此处为CoolQ）CoolQ:type: HTTP # 指定 efb-qq-slave 与 酷Q 通信的方式 现阶段仅支持HTTPaccess_token: ac0f790e1fb74ebcaf45da77a6f9de47api_root: http://127.0.0.1:5700/ # 酷Q API接口地址/端口host: 127.0.0.1 # efb-qq-slave 所监听的地址用于接收消息port: 8000 # 同上is_pro: true # 若为酷Q Pro则为true，反之为falseair_option: # 包含于 air_option 的配置选项仅当 is_pro 为 false 时才有效upload_to_smms: true # 将来自 EFB主端(通常是Telegram) 的图片上传到 sm.ms 服务器并以链接的形式发送到 QQ 端</code></pre><h2 id="启动EFB"><a href="#启动EFB" class="headerlink" title="启动EFB"></a>启动EFB</h2><p>在浏览器内访问 http://&lt;vps的ip&gt;:9000</p><p>请在noVNC终端中输入上述配置选项中的 VNC 密码登录，并使用QQ账户和密码在酷Q中登录QQ账号</p><pre class=" language-bash"><code class="language-bash">$ ehforwarderbot --profile qq</code></pre><h2 id="将QQ群链接telegram-group"><a href="#将QQ群链接telegram-group" class="headerlink" title="将QQ群链接telegram_group"></a>将QQ群链接telegram_group</h2><p>搜寻到刚刚创建的bot，发送<code>/start</code>开始服务。</p><p>创建一个新的telegram群组，将bot邀请到群组中，然后私聊bot发送<code>/link</code>，bot会返回一个列表，在其中选择你想要链接的群组。链接成功后，只要在当前telegram群组中发信就会自动被转发到链接的QQ群中。</p><p>邀请机器人<a href="https://t.me/getidsbot" target="_blank" rel="noopener">@getidsbot</a>进群，并记录群组的chat_id。</p><h2 id="VPS上使用crontab和telegram-cli定时发送"><a href="#VPS上使用crontab和telegram-cli定时发送" class="headerlink" title="VPS上使用crontab和telegram-cli定时发送"></a>VPS上使用crontab和telegram-cli定时发送</h2><h3 id="安装telegram-cli"><a href="#安装telegram-cli" class="headerlink" title="安装telegram-cli"></a>安装telegram-cli</h3><p>telegram-cli是一个非官方telegram版本，可以使用命令行操作。</p><p>安装依赖：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token function">git</span> libreadline-dev libconfig-dev libssl-dev lua5.2 liblua5.2-dev libevent-dev libjansson-dev libpython-dev <span class="token function">make</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl1.0-dev$ <span class="token function">git</span> clone --recursive https://github.com/vysheng/tg.git <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> tg$ ./configure$ <span class="token function">make</span></code></pre><h3 id="激活-API"><a href="#激活-API" class="headerlink" title="激活 API"></a>激活 API</h3><p>安装好后，我们需要去拿到 telegram 的密钥。访问 telegram 的网站<a href="https://my.telegram.org/apps" target="_blank" rel="noopener">https://my.telegram.org/apps</a>.在官网中新建一个app，得到public key。</p><p>新建一个文件，然后把 public key 的内容复制进去并保存</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> /root/tg-server.pub</code></pre><h3 id="登录telegram-cli"><a href="#登录telegram-cli" class="headerlink" title="登录telegram-cli"></a>登录telegram-cli</h3><pre class=" language-bash"><code class="language-bash">$ /root/tg/bin/telegram-cli -k /root/tg-server.pub</code></pre><p>第一次登录需要从telegram上接受验证码，之后就ky自动登录了</p><h3 id="crontab实现定时发送"><a href="#crontab实现定时发送" class="headerlink" title="crontab实现定时发送"></a>crontab实现定时发送</h3><p>修改默认编辑器：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">export</span> VISUAL<span class="token operator">=</span>vim</code></pre><p>新建crontab任务：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">crontab</span> -e</code></pre><p>输入任务：</p><pre><code>* 10 * * * /root/tg/bin/telegram-cli -k /root/tg-server.pub -WR -e &quot;msg 群组chat_id 信息内容&quot;</code></pre><p>其中第五个星号分别是分钟，小时，日，月，星期，这个指令的意思是每天10:00执行命令。</p>]]></content>
      
      
      
        <tags>
            
            <tag> telegram </tag>
            
            <tag> ehforwarderbot </tag>
            
            <tag> corntab </tag>
            
            <tag> telegram-cli </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu下使用masm进行汇编实验</title>
      <link href="/2019/10/10/zai-ubuntu-xia-shi-yong-masm-jin-xing-hui-bian-shi-yan/"/>
      <url>/2019/10/10/zai-ubuntu-xia-shi-yong-masm-jin-xing-hui-bian-shi-yan/</url>
      
        <content type="html"><![CDATA[<p>windows下我们常常使用masm作为学习汇编语言的环境，Linux虽然有nasm等强大的开源软件，但是nasm的debug，编译等都与lab中使用masm的方式不同，但是masm对于linux的适配并不是非常完美。很多人选择重新开一个windows xp虚拟机来进行masm的安装，根据<code>禁止套娃</code>的原则，这里介绍集中可以在ubuntu下使用masm的方法。</p><h3 id="安装dosbox"><a href="#安装dosbox" class="headerlink" title="安装dosbox"></a>安装dosbox</h3><p>ubuntu在软件商店中提供了dosbox，之间安装即可。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> dosbox</code></pre><h3 id="下载masm文件夹"><a href="#下载masm文件夹" class="headerlink" title="下载masm文件夹"></a>下载masm文件夹</h3><p>从<a href="https://drive.google.com/folderview?id=0B1DiPkxLHBZHTWVQVVNlYVptU3M&usp=sharing" target="_blank" rel="noopener">这里</a>下载文件并加压</p><h3 id="masm使用"><a href="#masm使用" class="headerlink" title="masm使用"></a>masm使用</h3><p>首先在masm文件夹下新建一个你的<code>.asm</code>文件，或者你也可以直接号使用masm文件夹下自带的<code>count99.asm</code>文件。</p><p>然后新建一个终端，输入：</p><pre class=" language-bash"><code class="language-bash">$ dosbox</code></pre><p>打开dosbox，将masm文件夹挂载：</p><pre class=" language-bash"><code class="language-bash">Z:\SET BLASTER+A220 I7 D1 H5 T6Z:\<span class="token operator">></span> <span class="token function">mount</span> c: ~/Downloads/masmDrive C is mounted as local directory /home/jason/Downloads/masm</code></pre><p>输入命令<code>mount c: ~/Downloads/masm</code>，注意这里的文件地址是你的电脑当前用户主目录下的地址。</p><p>进入挂载后的Drive C并查看文件：</p><pre class=" language-bash"><code class="language-bash">Z:\<span class="token operator">></span>c:C:\<span class="token operator">></span>dir</code></pre><p>编译并连接<code>.asm</code>文件：</p><pre class=" language-bash"><code class="language-bash">C:\<span class="token operator">></span>masm count99<span class="token punctuation">;</span>C:\<span class="token operator">></span>link count99<span class="token punctuation">;</span></code></pre><p>进入debug：</p><pre class=" language-bash"><code class="language-bash">C:\<span class="token operator">></span>debug count99.exe</code></pre><p>然后我们就进入了debug环境，接下来就可以进行实验了。</p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> masm </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The 5*5 plan for my summer training</title>
      <link href="/2019/07/21/the-5-5-plan-for-my-summer-training/"/>
      <url>/2019/07/21/the-5-5-plan-for-my-summer-training/</url>
      
        <content type="html"><![CDATA[<h4 id="5×5计划"><a href="#5×5计划" class="headerlink" title="5×5计划"></a>5×5计划</h4><h5 id="The-basic-content"><a href="#The-basic-content" class="headerlink" title="The basic content"></a>The basic content</h5><table><thead><tr><th>Workout A</th><th>Workout B</th></tr></thead><tbody><tr><td>深蹲 5x5</td><td>深蹲 5x5</td></tr><tr><td>卧推 5x5</td><td>推举 5x5</td></tr><tr><td>臂屈伸 5x5</td><td>硬拉 1x5</td></tr><tr><td>引体向上 5x5</td><td>山羊挺身 5x5</td></tr></tbody></table><h5 id="A-plan"><a href="#A-plan" class="headerlink" title="A plan"></a>A plan</h5><table><thead><tr><th>日期</th><th>训练内容</th></tr></thead><tbody><tr><td>Day1</td><td>Workout A</td></tr><tr><td>Day2</td><td></td></tr><tr><td>Day3</td><td>Workout B</td></tr><tr><td>Day4</td><td>人体旗帜</td></tr><tr><td>Day5</td><td>Workout A</td></tr><tr><td>Day6</td><td></td></tr><tr><td>Day7</td><td>引体向上</td></tr></tbody></table><h5 id="B-plan"><a href="#B-plan" class="headerlink" title="B plan"></a>B plan</h5><table><thead><tr><th>日期</th><th>训练内容</th></tr></thead><tbody><tr><td>Day1</td><td>Workout B</td></tr><tr><td>Day2</td><td></td></tr><tr><td>Day3</td><td>Workout A</td></tr><tr><td>Day4</td><td>人体旗帜</td></tr><tr><td>Day5</td><td>Workout B</td></tr><tr><td>Day6</td><td></td></tr><tr><td>Day7</td><td>引体向上</td></tr></tbody></table><h4 id="热身组设置"><a href="#热身组设置" class="headerlink" title="热身组设置"></a>热身组设置</h4><table><thead><tr><th>深蹲</th><th>重量</th><th>次数</th><th>组数</th></tr></thead><tbody><tr><td>空杆</td><td>20.41kg</td><td>5</td><td>2</td></tr><tr><td></td><td>40kg</td><td>5</td><td>1</td></tr><tr><td></td><td>60kg</td><td>3</td><td>1</td></tr><tr><td></td><td>80kg</td><td>2</td><td>1</td></tr><tr><td>正式组</td><td>100kg</td><td>5</td><td>3</td></tr></tbody></table><table><thead><tr><th>卧推</th><th>重量</th><th>次数</th><th>组数</th></tr></thead><tbody><tr><td>空杆</td><td>20.41kg</td><td>5</td><td>2</td></tr><tr><td></td><td>35kg</td><td>5</td><td>1</td></tr><tr><td></td><td>55kg</td><td>3</td><td>1</td></tr><tr><td></td><td>70kg</td><td>2</td><td>1</td></tr><tr><td>正式组</td><td>80kg</td><td>5</td><td>3</td></tr></tbody></table><table><thead><tr><th>硬拉</th><th>重量</th><th>次数</th><th>组数</th></tr></thead><tbody><tr><td></td><td>60kg</td><td>5</td><td>2</td></tr><tr><td></td><td>80kg</td><td>5</td><td>1</td></tr><tr><td></td><td>100kg</td><td>5</td><td>1</td></tr><tr><td></td><td>125kg</td><td>5</td><td>1</td></tr><tr><td>正式组</td><td>140kg</td><td>5</td><td>1</td></tr></tbody></table><table><thead><tr><th>推举</th><th>重量</th><th>次数</th><th>组数</th></tr></thead><tbody><tr><td>空杆</td><td>20.41kg</td><td>5</td><td>2</td></tr><tr><td></td><td>35kg</td><td>5</td><td>1</td></tr><tr><td></td><td>45kg</td><td>3</td><td>1</td></tr><tr><td></td><td>50kg</td><td>2</td><td>1</td></tr><tr><td>正式组</td><td>60kg</td><td>5</td><td>3</td></tr></tbody></table><table><thead><tr><th>力量翻</th><th>重量</th><th>次数</th><th>组数</th></tr></thead><tbody><tr><td>空杆</td><td>20.41kg</td><td>5</td><td>2</td></tr><tr><td></td><td>35kg</td><td>5</td><td>1</td></tr><tr><td></td><td>45kg</td><td>3</td><td>1</td></tr><tr><td></td><td>50kg</td><td>2</td><td>1</td></tr><tr><td>正式组</td><td>60kg</td><td>3</td><td>5</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Workout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 5*5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Open Day，2019</title>
      <link href="/2019/06/13/google-open-day-2019/"/>
      <url>/2019/06/13/google-open-day-2019/</url>
      
        <content type="html"><![CDATA[<p>今天来到了融科中心4-7f的Google北京，非常高兴今天认识了许多优秀的同学，也感谢主办方Google北京、Linedin、团中央完美的活动安排，特别是午餐真的招待的非常不错。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>鸟哥的Linux私房菜-9-Shell Scripts</title>
      <link href="/2019/05/22/niao-ge-de-linux-si-fang-cai-9-shell-scripts/"/>
      <url>/2019/05/22/niao-ge-de-linux-si-fang-cai-9-shell-scripts/</url>
      
        <content type="html"><![CDATA[<p>shell脚本就是将一些命令集合起来一起执行，类似于程序的编写，但是不需要compile</p><h4 id="What-is-Shell-Scripts"><a href="#What-is-Shell-Scripts" class="headerlink" title="What is Shell Scripts"></a>What is Shell Scripts</h4><p>Shell脚本是利用shell功能所写的一个 <strong><em>程序Program</em></strong> 。这个程序是使用纯文本文件，将一些shell的语法与命令（含外部命令）写在里面，搭配正则表达式、管道命令与数据流重定向结合在一起，以达到我们想要的功能。</p><h5 id="为何要学习Shell-Scripts"><a href="#为何要学习Shell-Scripts" class="headerlink" title="为何要学习Shell Scripts"></a>为何要学习Shell Scripts</h5><h6 id="自动化管理的重要根据"><a href="#自动化管理的重要根据" class="headerlink" title="自动化管理的重要根据"></a>自动化管理的重要根据</h6><h6 id="跟踪与管理系统-的重要工作"><a href="#跟踪与管理系统-的重要工作" class="headerlink" title="跟踪与管理系统 的重要工作"></a>跟踪与管理系统 的重要工作</h6><h6 id="简单入侵检测功能"><a href="#简单入侵检测功能" class="headerlink" title="简单入侵检测功能"></a>简单入侵检测功能</h6><h6 id="连续命令单一化"><a href="#连续命令单一化" class="headerlink" title="连续命令单一化"></a>连续命令单一化</h6><p><strong><em>汇整一些在 command line 下达的连续指令,将他写入 scripts 当中,而由直接执行 scripts 来启动一连串的 command line 指令输入!</em></strong></p><h6 id="简易的数据处理"><a href="#简易的数据处理" class="headerlink" title="简易的数据处理"></a>简易的数据处理</h6><p><strong><em>shell script 用在系统管理上面是很好的一项工具,但是用在处理大量数值运算上, 就不够好了,因为 Shell scripts 的速度较慢,且使用的 CPU 资源较多,造成主机资源的分配不良。</em></strong></p><h6 id="跨平台支持与学习历程较短"><a href="#跨平台支持与学习历程较短" class="headerlink" title="跨平台支持与学习历程较短"></a>跨平台支持与学习历程较短</h6><h5 id="第一个Shell-Scripts程序"><a href="#第一个Shell-Scripts程序" class="headerlink" title="第一个Shell Scripts程序"></a>第一个Shell Scripts程序</h5><ol><li>指令的执行是从上而下、从左而右的分析与执行;</li><li>指令的下达就如同第四章内提到的: 指令、选项与参数间的多个空白都会被忽略掉;</li><li>空白行也将被忽略掉,并且 [tab] 按键所推开的空白同样视为空格键;</li><li>如果读取到一个 Enter 符号 (CR) ,就尝试开始执行该行 (或该串) 命令;</li><li>至于如果一行的内容太多,则可以使用『 [Enter] 』来延伸至下一行;</li><li>『 # 』可做为批注!任何加在 # 后面的资料将全部被视为批注文字而被忽略!</li><li>如何执行命令<code>bash shell</code>,<code>sh shell.sh</code>,<code>/root/home/user/shell.sh</code>,<code>./shell.sh</code></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#Program:</span><span class="token comment" spellcheck="true">#       This program shows "Hello WOrld" in screen</span>PATH<span class="token operator">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin<span class="token function">export</span> PATH<span class="token keyword">echo</span> -e <span class="token string">"Hello World \a \n"</span><span class="token keyword">exit</span> 0</code></pre><ol><li>第一行不同于其他注释 <code>#!/bin/bash</code>在声明这个脚本使用的bash名称，第一行也称为shebang行</li><li>环境变量 的设置可以免去脚本中复杂的引用<h5 id="写Shell-Scripts的良好习惯"><a href="#写Shell-Scripts的良好习惯" class="headerlink" title="写Shell Scripts的良好习惯"></a>写Shell Scripts的良好习惯</h5>在脚本的文件开头处写好注释，包括但不限于：</li></ol><ul><li><p>脚本的功能</p></li><li><p>脚本的版本信息</p></li><li><p>脚本的作者于联络方式</p></li><li><p>脚本的版权声明方式</p></li><li><p>脚本的History</p></li><li><p>脚本内较特殊的命令</p></li><li><p>脚本运行时需要的环境变量</p><h4 id="简单的Shell-Scripts练习"><a href="#简单的Shell-Scripts练习" class="headerlink" title="简单的Shell Scripts练习"></a>简单的Shell Scripts练习</h4><h5 id="简单范例"><a href="#简单范例" class="headerlink" title="简单范例"></a>简单范例</h5></li><li><p>交互式脚本：变量内容有用户决定</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#Program:</span><span class="token comment" spellcheck="true">#       User input his first name and last name, the prog output his full name</span>PATH<span class="token operator">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin<span class="token function">export</span> PATH<span class="token function">read</span> -p <span class="token string">"Please input your first name: "</span> firstname<span class="token function">read</span> -p <span class="token string">"Please input your last name: "</span> lastname<span class="token keyword">echo</span> -e <span class="token string">" \n Your full name is: <span class="token variable">${firstname}</span> <span class="token variable">${lastname}</span>"</span></code></pre></li><li><p>随日期变化</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#Program:</span><span class="token comment" spellcheck="true">#       Insert date into filename</span>PATH<span class="token operator">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin<span class="token function">export</span> PATH<span class="token keyword">echo</span> -e <span class="token string">"I will use 'touch' command to create 3 file."</span><span class="token function">read</span> -p <span class="token string">"Please input your filename:"</span> fileuserfilename<span class="token operator">=</span>$<span class="token punctuation">{</span>fileuser:-<span class="token string">"filename"</span><span class="token punctuation">}</span>date1<span class="token operator">=</span><span class="token punctuation">$(</span>date --date<span class="token operator">=</span><span class="token string">'2 days ago'</span> +%Y%m%d<span class="token punctuation">)</span>date2<span class="token operator">=</span><span class="token punctuation">$(</span>date --date<span class="token operator">=</span><span class="token string">'1 days ago'</span> +%Y%m%d<span class="token punctuation">)</span>date3<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d<span class="token variable">)</span></span>file1<span class="token operator">=</span><span class="token variable">${filename}</span><span class="token variable">${date1}</span>file2<span class="token operator">=</span><span class="token variable">${filename}</span><span class="token variable">${date2}</span>file3<span class="token operator">=</span><span class="token variable">${filename}</span><span class="token variable">${date3}</span><span class="token function">touch</span> <span class="token string">"<span class="token variable">${file1}</span>"</span><span class="token function">touch</span> <span class="token string">"<span class="token variable">${file3}</span>"</span><span class="token function">touch</span> <span class="token string">"<span class="token variable">${file2}</span>"</span></code></pre></li></ul><ul><li><p>数值运算<br>使用<code>$(())</code>来实现整数数值运算</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#Program:</span><span class="token comment" spellcheck="true">#       cross two number</span>PATH<span class="token operator">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin<span class="token function">export</span> PATH<span class="token keyword">echo</span> -e <span class="token string">"Input two number,the I multiplying them! \n"</span><span class="token function">read</span> -p <span class="token string">"first number"</span> first<span class="token function">read</span> -p <span class="token string">"second number"</span> secondtotal<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>${first}<span class="token operator">*</span>${second}<span class="token variable">))</span></span><span class="token keyword">echo</span> -e <span class="token string">"\n The result of <span class="token variable">${first}</span>*<span class="token variable">${second}</span> ==> <span class="token variable">${total}</span>"</span></code></pre></li></ul><h5 id="script的执行方式的差异source，sh-script，-script"><a href="#script的执行方式的差异source，sh-script，-script" class="headerlink" title="script的执行方式的差异source，sh script，./script"></a>script的执行方式的差异source，sh script，./script</h5><h4 id="善用判断式"><a href="#善用判断式" class="headerlink" title="善用判断式"></a>善用判断式</h4><h5 id="利用test指令的测试功能"><a href="#利用test指令的测试功能" class="headerlink" title="利用test指令的测试功能"></a>利用test指令的测试功能</h5><h5 id="利用判断符号"><a href="#利用判断符号" class="headerlink" title="利用判断符号[]"></a>利用判断符号[]</h5><h5 id="Shell-Scripts的默认变量（-0，-1…）"><a href="#Shell-Scripts的默认变量（-0，-1…）" class="headerlink" title="Shell Scripts的默认变量（$0，$1…）"></a>Shell Scripts的默认变量（$0，$1…）</h5><h4 id="条件判断式"><a href="#条件判断式" class="headerlink" title="条件判断式"></a>条件判断式</h4><h5 id="利用if…then"><a href="#利用if…then" class="headerlink" title="利用if…then"></a>利用if…then</h5><h5 id="利用case…esac判断"><a href="#利用case…esac判断" class="headerlink" title="利用case…esac判断"></a>利用case…esac判断</h5><h5 id="利用function功能"><a href="#利用function功能" class="headerlink" title="利用function功能"></a>利用function功能</h5><h4 id="循环loop"><a href="#循环loop" class="headerlink" title="循环loop"></a>循环loop</h4><h5 id="while-do-done-util-do-done-不定循环"><a href="#while-do-done-util-do-done-不定循环" class="headerlink" title="while do done,util do done(不定循环)"></a>while do done,util do done(不定循环)</h5><h5 id="for…do…done-固定循环"><a href="#for…do…done-固定循环" class="headerlink" title="for…do…done(固定循环)"></a>for…do…done(固定循环)</h5><h5 id="for…do…done的数值处理"><a href="#for…do…done的数值处理" class="headerlink" title="for…do…done的数值处理"></a>for…do…done的数值处理</h5><h5 id="搭配随机数与数组的实验"><a href="#搭配随机数与数组的实验" class="headerlink" title="搭配随机数与数组的实验"></a>搭配随机数与数组的实验</h5><h4 id="Shell-Scripts的追踪与Debug"><a href="#Shell-Scripts的追踪与Debug" class="headerlink" title="Shell Scripts的追踪与Debug"></a>Shell Scripts的追踪与Debug</h4>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell Scripts </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(8)-正则表达式与文件格式化处理</title>
      <link href="/2019/05/19/niao-ge-de-linux-si-fang-cai-8-zheng-ze-biao-da-shi-yu-wen-jian-ge-shi-hua-chu-li/"/>
      <url>/2019/05/19/niao-ge-de-linux-si-fang-cai-8-zheng-ze-biao-da-shi-yu-wen-jian-ge-shi-hua-chu-li/</url>
      
        <content type="html"><![CDATA[<p>简单的说,正则表达式就是用在字符串的处理上面的一项『表示式』。正则表达式并不是一个工具程序,而是一个字符串处理的标准依据,如果您想要以正则表达式的方式处理字符串,就得要使用支持正则表达式的工具程序才行, 这类的工具程序很多,例如 vi, sed, awk 等等。</p><p><strong><em>正则表达式与通配符是完全不一样的东西</em></strong> ,通配符 (wildcard) 代表的是 bash 操作接口的一个功能』,但正则表达式则是一种字符串处理的表示方式</p><h4 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h4><p>正则表达式就是处理字符串的方法,他是以行为单位来进行字符串的处理行为, 正则表达式透过一些特殊符号的辅助,可以让使用者轻易的达到『搜寻/删除/取代』某特定字符串的处理程序。</p><p>正则表达式基本上是一种『表示法』, 只要工具程序支持这种表示法,那么该工具程序就可以用来作为正则表达式的字符串处理之用。</p><ul><li>正则表达式对于系统管理员的用途</li></ul><p>系统的『错误讯息登录文件』 的内容记载了系统产生的所有讯息,包含系统是否被『入侵』的记录数据。但是系统的数据量太大了,系统管理员每天要接受海量讯息数据, 从千百行的资料<br>里面找出一行有问题的讯息,这个时候,就可以透过『正则表达式』的功能,将这些登录的信息进行处理, 仅取出『有问题』的信息来进行分析。</p><ul><li>正则表达式的广泛用途</li></ul><p>目前两大邮件服务器软件 sendmail与 postfix 以及支持邮件服务器的相关分析软件,都支持正则表达式的比对功能</p><ul><li>正则表达式与 Shell 在 Linux 当中的角色定位</li></ul><p>正则表达式,与前一章的 BASH 就有点像是数学的九九表一样,是 Linux 基础当中的基础,虽然也是最难的部分，不论是对于系统的认识与系统的管理部分,他都有很棒的辅助</p><ul><li>延伸的正则表达式</li></ul><p>正则表达式的字符串表示方式依照不同的严谨度而分为: 基础正则表达式与延伸正则表达式。</p><p>延伸型正则表达式除了简单的一组字符串处理之外,还可以作群组的字符串处理, 例如进行搜寻 Jason 或 netman 或 lman 的搜寻,注意,是『或(or)』而不是『和(and)』的处理, 此时就需要延伸正则表达式的帮助啦!藉由特殊的『 ( 』与『 | 』等字符的协助, 就能够达到这样的目的。</p><h4 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h4><p>既然正则表达式是处理字符串的一种表示方式,那么对字符排序有影响的 <strong><em>语系数据</em></strong> 就会对正则表达式的结果有影响。</p><h5 id="语系对正则表达式的影响"><a href="#语系对正则表达式的影响" class="headerlink" title="语系对正则表达式的影响"></a>语系对正则表达式的影响</h5><p>同语系的编码数据并不相同,所以就会造成数据截取结果的差异。</p><p>For example</p><pre><code>LANG=C     时:0 1 2 3 4 ... A B C D ... Z a b c d ...zLANG=zh_TW 时:0 1 2 3 4 ... a A b B c C d D ... z Z</code></pre><p>使用 [A-Z] 时, 会发现 LANG=C 确实可以仅捉到大写字符 (因为是连续的) ,但是如果LANG=zh_TW.big5 时,连同小写的 b-z 也会被截取出来。</p><p><strong><em>使用正则表达式时,需要特别留意当时环境的语系为何, 否则可能会发现与别人不相同的撷取结果</em></strong></p><h6 id="特殊符号表："><a href="#特殊符号表：" class="headerlink" title="特殊符号表："></a>特殊符号表：</h6><table><thead><tr><th>特殊符号</th><th>代表意义</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>代表英文大小写字符及数字,亦即 0-9, A-Z, a-z</td></tr><tr><td>[:alpha:]</td><td>代表任何英文大小写字符,亦即 A-Z, a-z</td></tr><tr><td>[:blank:]</td><td>代表空格键与 [Tab] 按键两者</td></tr><tr><td>[:cntrl:]</td><td>代表键盘上面的控制按键,亦即包括 CR, LF, Tab, Del.. 等等</td></tr><tr><td>[:digit:]</td><td>代表数字而已,亦即 0-9</td></tr><tr><td>[:graph:]</td><td>除了空格符 (空格键与 [Tab] 按键) 外的其他所有按键</td></tr><tr><td>[:lower:]</td><td>代表小写字符,亦即 a-z</td></tr><tr><td>[:print:]</td><td>代表任何可以被打印出来的字符</td></tr><tr><td>[:punct:]</td><td>代表标点符号 (punctuation symbol),亦即:” ‘ ? ! ; : # $…</td></tr><tr><td>[:upper:]</td><td>代表大写字符,亦即 A-Z</td></tr><tr><td>[:space:]</td><td>任何会产生空白的字符,包括空格键, [Tab], CR 等等</td></tr><tr><td>[:xdigit:]</td><td>代表 16 进位的数字类型,因此包括: 0-9, A-F, a-f 的数字与字符</td></tr></tbody></table><h5 id="grep的一线高级选项"><a href="#grep的一线高级选项" class="headerlink" title="grep的一线高级选项"></a>grep的一线高级选项</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token punctuation">[</span>-A<span class="token punctuation">]</span> <span class="token punctuation">[</span>-B<span class="token punctuation">]</span> <span class="token punctuation">[</span>--color<span class="token operator">=</span>auto<span class="token punctuation">]</span> <span class="token string">'搜寻字符串'</span> filename选项与参数:-A :后面可加数字,为 after 的意思,除了列出该行外,后续的 n 行也列出来<span class="token punctuation">;</span>-B :后面可加数字,为 befer 的意思,除了列出该行外,前面的 n 行也列出来<span class="token punctuation">;</span>--color<span class="token operator">=</span>auto 可将正确的那个撷取数据列出颜色$ <span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> inteldrmfb<span class="token punctuation">[</span>    2.972950<span class="token punctuation">]</span> fb: switching to inteldrmfb from EFI VGA<span class="token punctuation">[</span>    3.263535<span class="token punctuation">]</span> fbcon: inteldrmfb <span class="token punctuation">(</span>fb0<span class="token punctuation">)</span> is primary device<span class="token punctuation">[</span>    3.263601<span class="token punctuation">]</span> i915 0000:00:02.0: fb0: inteldrmfb frame buffer device<span class="token comment" spellcheck="true"># dmesg 可列出核心产生的讯息!包括硬件侦测的流程也会显示出来。</span><span class="token comment" spellcheck="true"># 使用的显卡是 inteldrmfb 核显,透过 grep 来 inteldrmfb的相关信息,可发现如上信息。</span>$ <span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> -n --color<span class="token operator">=</span>auto <span class="token string">'inteldrmfb'</span>910:<span class="token punctuation">[</span>    2.972950<span class="token punctuation">]</span> fb: switching to inteldrmfb from EFI VGA926:<span class="token punctuation">[</span>    3.263535<span class="token punctuation">]</span> fbcon: inteldrmfb <span class="token punctuation">(</span>fb0<span class="token punctuation">)</span> is primary device928:<span class="token punctuation">[</span>    3.263601<span class="token punctuation">]</span> i915 0000:00:02.0: fb0: inteldrmfb frame buffer device<span class="token comment" spellcheck="true">#除了 inteldrmfb 会有特殊颜色来表示之外,最前面还有行号,其实颜色显示已经是默认在 alias 当中了!</span>$ <span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> -n -A3 -B2 --color<span class="token operator">=</span>auto <span class="token string">'inteldrmfb'</span>908-<span class="token punctuation">[</span>    2.972948<span class="token punctuation">]</span> <span class="token punctuation">[</span>drm<span class="token punctuation">]</span> Memory usable by graphics device <span class="token operator">=</span> 4096M909-<span class="token punctuation">[</span>    2.972950<span class="token punctuation">]</span> checking generic <span class="token punctuation">(</span>b0000000 e10000<span class="token punctuation">)</span> vs hw <span class="token punctuation">(</span>b0000000 10000000<span class="token punctuation">)</span>910:<span class="token punctuation">[</span>    2.972950<span class="token punctuation">]</span> fb: switching to inteldrmfb from EFI VGA911-<span class="token punctuation">[</span>    2.972961<span class="token punctuation">]</span> Console: switching to colour dummy device 80x25912-<span class="token punctuation">[</span>    2.973096<span class="token punctuation">]</span> <span class="token punctuation">[</span>drm<span class="token punctuation">]</span> Replacing VGA console driver913-<span class="token punctuation">[</span>    2.979952<span class="token punctuation">]</span> <span class="token punctuation">[</span>drm<span class="token punctuation">]</span> Supports vblank timestamp caching Rev 2 <span class="token punctuation">(</span>21.10.2013<span class="token punctuation">)</span>.--924-<span class="token punctuation">[</span>    2.995577<span class="token punctuation">]</span> usb 1-8: SerialNumber: 0001925-<span class="token punctuation">[</span>    3.124110<span class="token punctuation">]</span> usb 1-9: new full-speed USB device number 4 using xhci_hcd926:<span class="token punctuation">[</span>    3.263535<span class="token punctuation">]</span> fbcon: inteldrmfb <span class="token punctuation">(</span>fb0<span class="token punctuation">)</span> is primary device927-<span class="token punctuation">[</span>    3.263578<span class="token punctuation">]</span> Console: switching to colour frame buffer device 320x90928:<span class="token punctuation">[</span>    3.263601<span class="token punctuation">]</span> i915 0000:00:02.0: fb0: inteldrmfb frame buffer device929-<span class="token punctuation">[</span>    3.277635<span class="token punctuation">]</span> usb 1-9: New USB device found, idVendor<span class="token operator">=</span>06cb, idProduct<span class="token operator">=</span>009a930-<span class="token punctuation">[</span>    3.277636<span class="token punctuation">]</span> usb 1-9: New USB device strings: Mfr<span class="token operator">=</span>0, Product<span class="token operator">=</span>0, SerialNumber<span class="token operator">=</span>1931-<span class="token punctuation">[</span>    3.277637<span class="token punctuation">]</span> usb 1-9: SerialNumber: 727eb8862574<span class="token comment" spellcheck="true">#在关键词所在行的前两行与后三行也一起捉出来显示</span></code></pre><p>grep 在数据中查寻一个字符串时,是以 “整行” 为单位来进行的。</p><h5 id="基础正则表达式练习"><a href="#基础正则表达式练习" class="headerlink" title="基础正则表达式练习"></a>基础正则表达式练习</h5><p>使用命令下载数据</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> http://linux.vbird.org/linux_basic/0330regularex/regular_express.txt</code></pre><p>前提：</p><ul><li>语系已经使用『 export LANG=C; export LC_ALL=C 』的设定值;</li><li>grep 已经使用 alias 设定成为『 grep –color=auto 』</li></ul><pre class=" language-bash"><code class="language-bash">$ localeLANG<span class="token operator">=</span>en_US.UTF-8LANGUAGE<span class="token operator">=</span>LC_CTYPE<span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>LC_NUMERIC<span class="token operator">=</span>zh_CN.UTF-8LC_TIME<span class="token operator">=</span>zh_CN.UTF-8LC_COLLATE<span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>LC_MONETARY<span class="token operator">=</span>zh_CN.UTF-8LC_MESSAGES<span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>LC_PAPER<span class="token operator">=</span>zh_CN.UTF-8LC_NAME<span class="token operator">=</span>zh_CN.UTF-8LC_ADDRESS<span class="token operator">=</span>zh_CN.UTF-8LC_TELEPHONE<span class="token operator">=</span>zh_CN.UTF-8LC_MEASUREMENT<span class="token operator">=</span>zh_CN.UTF-8LC_IDENTIFICATION<span class="token operator">=</span>zh_CN.UTF-8LC_ALL<span class="token operator">=</span><span class="token comment" spellcheck="true">#查看一下当前语系</span>$  <span class="token function">export</span> LANG<span class="token operator">=</span>C LC_ALL<span class="token operator">=</span>C</code></pre><p>文件内容：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> regular_express.txt<span class="token string">"Open Source"</span> is a good mechanism to develop programs.apple is my favorite food.Football game is not use feet only.this dress doesn<span class="token string">'t fit me.However, this dress is about $ 3183 dollars.GNU is free air not free beer.Her hair is very beauty.I can'</span>t finish the test.Oh<span class="token operator">!</span> The soup taste good.motorcycle is cheap than car.This window is clear.the symbol <span class="token string">'*'</span> is represented as start.Oh<span class="token operator">!</span>    My god<span class="token operator">!</span>The gd software is a library <span class="token keyword">for</span> drafting programs.You are the best is mean you are the no. 1.The world <span class="token operator">&lt;</span>Happy<span class="token operator">></span> is the same with <span class="token string">"glad"</span><span class="token keyword">.</span>I like dog.google is the best tools <span class="token keyword">for</span> search keyword.goooooogle yes<span class="token operator">!</span>go<span class="token operator">!</span> go<span class="token operator">!</span> Let's go.<span class="token comment" spellcheck="true"># I am VBird</span></code></pre><p>文件共有 22 行,最底下一行为空白行。</p><h6 id="搜寻特定字符串"><a href="#搜寻特定字符串" class="headerlink" title="搜寻特定字符串"></a>搜寻特定字符串</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -n <span class="token string">'the'</span> regular_express.txt8:I can<span class="token string">'t finish the test.12:the symbol '</span>*' is represented as start.15:You are the best is mean you are the no. 1.16:The world <span class="token operator">&lt;</span>Happy<span class="token operator">></span> is the same with <span class="token string">"glad"</span><span class="token keyword">.</span>18:google is the best tools <span class="token keyword">for</span> search keyword.</code></pre><h6 id="反向选择"><a href="#反向选择" class="headerlink" title="反向选择"></a>反向选择</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -vn <span class="token string">'the'</span> regular_express.txt1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.2:apple is my favorite food.3:Football game is not use feet only.4:this dress doesn<span class="token string">'t fit me.5:However, this dress is about $ 3183 dollars.6:GNU is free air not free beer.7:Her hair is very beauty.9:Oh! The soup taste good.10:motorcycle is cheap than car.11:This window is clear.13:Oh!    My god!14:The gd software is a library for drafting programs.17:I like dog.19:goooooogle yes!20:go! go! Let'</span>s go.21:<span class="token comment" spellcheck="true"># I am VBird</span>22:</code></pre><h6 id="取得不论大小写的-the-这个字符串"><a href="#取得不论大小写的-the-这个字符串" class="headerlink" title="取得不论大小写的 the 这个字符串"></a>取得不论大小写的 the 这个字符串</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -in <span class="token string">'the'</span> regular_express.txt8:I can<span class="token string">'t finish the test.9:Oh! The soup taste good.12:the symbol '</span>*' is represented as start.14:The gd software is a library <span class="token keyword">for</span> drafting programs.15:You are the best is mean you are the no. 1.16:The world <span class="token operator">&lt;</span>Happy<span class="token operator">></span> is the same with <span class="token string">"glad"</span><span class="token keyword">.</span>18:google is the best tools <span class="token keyword">for</span> search keyword.</code></pre><ul><li>利用中括号 [] 来搜寻集合字符<pre class=" language-bash"><code class="language-bash">$  <span class="token function">grep</span> -n <span class="token string">'t[ae]st'</span> regular_express.txt8:I can't finish the test.9:Oh<span class="token operator">!</span> The soup taste good.<span class="token comment" spellcheck="true"># 其实 [] 里面不论有几个字符,他都仅代表某『一个』字符</span></code></pre><h6 id="利用-取反"><a href="#利用-取反" class="headerlink" title="利用^取反"></a>利用^取反</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -n <span class="token string">'oo'</span> regular_express.txt1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.2:apple is my favorite food.3:Football game is not use feet only.9:Oh<span class="token operator">!</span> The soup taste good.18:google is the best tools <span class="token keyword">for</span> search keyword.19:goooooogle yes<span class="token operator">!</span>$ <span class="token function">grep</span> -n <span class="token string">'[^g]oo'</span> regular_express.txt2:apple is my favorite food.3:Football game is not use feet only.18:google is the best tools <span class="token keyword">for</span> search keyword.19:goooooogle yes<span class="token operator">!</span>$ <span class="token function">grep</span> -n <span class="token string">'[^a-z]oo'</span> regular_express.txt$ <span class="token function">grep</span> -n <span class="token string">'[^[:lower:]]oo'</span> regular_express.txt3:Football game is not use feet only.<span class="token comment" spellcheck="true"># oo 前面不想要有小写字符</span><span class="token comment" spellcheck="true"># [:lower:] 就是 a-z 的意思,那么 [a-z]就是 [[:lower:]]</span>$ <span class="token function">grep</span> -n <span class="token string">'[0-9]'</span> regular_express.txt$ <span class="token function">grep</span> -n <span class="token string">'[[:digit:]]'</span> regular_express.txt5:However, this dress is about $ 3183 dollars.15:You are the best is mean you are the no. 1.</code></pre><h6 id="行首与行尾字符"><a href="#行首与行尾字符" class="headerlink" title="行首与行尾字符 ^ $"></a>行首与行尾字符 ^ $</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -n <span class="token string">'^the'</span> regular_express.txt12:the symbol <span class="token string">'*'</span> is represented as start.$ <span class="token function">grep</span> -n <span class="token string">'^[a-z]'</span> regular_express.txt$ <span class="token function">grep</span> -n <span class="token string">'^[[:lower:]]'</span> regular_express.txt2:apple is my favorite food.4:this dress doesn<span class="token string">'t fit me.10:motorcycle is cheap than car.12:the symbol '</span>*<span class="token string">' is represented as start.18:google is the best tools for search keyword.19:goooooogle yes!20:go! go! Let'</span>s go.$ <span class="token function">grep</span> -n <span class="token string">'^[^a-zA-z]'</span> regular_express.txt$ <span class="token function">grep</span> -n <span class="token string">'^[^[:alpha:]]'</span> regular_express.txt1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.21:<span class="token comment" spellcheck="true"># I am VBird</span><span class="token comment" spellcheck="true">#^ 符号,在字符集合符号(括号[])之内与之外是不同的! 在 [] 内代表『反向选择』</span><span class="token comment" spellcheck="true">#在 [] 之外则代表定位在行首的意义!</span></code></pre><h6 id="行尾结束为小数点"><a href="#行尾结束为小数点" class="headerlink" title="行尾结束为小数点 (.)"></a>行尾结束为小数点 (.)</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -n <span class="token string">'\.$'</span> regular_express.txt1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.2:apple is my favorite food.3:Football game is not use feet only.4:this dress doesn<span class="token string">'t fit me.10:motorcycle is cheap than car.11:This window is clear.12:the symbol '</span>*<span class="token string">' is represented as start.15:You are the best is mean you are the no. 1.16:The world &lt;Happy> is the same with "glad".17:I like dog.18:google is the best tools for search keyword.20:go! go! Let'</span>s go.</code></pre><h6 id="Windows-平台的软件对于断行字符的判断问题"><a href="#Windows-平台的软件对于断行字符的判断问题" class="headerlink" title="Windows 平台的软件对于断行字符的判断问题"></a>Windows 平台的软件对于断行字符的判断问题</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> -An regular_express.txt <span class="token operator">|</span> <span class="token function">head</span> -n 10 <span class="token operator">|</span> <span class="token function">tail</span> -n 65 However, this dress is about $ 3183 dollars.^M$6 GNU is <span class="token function">free</span> air not <span class="token function">free</span> beer.^M$7 Her hair is very beauty.^M$8 I can't finish the test.^M$9 Oh<span class="token operator">!</span> The soup taste good.^M$10 motorcycle is cheap than car.$<span class="token comment" spellcheck="true">#5~9 行为 Windows 的断行字符 (^M$) ,而正常的 Linux 应该仅有第 10 行显示的那样 ($)</span></code></pre></li><li>找出来,哪一行是『空白行』<pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -n <span class="token string">'^$'</span> regular_express.txt22:$ <span class="token function">grep</span> -v <span class="token string">'^$'</span> /etc/rsyslog.conf <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'^#'</span><span class="token comment" spellcheck="true"># 结果仅有 14 行,其中第一个『 -v '^$' 』代表『不要空白行』,</span><span class="token comment" spellcheck="true"># 第二个『 -v '^#' 』代表『不要开头是 # 的那行』喔!</span></code></pre><h6 id="任意一个字符-与重复字符"><a href="#任意一个字符-与重复字符" class="headerlink" title="任意一个字符 . 与重复字符 *"></a>任意一个字符 . 与重复字符 *</h6></li></ul><ul><li>. (小数点):代表『一定有一个任意字符』的意思;</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -n <span class="token string">'g..d'</span> regular_express.txt  1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.  9:Oh<span class="token operator">!</span> The soup taste good.  16:The world <span class="token operator">&lt;</span>Happy<span class="token operator">></span> is the same with <span class="token string">"glad"</span><span class="token keyword">.</span></code></pre><ul><li>* (星号):代表『重复前一个字符, 0 到无穷多次』的意思,为组合形态<pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -n <span class="token string">'ooo*'</span> regular_express.txt1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.2:apple is my favorite food.3:Football game is not use feet only.9:Oh<span class="token operator">!</span> The soup taste good.18:google is the best tools <span class="token keyword">for</span> search keyword.19:goooooogle yes<span class="token operator">!</span>$ <span class="token function">grep</span> -n <span class="token string">'goo*g'</span> regular_express.txt18:google is the best tools <span class="token keyword">for</span> search keyword.19:goooooogle yes<span class="token operator">!</span>$ <span class="token function">grep</span> -n <span class="token string">'g*g'</span> regular_express.txt1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.3:Football game is not use feet only.9:Oh<span class="token operator">!</span> The soup taste good.13:Oh<span class="token operator">!</span>My god<span class="token operator">!</span>14:The gd software is a library <span class="token keyword">for</span> drafting programs.16:The world <span class="token operator">&lt;</span>Happy<span class="token operator">></span> is the same with <span class="token string">"glad"</span><span class="token keyword">.</span>17:I like dog.18:google is the best tools <span class="token keyword">for</span> search keyword.19:goooooogle yes<span class="token operator">!</span>20:go<span class="token operator">!</span> go<span class="token operator">!</span> Let<span class="token string">'s go.$ grep -n '</span>g.*g<span class="token string">' regular_express.txt1:"Open Source" is a good mechanism to develop programs.14:The gd software is a library for drafting programs.18:google is the best tools for search keyword.19:goooooogle yes!20:go! go! Let'</span>s go.$ <span class="token function">grep</span> -n <span class="token string">'[0-9][0-9]*'</span> regular_express.txt5:However, this dress is about $ 3183 dollars.15:You are the best is mean you are the no. 1.</code></pre><h6 id="限定连续-RE-字符范围"><a href="#限定连续-RE-字符范围" class="headerlink" title="限定连续 RE 字符范围 {}"></a>限定连续 RE 字符范围 {}</h6>因为 { 与 } 的符号在 shell 是有特殊意义的,因此, 我们必须要使用跳脱字符 \ 来让他失去特殊意义才行。<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 找到两个 o</span>1:<span class="token string">"Open Source"</span> is a good mechanism to develop programs.$ <span class="token function">grep</span> -n <span class="token string">'o\{2\}'</span> regular_express.txt2:apple is my favorite food.3:Football game is not use feet only.9:Oh<span class="token operator">!</span> The soup taste good.18:google is the best tools <span class="token keyword">for</span> search keyword.19:goooooogle yes<span class="token operator">!</span><span class="token comment" spellcheck="true"># g 后面接 2 到 5 个 o ,然后再接一个 g 的字符串</span>$ <span class="token function">grep</span> -n <span class="token string">'go\{2,5\}g'</span> regular_express.txt18:google is the best tools <span class="token keyword">for</span> search keyword.$ <span class="token function">grep</span> -n <span class="token string">'go\{2,\}g'</span> regular_express.txt18:google is the best tools <span class="token keyword">for</span> search keyword.19:goooooogle yes<span class="token operator">!</span></code></pre></li></ul><h5 id="基础正则表达式字符集合"><a href="#基础正则表达式字符集合" class="headerlink" title="基础正则表达式字符集合"></a>基础正则表达式字符集合</h5><table><thead><tr><th>RE 字符</th><th>意义与范例</th></tr></thead><tbody><tr><td>^word</td><td>意义:待搜寻的字符串(word)在行首</td></tr><tr><td>word$</td><td>意义:待搜寻的字符串(word)在行尾</td></tr><tr><td>.</td><td>意义:代表『一定有一个任意字符』的字符</td></tr><tr><td>\</td><td>意义:跳脱字符,将特殊符号的特殊意义去除</td></tr><tr><td>*</td><td>意义:重复零个到无穷多个的前一个 RE 字符</td></tr><tr><td>[list]</td><td>意义:字符集合的 RE 字符,里面列出想要撷取的字符</td></tr><tr><td>[n1-n2]</td><td>意义:字符集合的 RE 字符,里面列出想要撷取的字符范围</td></tr><tr><td>[^list]</td><td>意义:字符集合的 RE 字符,里面列出不要的字符串或范围</td></tr><tr><td>{n,m}</td><td>意义:连续 n 到 m 个的『前一个 RE 字符』意义:若为 {n} 则是连续 n 个的前一个 RE 字符,意义:若是 {n,} 则是连续 n 个以上的前一个 RE 字符!</td></tr></tbody></table><p><strong><em>『正则表达式的特殊字符』与一般在指令列输入指令的『通配符』并不相同。</em></strong><br>通配符当中的 * 代表的是『 0 ~ 无限多个字符』的意思,但是在正则表达式当中, * 则是『重复 0<br>到无穷多个的前一个 RE 字符』的意思</p><h5 id="sed工具"><a href="#sed工具" class="headerlink" title="sed工具"></a>sed工具</h5><p>sed 本身是一个管线命令,可以分析 standard input。 而且 sed还可以将数据进行取代、删除、新增、截取特定行等等的功能。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sed</span> <span class="token punctuation">[</span>-nefr<span class="token punctuation">]</span> <span class="token punctuation">[</span>动作<span class="token punctuation">]</span>选项与参数:-n :使用安静<span class="token punctuation">(</span>silent<span class="token punctuation">)</span>模式。在一般 <span class="token function">sed</span> 的用法中,所有来自 STDIN 的数据一般都会被列出到屏幕上。但如果加上 -n 参数后,则只有经过 <span class="token function">sed</span> 特殊处理的那一行<span class="token punctuation">(</span>或者动作<span class="token punctuation">)</span>才会被列出来。-e :直接在指令列模式上进行 <span class="token function">sed</span> 的动作编辑<span class="token punctuation">;</span>-f :直接将 <span class="token function">sed</span> 的动作写在一个文件内, -f filename 则可以执行 filename 内的 <span class="token function">sed</span> 动作<span class="token punctuation">;</span>-r :sed 的动作支持的是延伸型正则表达式的语法。<span class="token punctuation">(</span>预设是基础正则表达式语法<span class="token punctuation">)</span>-i :直接修改读取的文件内容,而不是由屏幕输出。动作说明:<span class="token punctuation">[</span>n1<span class="token punctuation">[</span>,n2<span class="token punctuation">]</span><span class="token punctuation">]</span>functionn1, n2 :不见得会存在,一般代表『选择进行动作的行数』,举例来说,如果我的动作是需要在 10 到 20 行之间进行的,则『 10,20<span class="token punctuation">[</span>动作行为<span class="token punctuation">]</span> 』<span class="token keyword">function</span> ：a :新增, a 的后面可以接字符串,而这些字符串会在新的一行出现<span class="token punctuation">(</span>目前的下一行<span class="token punctuation">)</span>~c :取代, c 的后面可以接字符串,这些字符串可以取代 n1,n2 之间的行<span class="token operator">!</span>d :删除,因为是删除啊,所以 d 后面通常不接任何咚咚<span class="token punctuation">;</span>i :插入, i 的后面可以接字符串,而这些字符串会在新的一行出现<span class="token punctuation">(</span>目前的上一行<span class="token punctuation">)</span><span class="token punctuation">;</span>p :打印,亦即将某个选择的数据印出。通常 p 会与参数 <span class="token function">sed</span> -n 一起运作~s :取代,可以直接进行取代的工作哩<span class="token operator">!</span>通常这个 s 的动作可以搭配正则表达式<span class="token operator">!</span>例如 1,20s/old/new/g 就是啦</code></pre><ul><li>以行为单位的新增/删除功能<pre class=" language-bash"><code class="language-bash">$ <span class="token function">nl</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'2,5d'</span>   1    root:x:0:0:root:/root:/bin/bash   6    games:x:5:60:games:/usr/games:/usr/sbin/nologin   7    man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<span class="token comment" spellcheck="true">#,原本应该是要下达 sed -e 才对,没有 -e 也行</span>$  <span class="token function">nl</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'2a Drink tea or ......\> or drink beer ?'</span>   1    root:x:0:0:root:/root:/bin/bash   2    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinDrink tea or <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>or drink beer ?   3    bin:x:2:2:bin:/bin:/usr/sbin/nologin</code></pre><h6 id="以行为单位的取代与显示功能"><a href="#以行为单位的取代与显示功能" class="headerlink" title="以行为单位的取代与显示功能"></a>以行为单位的取代与显示功能</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">nl</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'2,5c NO 2-5 number'</span>  1    root:x:0:0:root:/root:/bin/bashNO 2-5 number  6    games:x:5:60:games:/usr/games:/usr/sbin/nologin$ <span class="token function">nl</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> -n <span class="token string">'5,7p'</span>       5    sync:x:4:65534:sync:/bin:/bin/sync       6    games:x:5:60:games:/usr/games:/usr/sbin/nologin       7    man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</code></pre><h6 id="部分数据的搜寻并取代的功能"><a href="#部分数据的搜寻并取代的功能" class="headerlink" title="部分数据的搜寻并取代的功能"></a>部分数据的搜寻并取代的功能</h6></li></ul><p>sed 的搜寻与取代的与 vi 相当的类似</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sed</span> <span class="token string">'s/要被取代的字符串/新的字符串/g'</span>$ /sbin/ifconfig eth0eth0: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>inet 192.168.1.100mtu 1500netmask 255.255.255.0inet6 fe80::5054:ff:fedf:e174ether 52:54:00:df:e1:74broadcast 192.168.1.255prefixlen 64txqueuelen 1000scopeid 0x20<span class="token operator">&lt;</span>link<span class="token operator">></span><span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>$ /sbin/ifconfig eth0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'inet '</span>inet 192.168.1.100netmask 255.255.255.0broadcast 192.168.1.255<span class="token comment" spellcheck="true"># 当场仅剩下一行!要注意, CentOS 7 与 CentOS 6 以前的 ifconfig 指令输出结果不太相同,</span><span class="token comment" spellcheck="true"># 鸟哥这个范例主要是针对 CentOS 7 以后的喔!接下来,我们要将开始到 addr: 通通删除,</span><span class="token comment" spellcheck="true"># 就是像底下这样:</span><span class="token comment" spellcheck="true"># inet 192.168.1.100 netmask 255.255.255.0</span><span class="token comment" spellcheck="true"># 上面的删除关键在于『 ^.*inet broadcast 192.168.1.255』啦!正则表达式出现! ^_^</span>$ /sbin/ifconfig eth0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'inet '</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^.*inet //g'</span>192.168.1.100netmask 255.255.255.0broadcast 192.168.1.255<span class="token comment" spellcheck="true"># 仔细与上个步骤比较一下,前面的部分不见了!接下来则是删除后续的部分,亦即:</span>192.168.1.100netmask 255.255.255.0broadcast 192.168.1.255<span class="token comment" spellcheck="true"># 此时所需的正则表达式为:『 ' *netmask.*$ 』就是啦!</span>$ /sbin/ifconfig eth0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'inet '</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^.*inet //g'</span> \<span class="token operator">></span><span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/ *netmask.*$//g'</span>192.168.1.100$ <span class="token function">cat</span> /etc/man_db.conf <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'MAN'</span><span class="token comment" spellcheck="true"># MANDATORY_MANPATH</span>manpath_element<span class="token comment" spellcheck="true"># MANPATH_MAP path_element manpath_element</span><span class="token comment" spellcheck="true"># MANDB_MAP global_manpath [relative_catpath]</span><span class="token comment" spellcheck="true"># every automatically generated MANPATH includes these fields</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>后面省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>删除掉批注之后的数据<span class="token operator">!</span>$ <span class="token function">cat</span> /etc/man_db.conf <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'MAN'</span><span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/#.*$//g'</span>MANDATORY_MANPATH/usr/man<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>后面省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment" spellcheck="true"># 从上面可以看出来,原本批注的数据都变成空白行啦!所以,接下来要删除掉空白行</span>$ <span class="token function">cat</span> /etc/man_db.conf <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'MAN'</span><span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/#.*$//g'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^$/d'</span>MANDATORY_MANPATH /usr/manMANDATORY_MANPATH /usr/share/manMANDATORY_MANPATH /usr/local/share/man<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>后面省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h6 id="直接修改文件内容-危险动作"><a href="#直接修改文件内容-危险动作" class="headerlink" title="直接修改文件内容(危险动作)"></a>直接修改文件内容(危险动作)</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sed</span> -i <span class="token string">'s/\.$/\!/g'</span> regular_express.txt<span class="token comment" spellcheck="true"># 上头的 -i 选项可以让你的 sed 直接去修改后面接的文件内容而不是由屏幕输出喔!</span><span class="token comment" spellcheck="true"># 这个范例是用在取代!请您自行 cat 该文件去查阅结果啰</span><span class="token function">sed</span> -i <span class="token string">'<span class="token variable">$a</span> # This is a test'</span> regular_express.txt</code></pre><p>sed 的『 -i 』选项可以直接修改文件内容,这功能非常有帮助!举例来说,如果你有一个 100 万行<br>的文件,你要在第 100 行加某些文字,此时使用 vim 可能会疯掉!因为文件太大了!那怎办?就利<br>用 sed 啊!透过 sed 直接修改/取代的功能,你甚至不需要使用 vim 去修订!</p><h4 id="扩展正则表达式"><a href="#扩展正则表达式" class="headerlink" title="扩展正则表达式"></a>扩展正则表达式</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -v <span class="token string">'^$'</span> regular_express.txt <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'^#'</span></code></pre><p>需要使用到管线命令来搜寻两次!那么如果使用延伸型的正则表达式,我们可以简化为:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">egrep</span> -v <span class="token string">'^$|^#'</span> regular_express.txt</code></pre><table><thead><tr><th>RE 字符</th><th>意义与范例</th></tr></thead><tbody><tr><td>+</td><td>意义:重复『一个或一个以上』的前一个 RE 字符</td></tr><tr><td>?</td><td>意义:『零个或一个』的前一个 RE 字符</td></tr><tr><td>|</td><td>意义:用或( or )的方式找出数个字符串</td></tr><tr><td>()</td><td>意义:找出『群组』字符串</td></tr><tr><td>()+</td><td>意义:多个重复群组的判别</td></tr></tbody></table><h4 id="文件的格式化与相关处理"><a href="#文件的格式化与相关处理" class="headerlink" title="文件的格式化与相关处理"></a>文件的格式化与相关处理</h4><h5 id="格式化打印：printf"><a href="#格式化打印：printf" class="headerlink" title="格式化打印：printf"></a>格式化打印：printf</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">printf</span> <span class="token string">'打印格式'</span> 实际内容选项与参数:关于格式方面的几个特殊样式:\a 警告声音输出\b 退格键<span class="token punctuation">(</span>backspace<span class="token punctuation">)</span>\f 清除屏幕 <span class="token punctuation">(</span>form feed<span class="token punctuation">)</span>\n 输出新的一行\r 亦即 Enter 按键\t 水平的 <span class="token punctuation">[</span>tab<span class="token punctuation">]</span> 按键\v 垂直的 <span class="token punctuation">[</span>tab<span class="token punctuation">]</span> 按键\xNN NN 为两位数的数字,可以转换数字成为字符。关于 C 程序语言内,常见的变数格式%ns 那个 n 是数字, s 代表 string ,亦即多少个字符<span class="token punctuation">;</span>%ni 那个 n 是数字, i 代表 integer ,亦即多少整数字数<span class="token punctuation">;</span>%N.nf 那个 n 与 N 都是数字, f 代表 floating <span class="token punctuation">(</span>浮点<span class="token punctuation">)</span>,如果有小数字数,假设我共要十个位数,但小数点有两位,即为 %10.2f 啰<span class="token operator">!</span></code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">printf</span> <span class="token string">'%s\t %s\t %s\t %s\t %s\t \n'</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> printf.txt<span class="token variable">)</span></span>Name     Chinese     English     Math     AverageDmTsai     80     60     92     77.33VBird     75     55     80     70.00Ken     60     90     70     73.33$ <span class="token function">printf</span> <span class="token string">'%10s %5i %5i %5i %8.2f \n'</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> printf.txt <span class="token operator">|</span> <span class="token function">grep</span> -v Name<span class="token variable">)</span></span>DmTsai 80 60 92 77.33VBird 75 55 80 70.00Ken 60 90 70 73.33</code></pre><p>printf 除了可以格式化处理之外,他还可以依据 ASCII 的数字与图形对应来显示数据(注 3)! 举<br>例来说 16 进位的 45 可以得到什么 ASCII 的显示图 (其实是字符)?</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">printf</span> <span class="token string">'\x45\n'</span>E<span class="token comment" spellcheck="true"># 这东西也很好玩~他可以将数值转换成为字符,如果你会写 script 的话,</span><span class="token comment" spellcheck="true"># 可以自行测试一下,由 20~80 之间的数值代表的字符是啥喔! ^_^</span></code></pre><h5 id="awk数据处理工具"><a href="#awk数据处理工具" class="headerlink" title="awk数据处理工具"></a>awk数据处理工具</h5><p>awk 也是一个非常棒的数据处理工具!相较于 sed 常常作用于一整个行的处理, awk 则比较倾向<br>于一行当中分成数个『字段』来处理。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token string">'条件类型 1{动作 1} 条件类型 2{动作 2} ...'</span> filename</code></pre><p>awk 主要是处理『每一行的字段内的数据』,而默认的『字段的分隔符为 “空格键” 或 “[tab]键” 』</p><pre class=" language-bash"><code class="language-bash">last -n 5jason    pts/0        j                Tue May 21 13:40   still logged <span class="token keyword">in</span>jason    :1           :1               Tue May 21 13:40   still logged <span class="token keyword">in</span><span class="token function">reboot</span>   system boot  4.15.0-50-generi Tue May 21 13:40   still runningjason    pts/0        j                Tue May 21 09:21 - down   <span class="token punctuation">(</span>03:00<span class="token punctuation">)</span>jason    :1           :1               Tue May 21 09:21 - 12:22  <span class="token punctuation">(</span>03:00<span class="token punctuation">)</span>wtmp begins Fri May  3 22:10:08 2019$ last -n 5 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span> "\t" <span class="token variable">$4</span>"\t"<span class="token variable">$5</span>}'</span>jason    Tue    Mayjason    Tue    May<span class="token function">reboot</span>    4.15.0-50-generi    Tuejason    Tue    Mayjason    Tue    Maywtmp    May    3</code></pre><p>每一行的每个字段都是有变量名称的,那就是 $1, $2… 等变量名称</p><ul><li>读入第一行,并将第一行的资料填入 $0, $1, $2…. 等变数当中;</li><li>依据 “条件类型” 的限制,判断是否需要进行后面的 “动作”;</li><li>做完所有的动作与条件类型;</li><li>若还有后续的『行』的数据,则重复上面 1~3 的步骤,直到所有的数据都读完为止。</li></ul><p>awk 是『以行为一次处理的单位』, 而『以字段为最小的处理单位』</p><p>| 变量名称| 代表意义|<br>| NF | 每一行 ($0) 拥有的字段总数 |<br>| NR | 目前 awk 所处理的是『第几行』数据 |<br>| FS | 目前的分隔字符,默认是空格键 |</p><p>awk 后续的所有动作是以单引号『 ‘ 』括住的,由于单引号与双引号都必须是成对的, 所以, awk 的格式内容如果想要以 print 打印时,记得非变量的文字部分,包含上一小节 printf 提到的格式中,都需要使用双引号来定义出来!因为单引号已经是 awk 的指令固定用法了!</p><pre class=" language-bash"><code class="language-bash">last -n 5 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span> "\t lines: " NR"\t colums: " NF}'</span>jason     lines: 1     colums: 10jason     lines: 2     colums: 10<span class="token function">reboot</span>     lines: 3     colums: 10jason     lines: 4     colums: 10jason     lines: 5     colums: 10     lines: 6     colums: 0wtmp     lines: 7     colums: 7</code></pre><ul><li>awk 的逻辑运算字符<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{FS=":"} <span class="token variable">$3</span> &lt; 10 {print <span class="token variable">$1</span> "\t" <span class="token variable">$3</span>}'</span>root:x:0:0:root:/root:/bin/bashdaemon    1bin    2sys    3<span class="token function">sync</span>    4games    5<span class="token function">man</span>    6lp    7mail    8news    9</code></pre>因为我们读入第一行的时候,那些变数 $1,$2… 默认还是以空格键为分隔的,所以虽然我们定义了 FS=”:” 了, 但是却仅能在第二行后才开始生效。<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN {FS=":"} <span class="token variable">$3</span> &lt; 10 {print <span class="token variable">$1</span> "\t " <span class="token variable">$3</span>}'</span>root 0bin 1daemon 2<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>以下省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre>假设我有一个薪资数据表档名为 pay.txt ,内容是这样的:<pre><code>Name     1st   2nd   3thVBird  23000 24000 25000DMTsai 21000 20000 23000Bird2  43000 42000 41000</code></pre></li><li>第一行只是说明,所以第一行不要进行加总 (NR==1 时处理);</li><li>第二行以后就会有加总的情况出现 (NR&gt;=2 以后处理)<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> pay.txt <span class="token operator">|</span>  <span class="token function">awk</span> <span class="token string">'NR==1{printf "%10s %10s %10s %10s %10s\n",<span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$3</span>,<span class="token variable">$4</span>,"Total" }NR>=2{total = <span class="token variable">$2</span> + <span class="token variable">$3</span> + <span class="token variable">$4</span>printf "%10s %10d %10d %10d %10.2f\n", <span class="token variable">$1</span>, <span class="token variable">$2</span>, <span class="token variable">$3</span>, <span class="token variable">$4</span>, total}'</span>    Name        1st        2nd        3th      Total   VBird      23000      24000      25000   72000.00  DMTsai      21000      20000      23000   64000.00   Bird2      43000      42000      41000  126000.00</code></pre></li><li>awk 的指令间隔:所有 awk 的动作,亦即在 {} 内的动作,如果有需要多个指令辅助时,可利用分号『;』间隔, 或者直接以 [Enter] 按键来隔开每个指令,例如上面的范例中,鸟哥共按了三次 [enter] 喔!</li><li>逻辑运算当中,如果是『等于』的情况,则务必使用两个等号『==』!</li><li>格式化输出时,在 printf 的格式设定当中,务必加上 \n ,才能进行分行!</li><li>与 bash shell 的变量不同,在 awk 当中,变量可以直接使用,不需加上 $ 符号。</li></ul><p>awk的动作内 {} 也是支持 if (条件) 的</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> pay.txt <span class="token operator">|</span> \<span class="token operator">></span> <span class="token function">awk</span> <span class="token string">'{if(NR==1) printf "%10s %10s %10s %10s %10s\n",<span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$3</span>,<span class="token variable">$4</span>,"Total"}> NR>=2{total = <span class="token variable">$2</span> + <span class="token variable">$3</span> + <span class="token variable">$4</span>> printf "%10s %10d %10d %10d %10.2f\n", <span class="token variable">$1</span>, <span class="token variable">$2</span>, <span class="token variable">$3</span>, <span class="token variable">$4</span>, total}'</span></code></pre><h5 id="文件比对工具"><a href="#文件比对工具" class="headerlink" title="文件比对工具"></a>文件比对工具</h5><p><strong><em>同一个软件包的不同版本之间,比较配置文件与原始档的差异</em></strong></p><h6 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h6><p>diff 就是用在比对两个文件之间的差异的,并且是以行为单位来比对的!一般是用在 ASCII 纯文本<br>档的比对上。 由于是以行为比对的单位,因此 <strong><em>diff 通常是用在同一的文件(或软件)的新旧版本差异上</em></strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p /tmp/testpw <span class="token operator">&lt;=</span><span class="token operator">=</span>先建立测试用的目录$ <span class="token function">cd</span> /tmp/testpw$ <span class="token function">cp</span> /etc/passwd passwd.old$ <span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'4d'</span> -e <span class="token string">'6c no six line'</span> <span class="token operator">></span> passwd.new<span class="token comment" spellcheck="true"># 注意一下, sed 后面如果要接超过两个以上的动作时,每个动作前面得加 -e 才行!</span><span class="token comment" spellcheck="true"># 透过这个动作,在 /tmp/testpw 里面便有新旧的 passwd 文件存在了!</span>$ <span class="token function">diff</span> <span class="token punctuation">[</span>-bBi<span class="token punctuation">]</span> from-file to-file选项与参数:from-file :一个档名,作为原始比对文件的档名<span class="token punctuation">;</span>to-file :一个档名,作为目的比对文件的档名<span class="token punctuation">;</span>注意,from-file 或 to-file 可以 - 取代,那个 - 代表『Standard input』之意。-b :忽略一行当中,仅有多个空白的差异<span class="token punctuation">(</span>例如 <span class="token string">"about me"</span> 与 <span class="token string">"about         me"</span> 视为相同-B :忽略空白行的差异。-i :忽略大小写的不同。$ <span class="token function">diff</span> passwwd.old passwd.new4d3<span class="token operator">&lt;</span> sys:x:3:3:sys:/dev:/usr/sbin/nologin6c5<span class="token operator">&lt;</span> games:x:5:60:games:/usr/games:/usr/sbin/nologin---<span class="token operator">></span> no six line</code></pre><p>不要用 diff 去比对两个完全不相干的文件,因为比不出</p><p>diff 也可以比对整个目录下的差异</p><p>举例来说,我们想要了解一下不同的开机执行等级 (runlevel) 内容有啥不同?假设你已经知道执行等级 0 与 5 的启动脚本分别放置到/etc/rc0.d 及 /etc/rc5.d , 则我们可以将两个目录比对一下:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">diff</span> /etc/rc0.d/ /etc/rc5.d/Only <span class="token keyword">in</span> /etc/rc0.d/: K01alsa-utilsOnly <span class="token keyword">in</span> /etc/rc0.d/: K01avahi-daemon</code></pre><h6 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h6><p>cmp 主要也是在比对两个文件,他主要利用『字节』单位去比对, 因此,当然也可以比对 binary file</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cmp</span> passwd.old passwd.newpasswd.old passwd.new differ: byte 120, line 4<span class="token comment" spellcheck="true">#第一个发现的不同点在第四行,而且字节数是在第 120 个字节处</span></code></pre><h6 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h6><p>将旧的文件升级成为新的文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">diff</span> -Naur passwd.old passwd.new <span class="token operator">></span> passwd.patch$ <span class="token function">cat</span> passwd.patch--- passwd.old 2015-07-14 22:37:43.322535054 +0800+++ passwd.new 2015-07-14 22:38:03.010535054 +0800@@ -1,9 +1,8 @@<span class="token operator">&lt;=</span><span class="token operator">=</span>新旧文件的信息<span class="token operator">&lt;=</span><span class="token operator">=</span>新旧文件要修改数据的界定范围,旧档在 1-9 行,新檔在 1-8 行root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin-adm:x:3:4:adm:/var/adm:/sbin/nologin<span class="token operator">&lt;=</span><span class="token operator">=</span>左侧文件删除lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin-sync:x:5:0:sync:/sbin:/bin/sync <span class="token operator">&lt;=</span><span class="token operator">=</span>左侧文件删除+no six line <span class="token operator">&lt;=</span><span class="token operator">=</span>右侧新档加入shutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologin$ patch -pN <span class="token operator">&lt;</span> patch_file <span class="token operator">&lt;=</span><span class="token operator">=</span>更新$ patch -R -pN <span class="token operator">&lt;</span> patch_file <span class="token operator">&lt;=</span><span class="token operator">=</span>还原选项与参数:-p :后面可以接『取消几层目录』的意思。-R :代表还原,将新的文件还原成原来旧的版本。patch -p0 <span class="token operator">&lt;</span> passwd.patchpatching <span class="token function">file</span> passwd.old$ ll passwd*-rw-r--r-- 1 jason jason 2433 5月  21 17:52 passwd.new-rw-r--r-- 1 jason jason  515 5月  21 18:13 passwd.new.rej-rw-r--r-- 1 jason jason 2433 5月  21 18:13 passwd.old-rw-r--r-- 1 jason jason  514 5月  21 18:13 passwd.patch</code></pre><p>这里会使用 -p0 呢?因为我们在比对新旧版的数据时是在同一个目录下, 因此不需要减去目<br>录</p><h5 id="文件打印设置：pr"><a href="#文件打印设置：pr" class="headerlink" title="文件打印设置：pr"></a>文件打印设置：pr</h5><p>如果你曾经使用过一些图形接口的文字处理软件的话,那么很容易发现,当我们在打印的时候, 可<br>以同时选择与设定每一页打印时的标头</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">pr</span> /etc/man_db.conf</code></pre><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>正规表示法就是处理字符串的方法,他是以行为单位来进行字符串的处理行为;</li><li>正规表示法透过一些特殊符号的辅助,可以让使用者轻易的达到『搜寻/删除/取代』某特定字符串的处理程序;<br>只要工具程序支持正规表示法,那么该工具程序就可以用来作为正规表示法的字符串处理之用;</li><li>正规表示法与通配符是完全不一样的东西!通配符 (wildcard) 代表的是 bash 操作接口的一个功能, 但正规表示法则是一种字符串处理的表示方式!</li><li>使用 grep 或其他工具进行正规表示法的字符串比对时,因为编码的问题会有不同的状态,因此, 你最好<br>将 LANG 等变量设定为 C 或者是 en 等英文语系!</li><li>由于编码系统的不同,不同的语系 (LANG) 会造成正规表示法撷取资料的差异。因此可利用特殊符号如<br>[:upper:] 来替代编码范围较佳;</li><li>基础正规表示法的特殊字符有: *, ., [], [-], [^], ^, $ 等!</li><li>常见的支持正规表示法的工具软件有: grep , sed, vim 等等</li><li>printf 可以透过一些特殊符号来将数据进行格式化输出;</li><li>awk 可以使用『字段』为依据,进行数据的重新整理与输出;</li><li>文件的比对中,可利用 diff 及 cmp 进行比对,其中 diff 主要用在纯文本文件方面的新旧版本比对</li><li>patch 指令可以将旧版数据更新到新版 (主要亦由 diff 建立 patch 的补丁来源文件)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习实验--Iris</title>
      <link href="/2019/05/09/ji-qi-xue-xi-shi-yan-iris-jiao-cheng/"/>
      <url>/2019/05/09/ji-qi-xue-xi-shi-yan-iris-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><h4 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h4><p>这可能是模式识别文献中最著名的数据库。费舍尔的论文是该领域的经典之作，至今仍被频繁引用。（例如，参见Duda＆Hart。）数据集包含3个类别，每个类别50个实例，其中每个类别指的是一种鸢尾花。一类可以与另一类线性判别; 后者不能彼此线性判别。</p><p>对于三种不同的鸢尾花进行分类任务, <strong><em>数据集没有缺省的信息</em></strong> ，目标简单明了，通俗易懂。从<a href="https://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="noopener">项目地址</a>下载号我们需要的数据集。</p><p>首先解压我们得到的数据，数据中有两个文件<code>iris.names</code>和<code>Iris.data</code>，前者是对当前数据集的一个简单解释，后者是我们将要训练的数据。</p><h4 id="属性信息"><a href="#属性信息" class="headerlink" title="属性信息"></a>属性信息</h4><p>下面是每一行数据中，都好分隔开的字段所代表的不同含义。</p><pre><code>1.萼片长度cm2.萼片宽度cm3.花瓣长度cm4.花瓣宽度cm5.类：- Iris Setosa- Iris Versicolour- Iris Virginica</code></pre><p>这里，将分别使用两种方法 LDA 线性判别分析和 SVM 支持向量机。</p><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>首先先来看一下数据的大体情况吧！</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ <span class="token function">cat</span> Iris.data  <span class="token comment" spellcheck="true">#观察原始数据集</span>5.1,3.5,1.4,0.2,04.9,3.0,1.4,0.2,04.7,3.2,1.3,0.2,04.6,3.1,1.5,0.2,05.0,3.6,1.4,0.2,05.4,3.9,1.7,0.4,04.6,3.4,1.4,0.3,05.0,3.4,1.5,0.2,04.4,2.9,1.4,0.2,04.9,3.1,1.5,0.1,05.4,3.7,1.5,0.2,04.8,3.4,1.6,0.2,04.8,3.0,1.4,0.1,04.3,3.0,1.1,0.1,05.8,4.0,1.2,0.2,05.7,4.4,1.5,0.4,05.4,3.9,1.3,0.4,05.1,3.5,1.4,0.3,05.7,3.8,1.7,0.3,05.1,3.8,1.5,0.3,05.4,3.4,1.7,0.2,05.1,3.7,1.5,0.4,04.6,3.6,1.0,0.2,05.1,3.3,1.7,0.5,04.8,3.4,1.9,0.2,05.0,3.0,1.6,0.2,05.0,3.4,1.6,0.4,05.2,3.5,1.5,0.2,05.2,3.4,1.4,0.2,04.7,3.2,1.6,0.2,04.8,3.1,1.6,0.2,05.4,3.4,1.5,0.4,05.2,4.1,1.5,0.1,05.5,4.2,1.4,0.2,04.9,3.1,1.5,0.1,05.0,3.2,1.2,0.2,05.5,3.5,1.3,0.2,04.9,3.1,1.5,0.1,04.4,3.0,1.3,0.2,05.1,3.4,1.5,0.2,05.0,3.5,1.3,0.3,04.5,2.3,1.3,0.3,04.4,3.2,1.3,0.2,05.0,3.5,1.6,0.6,05.1,3.8,1.9,0.4,04.8,3.0,1.4,0.3,05.1,3.8,1.6,0.2,04.6,3.2,1.4,0.2,05.3,3.7,1.5,0.2,05.0,3.3,1.4,0.2,07.0,3.2,4.7,1.4,16.4,3.2,4.5,1.5,16.9,3.1,4.9,1.5,15.5,2.3,4.0,1.3,16.5,2.8,4.6,1.5,15.7,2.8,4.5,1.3,16.3,3.3,4.7,1.6,14.9,2.4,3.3,1.0,16.6,2.9,4.6,1.3,15.2,2.7,3.9,1.4,15.0,2.0,3.5,1.0,15.9,3.0,4.2,1.5,16.0,2.2,4.0,1.0,16.1,2.9,4.7,1.4,15.6,2.9,3.6,1.3,16.7,3.1,4.4,1.4,15.6,3.0,4.5,1.5,15.8,2.7,4.1,1.0,16.2,2.2,4.5,1.5,15.6,2.5,3.9,1.1,15.9,3.2,4.8,1.8,16.1,2.8,4.0,1.3,16.3,2.5,4.9,1.5,16.1,2.8,4.7,1.2,16.4,2.9,4.3,1.3,16.6,3.0,4.4,1.4,16.8,2.8,4.8,1.4,16.7,3.0,5.0,1.7,16.0,2.9,4.5,1.5,15.7,2.6,3.5,1.0,15.5,2.4,3.8,1.1,15.5,2.4,3.7,1.0,15.8,2.7,3.9,1.2,16.0,2.7,5.1,1.6,15.4,3.0,4.5,1.5,16.0,3.4,4.5,1.6,16.7,3.1,4.7,1.5,16.3,2.3,4.4,1.3,15.6,3.0,4.1,1.3,15.5,2.5,4.0,1.3,15.5,2.6,4.4,1.2,16.1,3.0,4.6,1.4,15.8,2.6,4.0,1.2,15.0,2.3,3.3,1.0,15.6,2.7,4.2,1.3,15.7,3.0,4.2,1.2,15.7,2.9,4.2,1.3,16.2,2.9,4.3,1.3,15.1,2.5,3.0,1.1,15.7,2.8,4.1,1.3,16.3,3.3,6.0,2.5,25.8,2.7,5.1,1.9,27.1,3.0,5.9,2.1,26.3,2.9,5.6,1.8,26.5,3.0,5.8,2.2,27.6,3.0,6.6,2.1,24.9,2.5,4.5,1.7,27.3,2.9,6.3,1.8,26.7,2.5,5.8,1.8,27.2,3.6,6.1,2.5,26.5,3.2,5.1,2.0,26.4,2.7,5.3,1.9,26.8,3.0,5.5,2.1,25.7,2.5,5.0,2.0,25.8,2.8,5.1,2.4,26.4,3.2,5.3,2.3,26.5,3.0,5.5,1.8,27.7,3.8,6.7,2.2,27.7,2.6,6.9,2.3,26.0,2.2,5.0,1.5,26.9,3.2,5.7,2.3,25.6,2.8,4.9,2.0,27.7,2.8,6.7,2.0,26.3,2.7,4.9,1.8,26.7,3.3,5.7,2.1,27.2,3.2,6.0,1.8,26.2,2.8,4.8,1.8,26.1,3.0,4.9,1.8,26.4,2.8,5.6,2.1,27.2,3.0,5.8,1.6,27.4,2.8,6.1,1.9,27.9,3.8,6.4,2.0,26.4,2.8,5.6,2.2,26.3,2.8,5.1,1.5,26.1,2.6,5.6,1.4,27.7,3.0,6.1,2.3,26.3,3.4,5.6,2.4,26.4,3.1,5.5,1.8,26.0,3.0,4.8,1.8,26.9,3.1,5.4,2.1,26.7,3.1,5.6,2.4,26.9,3.1,5.1,2.3,25.8,2.7,5.1,1.9,26.8,3.2,5.9,2.3,26.7,3.3,5.7,2.5,26.7,3.0,5.2,2.3,26.3,2.5,5.0,1.9,26.5,3.0,5.2,2.0,26.2,3.4,5.4,2.3,25.9,3.0,5.1,1.8,2</code></pre><p>很容易理解，这里我们抽出一个字段来看</p><pre><code>    5.9   ,   3.0  ,   5.1   ,   1.8   , 2|萼片长度cm|萼片宽度cm|花瓣长度cm|花瓣宽度cm| 类 |</code></pre><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p>好了既然我们已经知道数据是完整的，这里首先对原始数据预处理一下，改成比较适合的格式，这里可以使用python来完成，但是这里我是使用cut command将数据流重定向至一个信的csv文件，因为python还得编译的搞，不太舒服。</p><p>这里需要注意的两点是1.win下txt文件会在换行的时候加一个<code>^M</code>符号，虽然丢我们数据的处理可能不会产生影响，但是还是tr command去掉好了；2.在加入数据到csv文件时，不要忘记加入表头，否则一会数据分析的时候就很难看。</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Dat$ <span class="token keyword">echo</span> SepalLength,SepalWidth,PetalLength,\<span class="token operator">></span> PetalWidth,FClass <span class="token operator">></span> data.csvJason@X1:~/flower/Data$ <span class="token function">cat</span> Iris.data <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">'\r'</span> <span class="token operator">|</span><span class="token function">cut</span> -d<span class="token string">','</span> -f 1,2,3,4,5 <span class="token operator">>></span> data.csv<span class="token comment" spellcheck="true"># 没有返回错误信息，原目录下应该完成了转换。</span><span class="token comment" spellcheck="true"># 下面这条指令也有同样的效果</span>Jason@X1:~/flower/Data$ <span class="token function">cat</span> Iris.data <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">'\r'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN\{FS=","} {print <span class="token variable">$1</span>","<span class="token variable">$2</span>","<span class="token variable">$3</span>","<span class="token variable">$4</span>","<span class="token variable">$5</span>}'</span> <span class="token operator">>></span> real.csv<span class="token comment" spellcheck="true"># 看看格式是否正确</span>Jason@X1:~/flower/Data$ <span class="token function">xdg-open</span> data.csv</code></pre><p><img src="https://s2.ax1x.com/2019/05/15/ETsd2R.png" alt="ETsd2R.png"><br>好，可以看到我们的数据完美的被分隔了到了新建的<code>data.csv</code>中，这就非常舒服。</p><h4 id="读入数据"><a href="#读入数据" class="headerlink" title="读入数据"></a>读入数据</h4><p>利用<code>pandas</code>数据分析模块和<code>numpy</code>科学计算模块来分析数据。首先读入我们的数据：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFramedata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/data.csv'</span><span class="token punctuation">,</span>engine <span class="token operator">=</span> <span class="token string">'python'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>data_train <span class="token comment" spellcheck="true">#dataframe格式</span></code></pre><p>这里就可以看到data.csv中的数据了。但是只有数据表我们很难从中找出规律。所以接下来通过pandas中的方法来大体查看一下数据集的全貌。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> data_train.info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行一下唉</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Dat$ py3 linear.py<span class="token punctuation">[</span>150 rows x 5 columns<span class="token punctuation">]</span><span class="token operator">&lt;</span>class <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex: 150 entries, 0 to 149Data columns <span class="token punctuation">(</span>total 5 columns<span class="token punctuation">)</span>:SepalLength    150 non-null float64SepalWidth     150 non-null float64PetalLength    150 non-null float64PetalWidth     150 non-null float64FClass         150 non-null int64dtypes: float64<span class="token punctuation">(</span>4<span class="token punctuation">)</span>, int64<span class="token punctuation">(</span>1<span class="token punctuation">)</span>memory usage: 5.9 KBNone</code></pre><p>这里可以看到这150条记录都是非空的，并且前四个字段为float，最后一个为int型，看来Fisher没有故意搞我们，确实数据没有缺省。</p><p>然后我们再使用describe来看一下</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> data_train<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>       SepalLength  SepalWidth  PetalLength  PetalWidth      FClasscount   <span class="token number">150.000000</span>  <span class="token number">150.000000</span>   <span class="token number">150.000000</span>  <span class="token number">150.000000</span>  <span class="token number">150.000000</span>mean      <span class="token number">5.843333</span>    <span class="token number">3.054000</span>     <span class="token number">3.758667</span>    <span class="token number">1.198667</span>    <span class="token number">1.000000</span>std       <span class="token number">0.828066</span>    <span class="token number">0.433594</span>     <span class="token number">1.764420</span>    <span class="token number">0.763161</span>    <span class="token number">0.819232</span>min       <span class="token number">4.300000</span>    <span class="token number">2.000000</span>     <span class="token number">1.000000</span>    <span class="token number">0.100000</span>    <span class="token number">0.000000</span><span class="token number">25</span><span class="token operator">%</span>       <span class="token number">5.100000</span>    <span class="token number">2.800000</span>     <span class="token number">1.600000</span>    <span class="token number">0.300000</span>    <span class="token number">0.000000</span><span class="token number">50</span><span class="token operator">%</span>       <span class="token number">5.800000</span>    <span class="token number">3.000000</span>     <span class="token number">4.350000</span>    <span class="token number">1.300000</span>    <span class="token number">1.000000</span><span class="token number">75</span><span class="token operator">%</span>       <span class="token number">6.400000</span>    <span class="token number">3.300000</span>     <span class="token number">5.100000</span>    <span class="token number">1.800000</span>    <span class="token number">2.000000</span>max       <span class="token number">7.900000</span>    <span class="token number">4.400000</span>     <span class="token number">6.900000</span>    <span class="token number">2.500000</span>    <span class="token number">2.000000</span></code></pre><p>describe() 还是nice啊，我把describe的内容整理成一个表格，这样是不是更清晰一些</p><table><thead><tr><th></th><th>Min</th><th>Max</th><th>Mean</th><th>SD</th><th>Class</th><th>Correlation</th></tr></thead><tbody><tr><td>SepalLength</td><td>4.3</td><td>7.9</td><td>5.84</td><td>0.83</td><td>0.7826</td><td></td></tr><tr><td>SepalWidth</td><td>2.0</td><td>4.4</td><td>3.05</td><td>0.43</td><td>-0.4194</td><td></td></tr><tr><td>PetalLength</td><td>1.0</td><td>6.9</td><td>3.76</td><td>1.76</td><td>0.9490</td><td>(high!)</td></tr><tr><td>PetalWidth</td><td>0.1</td><td>2.5</td><td>1.20</td><td>0.76</td><td>0.9565</td><td>(high!)</td></tr></tbody></table><p>可以观察到，表格中最后两个item中Class的致是最高的，可以假设一下我们的花朵分类应该会跟这两个item关系密切（PS：因为要求用三次二分类做，所以这里我们可以现不用猜测数据简单关系）。</p><h4 id="PL和PW与属性结果的关系"><a href="#PL和PW与属性结果的关系" class="headerlink" title="PL和PW与属性结果的关系"></a>PL和PW与属性结果的关系</h4><p>第一个猜想是和PL，PW有关，看一下情况</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFramedata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设定图表颜色颜色</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>PetalLength<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># x轴数据为PL</span>            data_train<span class="token punctuation">.</span>PetalWidth<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># y轴数据为PW</span>            s <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的大小</span>            c <span class="token operator">=</span> <span class="token string">'steelblue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的颜色</span>            marker <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的形状</span>            alpha <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的透明度</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>PetalLength<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            data_train<span class="token punctuation">.</span>PetalWidth<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            s <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>            c <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">,</span>            marker <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">,</span>            alpha <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>PetalLength<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            data_train<span class="token punctuation">.</span>PetalWidth<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            s <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>            c <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">,</span>            marker <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">,</span>            alpha <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"Pw"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"PW,PL realation to FCalss"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#标题</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">"PL"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Dat$ py3 linear.py</code></pre><p><a href="https://imgchr.com/i/ExfvQA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/20/ExfvQA.png" alt="ExfvQA.png"></a><br>可以看到第一类鸢尾花Iris Setosa可以从后面两种中分离出来。</p><h4 id="SL和SW与属性结果的关系"><a href="#SL和SW与属性结果的关系" class="headerlink" title="SL和SW与属性结果的关系"></a>SL和SW与属性结果的关系</h4><p>这样还是制作一张散点图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFramedata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设定图表颜色颜色</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>SepalLength<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># x轴数据为PL</span>            data_train<span class="token punctuation">.</span>SepalWidth<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># y轴数据为PW</span>            s <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的大小</span>            c <span class="token operator">=</span> <span class="token string">'steelblue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的颜色</span>            marker <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的形状</span>            alpha <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置点的透明度</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>SepalLength<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            data_train<span class="token punctuation">.</span>SepalWidth<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            s <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>            c <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">,</span>            marker <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">,</span>            alpha <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>SepalLength<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            data_train<span class="token punctuation">.</span>SepalWidth<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>FClass<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            s <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>            c <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">,</span>            marker <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">,</span>            alpha <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"Sw"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"SW,SL realation to FCalss"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#标题</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">"SL"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/05/20/ExhuwV.png" alt="ExhuwV.png"><br>纳尼，看来SW分离不出来什么东西，和第一次是差不多的,看来通过某两对属性组就能分类的想法是不可能了。但是我们可以看出来，第一类鸢尾花无论是花瓣还是花萼都与后面两类差很多，分离出第一种化是比较容易的，重点放在如何分离拆开后两种花朵类型。</p><p>下面就要进入瞎猜的环节来看看还有哪些猜想是成立的，这里使用一个库函数帮我们理出所有的可能</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFramedata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设定图表颜色颜色</span><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snssns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>data_train<span class="token punctuation">,</span>hue<span class="token operator">=</span><span class="token string">'FClass'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://imgchr.com/i/ExhaTK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/20/ExhaTK.md.png" alt="ExhaTK.md.png"></a><br>看来在所有情况下Iris Versicolour和Iris Virginica都比较难区分。</p><h3 id="线性判别分析LDA"><a href="#线性判别分析LDA" class="headerlink" title="线性判别分析LDA"></a>线性判别分析LDA</h3><p>Linear Discriminant Analysis，器最主要的作用我觉得是对数据进行降维，通过将多维数据向更低空间投影，从而能获得一个易于理解的概念模型。</p><p>这里我们通过单个二分类问题的概念推到出多类线性判别分析。</p><h4 id="低维空间的选择"><a href="#低维空间的选择" class="headerlink" title="低维空间的选择"></a>低维空间的选择</h4><p>如何选择一个维度合适的空间，作为我们的特征空间呢？是将一个 d 维数据集投影到一个 k （ k&lt;d)维子空间中,如何选择k的大小。比如对于目前我们系哪有的数据集，就有2维或3维这两种降维选择。<br><a href="https://imgchr.com/i/EHTOqU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/16/EHTOqU.md.gif" alt="EHTOqU.md.gif"></a><br><img src="https://s2.ax1x.com/2019/05/16/EHHzg1.png" alt="EHHzg1.png"></p><p> 这里用到的方法是求特征向量,然后将器归总到类内散度矩阵和类间散度矩阵。<br>$$<br>\begin{align}<br> &amp; S_w=\Sigma_0+\Sigma_1=\sum_{x \in X_0}(x-\mu_0)(x-\mu_0)^T+\sum_{x \in X_1}(x-\mu_1)(x-\mu_1)^T \\<br> &amp; S_b=(\mu_0-\mu_1)(\mu_0-\mu_1)^T<br> \end{align}<br>$$</p><p> 每一个特征向量都对应一个特征值， 如果特征值的大小接近就代表我们投影到的空间维度比较合适。</p><h4 id="基本方法和步骤"><a href="#基本方法和步骤" class="headerlink" title="基本方法和步骤"></a>基本方法和步骤</h4><ul><li>计算数据集中不同类别数据的 d 维均值向量。</li><li>计算散度矩阵，包括类间、类内散度矩阵。</li><li>计算散度矩阵的特征向量 e1,e2,…,ed 和对应的特征值 λ1,λ2,…,λd。</li><li>特征向量按特征值大小降序排列，选前 k 个特征值对应的特征向量，组建一个 d×k 维矩阵——每一列就是一个特征向量。</li><li>用这个 d×k-维特征向量矩阵将样本变换到新的子空间。这一步可以写作矩阵乘法 $Y=X×W$ 。 X 是 n×d 维矩阵，表示 n 个样本； Y 是变换到子空间后的 n×k 维样本。</li></ul><h4 id="conjecture"><a href="#conjecture" class="headerlink" title="conjecture"></a>conjecture</h4><p>通过前面的一些基本分析，我们已经知道区分花朵类型的在四种特征里面，花瓣的长度、宽度更适合用来区分三种鸢尾花类别。但这是否正确还是要看一下结果,用直方图做一下映射</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltlabel_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Iris-Setosa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Iris-Versicolor'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'Iris-Virginica'</span><span class="token punctuation">}</span>feature_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>label <span class="token keyword">for</span> i<span class="token punctuation">,</span>label <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>data_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token keyword">for</span> i<span class="token punctuation">,</span>l <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>feature_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesy <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesfig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> ax<span class="token punctuation">,</span>cnt <span class="token keyword">in</span> zip<span class="token punctuation">(</span>axes<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># set bin sizes</span>    min_b <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    max_b <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bins <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>min_b<span class="token punctuation">,</span> max_b<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plottling the histograms</span>    <span class="token keyword">for</span> lab<span class="token punctuation">,</span>col <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ax<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>X<span class="token punctuation">[</span>y<span class="token operator">==</span>lab<span class="token number">-1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">]</span><span class="token punctuation">,</span>                   color<span class="token operator">=</span>col<span class="token punctuation">,</span>                   label<span class="token operator">=</span><span class="token string">'class %s'</span> <span class="token operator">%</span>label_dict<span class="token punctuation">[</span>lab<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   bins<span class="token operator">=</span>bins<span class="token punctuation">,</span>                   alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    ylims <span class="token operator">=</span> ax<span class="token punctuation">.</span>get_ylim<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot annotation</span>    leg <span class="token operator">=</span> ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">,</span> fancybox<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    leg<span class="token punctuation">.</span>get_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>ylims<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span>feature_dict<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Iris histogram #%s'</span> <span class="token operator">%</span>str<span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hide axis ticks</span>    ax<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span>            labelbottom<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> labelleft<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># remove axis spines</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"right"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"bottom"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"left"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://imgchr.com/i/Exhy6A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/20/Exhy6A.md.png" alt="Exhy6A.md.png"></a><br>仅凭这些简单的图形化展示，已经足以让我们得出结论：在四种特征里面，花瓣的长度、宽度更适合用来区分三种鸢尾花类别。</p><p>实际应用中，比起通过投影降维（此处即LDA），另一种比较好的办法是做特征筛选。像鸢尾花这样的低维数据集，看一眼直方图就能得到很多信息了。</p><h5 id="LDA"><a href="#LDA" class="headerlink" title="LDA"></a>LDA</h5><ul><li>计算数据的 d 维均值向量</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> math<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltfeature_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>label <span class="token keyword">for</span> i<span class="token punctuation">,</span>label <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>data_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token keyword">for</span> i<span class="token punctuation">,</span>l <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>feature_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#print (data_train.tail())</span>X_src <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesy_src <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesX<span class="token punctuation">,</span> X_spl<span class="token punctuation">,</span> y<span class="token punctuation">,</span> y_spl <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_src<span class="token punctuation">,</span> y_src<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>stratify<span class="token operator">=</span>y_src<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print (X.tail(),y.tail())</span>np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>precision<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>mean_vectors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> clo <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_vectors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">[</span>y<span class="token operator">==</span>clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Vector FClass %s: %s\n'</span> <span class="token operator">%</span><span class="token punctuation">(</span>clo<span class="token number">-1</span><span class="token punctuation">,</span>mean_vectors<span class="token punctuation">[</span>clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>py一下</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ py3 LDA.pyMean Vector FClass 0: <span class="token punctuation">[</span>4.9886 3.4114 1.4886 0.2371<span class="token punctuation">]</span>Mean Vector FClass 1: <span class="token punctuation">[</span>5.9486 2.7314 4.2371 1.3086<span class="token punctuation">]</span>Mean Vector FClass 2: <span class="token punctuation">[</span>6.6829 3.0086 5.6314 2.0686<span class="token punctuation">]</span></code></pre><ul><li>计算散度矩阵<br>$$<br>S_w=\Sigma_0+\Sigma_1=\sum_{x \in X_0}(x-\mu_0)(x-\mu_0)^T+\sum_{x \in X_1}(x-\mu_1)(x-\mu_1)^T<br>$$<pre class=" language-python"><code class="language-python">S_W <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4x4的矩阵</span><span class="token keyword">for</span> clo<span class="token punctuation">,</span>mv <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mean_vectors<span class="token punctuation">)</span><span class="token punctuation">:</span>  class_sc_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> row <span class="token keyword">in</span> X<span class="token punctuation">[</span>y <span class="token operator">==</span> clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      row<span class="token punctuation">,</span> mv <span class="token operator">=</span> row<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mv<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      class_sc_mat <span class="token operator">+=</span> <span class="token punctuation">(</span>row<span class="token operator">-</span>mv<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token operator">-</span>mv<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span>  S_W <span class="token operator">+=</span> class_sc_mat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类内散度矩阵:\n'</span><span class="token punctuation">,</span> S_W<span class="token punctuation">)</span></code></pre>py一下<pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ py3 LDA.py类内散度矩阵:<span class="token punctuation">[</span><span class="token punctuation">[</span>26.9126  9.7063 17.5711  3.2614<span class="token punctuation">]</span><span class="token punctuation">[</span> 9.7063 13.2583  5.7343  3.0851<span class="token punctuation">]</span><span class="token punctuation">[</span>17.5711  5.7343 19.4926  4.0283<span class="token punctuation">]</span><span class="token punctuation">[</span> 3.2614  3.0851  4.0283  3.8246<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>$$<br>S_b=(\mu_0-\mu_1)(\mu_0-\mu_1)^T<br>$$</li></ul><pre class=" language-python"><code class="language-python">overall_mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>S_B <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>mean_vec <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>mean_vectors<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> X<span class="token punctuation">[</span>y<span class="token operator">==</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    mean_vec <span class="token operator">=</span> mean_vec<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    overall_mean <span class="token operator">=</span> overall_mean<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    S_B <span class="token operator">+=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>mean_vec <span class="token operator">-</span> overall_mean<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>mean_vec <span class="token operator">-</span> overall_mean<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类间散度矩阵:\n'</span><span class="token punctuation">,</span> S_B<span class="token punctuation">)</span></code></pre><p>py一下</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ py3 LDA.py类间散度矩阵: <span class="token punctuation">[</span><span class="token punctuation">[</span> 50.5328 -13.205  124.6189  54.7119<span class="token punctuation">]</span> <span class="token punctuation">[</span>-13.205    8.1842 -36.7686 -14.6504<span class="token punctuation">]</span> <span class="token punctuation">[</span>124.6189 -36.7686 311.056  135.2389<span class="token punctuation">]</span> <span class="token punctuation">[</span> 54.7119 -14.6504 135.2389  59.263 <span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><ul><li>求解矩阵的广义特征值</li></ul><pre class=" language-bash"><code class="language-bash">eig_vals, eig_vecs <span class="token operator">=</span> np.linalg.eig<span class="token punctuation">(</span>np.linalg.inv<span class="token punctuation">(</span>S_W<span class="token punctuation">)</span>.dot<span class="token punctuation">(</span>S_B<span class="token punctuation">))</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>eig_vals<span class="token punctuation">))</span>:    eigvec_sc <span class="token operator">=</span> eig_vecs<span class="token punctuation">[</span>:,i<span class="token punctuation">]</span>.reshape<span class="token punctuation">(</span>4,1<span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">'\n特征向量 {}: \n{}'</span>.format<span class="token punctuation">(</span>i+1, eigvec_sc.real<span class="token punctuation">))</span>    print<span class="token punctuation">(</span><span class="token string">'特征值 {:}: {:.2e}'</span>.format<span class="token punctuation">(</span>i+1, eig_vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.real<span class="token punctuation">))</span></code></pre><p>py一下</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ py3 LDA.py特征向量 1:<span class="token punctuation">[</span><span class="token punctuation">[</span>-0.1895<span class="token punctuation">]</span> <span class="token punctuation">[</span>-0.3302<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.5051<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.7746<span class="token punctuation">]</span><span class="token punctuation">]</span>特征值 1: 3.23e+01特征向量 2:<span class="token punctuation">[</span><span class="token punctuation">[</span> 0.0448<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.5551<span class="token punctuation">]</span> <span class="token punctuation">[</span>-0.2891<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.7786<span class="token punctuation">]</span><span class="token punctuation">]</span>特征值 2: 3.72e-01特征向量 3:<span class="token punctuation">[</span><span class="token punctuation">[</span> 0.4887<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.1004<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.1842<span class="token punctuation">]</span> <span class="token punctuation">[</span>-0.8468<span class="token punctuation">]</span><span class="token punctuation">]</span>特征值 3: -4.92e-15特征向量 4:<span class="token punctuation">[</span><span class="token punctuation">[</span> 0.7403<span class="token punctuation">]</span> <span class="token punctuation">[</span>-0.3929<span class="token punctuation">]</span> <span class="token punctuation">[</span>-0.4662<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.2834<span class="token punctuation">]</span><span class="token punctuation">]</span>特征值 4: 2.78e-15</code></pre><p>特征向量和特征值代表了一个线性变换的形变程度，特征向量是形变的方向，特征值是形变的大小。</p><ul><li>选择线性判别器构成新的特征子空间</li></ul><p>将特征向量根据特征值的大小从高到低排序，然后选择前 k 个本征向量：</p><pre class=" language-python"><code class="language-python">eig_pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>eig_vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eig_vecs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>eig_vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>eig_pairs <span class="token operator">=</span> sorted<span class="token punctuation">(</span>eig_pairs<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征值:\n'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> eig_pairs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>py一下</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ py3 LDA.py特征值:32.341821356487370.371713784453321874.915564356595094e-152.7775787346756613e-15</code></pre><p>我们将4d空间投影到2d空间上，所以选择前两个特征向量。在LDA中，线性判别器的数目最多是 c−1，c 是总的类别数，这是因为类内散布矩阵 SB 是 c 个秩为1或0的矩阵的和。</p><p>按特征值的大小得到降序排列的本征对之后，现在就可以组建我们的 k×d-维特征向量矩阵 W 了（此时大小为 4×2），这样就从最初的4维特征空间降到了2维的特征空间。</p><pre class=" language-python"><code class="language-python">W <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>eig_pairs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eig_pairs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'矩阵 W:\n'</span><span class="token punctuation">,</span> W<span class="token punctuation">.</span>real<span class="token punctuation">)</span></code></pre><p>py一下</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ py3 LDA.py矩阵 W: <span class="token punctuation">[</span><span class="token punctuation">[</span>-0.1895  0.0448<span class="token punctuation">]</span> <span class="token punctuation">[</span>-0.3302  0.5551<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.5051 -0.2891<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.7746  0.7786<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><ul><li>将样本变换到新的子空间中</li></ul><p>使用上一步刚刚计算出的 4×2-维矩阵 W， 将样本变换到新的特征空间上：</p><pre class=" language-python"><code class="language-python">X_lda <span class="token operator">=</span> X<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">)</span>label_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Iris-Setosa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Iris-Versicolor'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'Iris-Virginica'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">plot_step_lda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> label<span class="token punctuation">,</span>marker<span class="token punctuation">,</span>color <span class="token keyword">in</span> zip<span class="token punctuation">(</span>        range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>X_lda<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>y <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                y<span class="token operator">=</span>X_lda<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>y <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                marker<span class="token operator">=</span>marker<span class="token punctuation">,</span>                color<span class="token operator">=</span>color<span class="token punctuation">,</span>                alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                label<span class="token operator">=</span>label_dict<span class="token punctuation">[</span>label<span class="token number">-1</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'LD1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'LD2'</span><span class="token punctuation">)</span>    leg <span class="token operator">=</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">,</span> fancybox<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    leg<span class="token punctuation">.</span>get_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'LDA: Iris projection onto the first 2 linear discriminants'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hide axis ticks</span>    plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span>            labelbottom<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> labelleft<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># remove axis spines</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"right"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"bottom"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"left"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plot_step_lda<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="结果绘图"><a href="#结果绘图" class="headerlink" title="结果绘图"></a>结果绘图</h4><p><img src="https://s2.ax1x.com/2019/05/20/ExhIpQ.png" alt="ExhIpQ.png"><br>上方散点图展示了我们通过 LDA 构建的新的特征子空间。可以看到第一个线性判别器“LD1”把不同类数据区分得不错，第二个线性判别器就不行了。其原因在上面已经做了简单解释。</p><h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p>然后就是对样本结果集的预测了。</p><pre class=" language-python"><code class="language-python">X_lda <span class="token operator">=</span> X<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">)</span>label_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Iris-Setosa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Iris-Versicolor'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'Iris-Virginica'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">plot_step_lda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> label<span class="token punctuation">,</span>marker<span class="token punctuation">,</span>color <span class="token keyword">in</span> zip<span class="token punctuation">(</span>        range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>X_lda<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>y <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                y<span class="token operator">=</span>X_lda<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>y <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                marker<span class="token operator">=</span>marker<span class="token punctuation">,</span>                color<span class="token operator">=</span>color<span class="token punctuation">,</span>                alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                label<span class="token operator">=</span>label_dict<span class="token punctuation">[</span>label<span class="token number">-1</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'LD1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'LD2'</span><span class="token punctuation">)</span>    leg <span class="token operator">=</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">,</span> fancybox<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    leg<span class="token punctuation">.</span>get_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'LDA: Iris projection onto the first 2 linear discriminants'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hide axis ticks</span>    plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span>            labelbottom<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> labelleft<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># remove axis spines</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"right"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"bottom"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"left"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plot_step_lda<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>下面比较一下我们的模型和实际的测试集有多大的误差</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> math<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltfeature_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>label <span class="token keyword">for</span> i<span class="token punctuation">,</span>label <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>data_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token keyword">for</span> i<span class="token punctuation">,</span>l <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>feature_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#print (data_train.tail())</span>X_src <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesy_src <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesX<span class="token punctuation">,</span> X_spl<span class="token punctuation">,</span> y<span class="token punctuation">,</span> y_spl <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_src<span class="token punctuation">,</span> y_src<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>stratify<span class="token operator">=</span>y_src<span class="token punctuation">)</span>np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>precision<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>mean_vectors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> clo <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_vectors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">[</span>y<span class="token operator">==</span>clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Vector FClass %s: %s\n'</span> <span class="token operator">%</span><span class="token punctuation">(</span>clo<span class="token number">-1</span><span class="token punctuation">,</span>mean_vectors<span class="token punctuation">[</span>clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>S_W <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4x4的矩阵</span><span class="token keyword">for</span> clo<span class="token punctuation">,</span>mv <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mean_vectors<span class="token punctuation">)</span><span class="token punctuation">:</span>    class_sc_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> X<span class="token punctuation">[</span>y <span class="token operator">==</span> clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        row<span class="token punctuation">,</span> mv <span class="token operator">=</span> row<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mv<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        class_sc_mat <span class="token operator">+=</span> <span class="token punctuation">(</span>row<span class="token operator">-</span>mv<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token operator">-</span>mv<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span>    S_W <span class="token operator">+=</span> class_sc_mat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类内散度矩阵:\n'</span><span class="token punctuation">,</span> S_W<span class="token punctuation">)</span>overall_mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>S_B <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>mean_vec <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>mean_vectors<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> X<span class="token punctuation">[</span>y<span class="token operator">==</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    mean_vec <span class="token operator">=</span> mean_vec<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    overall_mean <span class="token operator">=</span> overall_mean<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    S_B <span class="token operator">+=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>mean_vec <span class="token operator">-</span> overall_mean<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>mean_vec <span class="token operator">-</span> overall_mean<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类间散度矩阵:\n'</span><span class="token punctuation">,</span> S_B<span class="token punctuation">)</span>eig_vals<span class="token punctuation">,</span> eig_vecs <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>S_W<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>S_B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>eig_vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    eigvec_sc <span class="token operator">=</span> eig_vecs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n特征向量 {}: \n{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> eigvec_sc<span class="token punctuation">.</span>real<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征值 {:}: {:.2e}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> eig_vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">)</span><span class="token punctuation">)</span>eig_pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>eig_vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eig_vecs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>eig_vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>eig_pairs <span class="token operator">=</span> sorted<span class="token punctuation">(</span>eig_pairs<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征值:\n'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> eig_pairs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>W <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>eig_pairs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eig_pairs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'矩阵 W:\n'</span><span class="token punctuation">,</span> W<span class="token punctuation">.</span>real<span class="token punctuation">)</span>X_lda <span class="token operator">=</span> X_spl<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">)</span>label_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Iris-Setosa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Iris-Versicolor'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'Iris-Virginica'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">plot_step_lda</span><span class="token punctuation">(</span>argX<span class="token punctuation">,</span>argy<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> label<span class="token punctuation">,</span>marker<span class="token punctuation">,</span>color <span class="token keyword">in</span> zip<span class="token punctuation">(</span>        range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>argX<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>argy <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                y<span class="token operator">=</span>argX<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>argy <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                marker<span class="token operator">=</span>marker<span class="token punctuation">,</span>                color<span class="token operator">=</span>color<span class="token punctuation">,</span>                alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                label<span class="token operator">=</span>label_dict<span class="token punctuation">[</span>label<span class="token number">-1</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'LD1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'LD2'</span><span class="token punctuation">)</span>    leg <span class="token operator">=</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">,</span> fancybox<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    leg<span class="token punctuation">.</span>get_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hide axis ticks</span>    plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span>            labelbottom<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> labelleft<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># remove axis spines</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"right"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"bottom"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"left"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>y_pred<span class="token operator">=</span>y_spl<span class="token comment" spellcheck="true">#print (data_train.tail())</span><span class="token comment" spellcheck="true">#print (X.tail())</span>plot_step_lda<span class="token punctuation">(</span>X_lda<span class="token punctuation">,</span>y_spl<span class="token punctuation">,</span><span class="token string">"The Orignal Test Set"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>        y_pred<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">elif</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">1.69</span><span class="token punctuation">:</span>        y_pred<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">elif</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1.69</span><span class="token punctuation">:</span>        y_pred<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">#print(y_pred)</span>plot_step_lda<span class="token punctuation">(</span>X_lda<span class="token punctuation">,</span>y_pred<span class="token punctuation">,</span><span class="token string">"The Prediction Of LDA"</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/05/20/EzPu0x.png" alt="EzPu0x.png"><br><img src="https://s2.ax1x.com/2019/05/20/EzPgun.png" alt="EzPgun.png"><br>可以看到我们只有一个数据点出现了误差。</p><h4 id="猜想验证"><a href="#猜想验证" class="headerlink" title="猜想验证"></a>猜想验证</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> math<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltfeature_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>label <span class="token keyword">for</span> i<span class="token punctuation">,</span>label <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>data_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token keyword">for</span> i<span class="token punctuation">,</span>l <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>feature_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#print (data_train.tail())</span>X_src <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesy_src <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesX<span class="token punctuation">,</span> X_spl<span class="token punctuation">,</span> y<span class="token punctuation">,</span> y_spl <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_src<span class="token punctuation">,</span> y_src<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>stratify<span class="token operator">=</span>y_src<span class="token punctuation">)</span>np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>precision<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>mean_vectors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> clo <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_vectors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">[</span>y<span class="token operator">==</span>clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Vector FClass %s: %s\n'</span> <span class="token operator">%</span><span class="token punctuation">(</span>clo<span class="token number">-1</span><span class="token punctuation">,</span>mean_vectors<span class="token punctuation">[</span>clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>S_W <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2x2的矩阵</span><span class="token keyword">for</span> clo<span class="token punctuation">,</span>mv <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mean_vectors<span class="token punctuation">)</span><span class="token punctuation">:</span>    class_sc_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> X<span class="token punctuation">[</span>y <span class="token operator">==</span> clo<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        row<span class="token punctuation">,</span> mv <span class="token operator">=</span> row<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mv<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        class_sc_mat <span class="token operator">+=</span> <span class="token punctuation">(</span>row<span class="token operator">-</span>mv<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token operator">-</span>mv<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span>    S_W <span class="token operator">+=</span> class_sc_mat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类内散度矩阵:\n'</span><span class="token punctuation">,</span> S_W<span class="token punctuation">)</span>overall_mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>S_B <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>mean_vec <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>mean_vectors<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> X<span class="token punctuation">[</span>y<span class="token operator">==</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    mean_vec <span class="token operator">=</span> mean_vec<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    overall_mean <span class="token operator">=</span> overall_mean<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    S_B <span class="token operator">+=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>mean_vec <span class="token operator">-</span> overall_mean<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>mean_vec <span class="token operator">-</span> overall_mean<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类间散度矩阵:\n'</span><span class="token punctuation">,</span> S_B<span class="token punctuation">)</span>eig_vals<span class="token punctuation">,</span> eig_vecs <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>S_W<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>S_B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>eig_vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    eigvec_sc <span class="token operator">=</span> eig_vecs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n特征向量 {}: \n{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> eigvec_sc<span class="token punctuation">.</span>real<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征值 {:}: {:.2e}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> eig_vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">)</span><span class="token punctuation">)</span>eig_pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>eig_vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eig_vecs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>eig_vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>eig_pairs <span class="token operator">=</span> sorted<span class="token punctuation">(</span>eig_pairs<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征值:\n'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> eig_pairs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>W <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>eig_pairs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eig_pairs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'矩阵 W:\n'</span><span class="token punctuation">,</span> W<span class="token punctuation">.</span>real<span class="token punctuation">)</span>X_lda <span class="token operator">=</span> X_spl<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">)</span>label_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Iris-Setosa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Iris-Versicolor'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'Iris-Virginica'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">plot_step_lda</span><span class="token punctuation">(</span>argX<span class="token punctuation">,</span>argy<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> label<span class="token punctuation">,</span>marker<span class="token punctuation">,</span>color <span class="token keyword">in</span> zip<span class="token punctuation">(</span>        range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>argX<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>argy <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                y<span class="token operator">=</span>argX<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>argy <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                marker<span class="token operator">=</span>marker<span class="token punctuation">,</span>                color<span class="token operator">=</span>color<span class="token punctuation">,</span>                alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                label<span class="token operator">=</span>label_dict<span class="token punctuation">[</span>label<span class="token number">-1</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'LD1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'LD2'</span><span class="token punctuation">)</span>    leg <span class="token operator">=</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">,</span> fancybox<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    leg<span class="token punctuation">.</span>get_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hide axis ticks</span>    plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span>            labelbottom<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> labelleft<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># remove axis spines</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"right"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"bottom"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"left"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>y_pred<span class="token operator">=</span>y_spl<span class="token comment" spellcheck="true">#print (data_train.tail())</span><span class="token comment" spellcheck="true">#print (X.tail())</span>plot_step_lda<span class="token punctuation">(</span>X_lda<span class="token punctuation">,</span>y_spl<span class="token punctuation">,</span><span class="token string">"The Orignal Test Set"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">2.5</span><span class="token punctuation">:</span>        y_pred<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">elif</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">2.5</span> <span class="token operator">and</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">4.9</span><span class="token punctuation">:</span>        y_pred<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">elif</span> X_lda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">4.9</span><span class="token punctuation">:</span>        y_pred<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">#print(y_pred)</span>plot_step_lda<span class="token punctuation">(</span>X_lda<span class="token punctuation">,</span>y_pred<span class="token punctuation">,</span><span class="token string">"The Prediction Of LDA"</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Dat$ py3 conj.pyMean Vector FClass 0: <span class="token punctuation">[</span>1.4886 0.2371<span class="token punctuation">]</span>类内散度矩阵: <span class="token punctuation">[</span><span class="token punctuation">[</span>0.7954 0.1149<span class="token punctuation">]</span> <span class="token punctuation">[</span>0.1149 0.3417<span class="token punctuation">]</span><span class="token punctuation">]</span>类间散度矩阵: <span class="token punctuation">[</span><span class="token punctuation">[</span>184.6903  77.7966<span class="token punctuation">]</span> <span class="token punctuation">[</span> 77.7966  32.77  <span class="token punctuation">]</span><span class="token punctuation">]</span>特征向量 1:<span class="token punctuation">[</span><span class="token punctuation">[</span>0.7997<span class="token punctuation">]</span> <span class="token punctuation">[</span>0.6003<span class="token punctuation">]</span><span class="token punctuation">]</span>特征值 1: 2.76e+02特征向量 2:<span class="token punctuation">[</span><span class="token punctuation">[</span>-0.3882<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.9216<span class="token punctuation">]</span><span class="token punctuation">]</span>特征值 2: 0.00e+00特征值:275.72242108209240.0矩阵 W: <span class="token punctuation">[</span><span class="token punctuation">[</span> 0.7997 -0.3882<span class="token punctuation">]</span> <span class="token punctuation">[</span> 0.6003  0.9216<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><img src="https://s2.ax1x.com/2019/05/20/EzF3yd.png" alt="EzF3yd.png"><br><img src="https://s2.ax1x.com/2019/05/20/EzF0Sg.png" alt="EzF0Sg.png"><br>这次分类错误了两个数据点，看来SW，SL对于分类也有一定的作用（虽然很小）</p><h3 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h3><p>主成分分析（PCA）是一种统计过程，它使用正交变换将可能相关变量的一组观察值（每个实体都采用各种数值）转换为一组称为主成分的线性不相关变量值。如果有  ñ 观察与  p 变量，然后是不同主成分的数量 min(n-1,p)。这种转换的定义方式是第一主成分具有尽可能大的方差（即，尽可能多地考虑数据的可变性），并且每个后续成分依次在约束下具有最高的方差。它与前面的组件正交。得到的矢量（每个是变量的线性组合并包含n个观测值）是不相关的正交基组。PCA对原始变量的相对缩放敏感。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltlabel_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Iris-Setosa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Iris-Versicolor'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'Iris-Virginica'</span><span class="token punctuation">}</span>feature_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>label <span class="token keyword">for</span> i<span class="token punctuation">,</span>label <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>data_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token keyword">for</span> i<span class="token punctuation">,</span>l <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>feature_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'SL'</span><span class="token punctuation">,</span><span class="token string">'SW'</span><span class="token punctuation">,</span><span class="token string">'PL'</span><span class="token punctuation">,</span><span class="token string">'PW'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesy <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">'FClass'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token comment" spellcheck="true">#X_src = data_train[['SL','SW','PL','PW']].values</span><span class="token comment" spellcheck="true">#y_src = data_train['FClass'].values</span><span class="token comment" spellcheck="true">#X, X_spl, y, y_spl = train_test_split(X_src, y_src, test_size=0.3, random_state=42,stratify=y_src)</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">import</span> PCA<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>discriminant_analysis <span class="token keyword">import</span> LinearDiscriminantAnalysis <span class="token keyword">as</span> LDAtarget_names <span class="token operator">=</span> label_dictpca <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>X_r <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#X_p = pca.predict(X_spl)</span>lda <span class="token operator">=</span> LDA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>X_r2 <span class="token operator">=</span> lda<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>X_p <span class="token operator">=</span> lda<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>label_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Iris-Setosa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Iris-Versicolor'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'Iris-Virginica'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">plot_step_lda</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> label<span class="token punctuation">,</span>marker<span class="token punctuation">,</span>color <span class="token keyword">in</span> zip<span class="token punctuation">(</span>        range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>y <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                y<span class="token operator">=</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>real<span class="token punctuation">[</span>y <span class="token operator">==</span> label<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                marker<span class="token operator">=</span>marker<span class="token punctuation">,</span>                color<span class="token operator">=</span>color<span class="token punctuation">,</span>                alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                label<span class="token operator">=</span>label_dict<span class="token punctuation">[</span>label<span class="token number">-1</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'LD1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'LD2'</span><span class="token punctuation">)</span>    leg <span class="token operator">=</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">,</span> fancybox<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    leg<span class="token punctuation">.</span>get_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hide axis ticks</span>    plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">"both"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span>            labelbottom<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token string">"off"</span><span class="token punctuation">,</span> labelleft<span class="token operator">=</span><span class="token string">"on"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># remove axis spines</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"right"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"bottom"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">"left"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plot_step_lda<span class="token punctuation">(</span>X_r<span class="token punctuation">,</span><span class="token string">'PCA'</span><span class="token punctuation">)</span>plot_step_lda<span class="token punctuation">(</span>X_r2<span class="token punctuation">,</span><span class="token string">'LDA'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Percentage of variance explained for each components</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'explained variance ratio (first two components): %s'</span>      <span class="token operator">%</span> str<span class="token punctuation">(</span>pca<span class="token punctuation">.</span>explained_variance_ratio_<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="支持向量机SVM"><a href="#支持向量机SVM" class="headerlink" title="支持向量机SVM"></a>支持向量机SVM</h3><h4 id="数据集分割"><a href="#数据集分割" class="headerlink" title="数据集分割"></a>数据集分割</h4><p>这里每个化的种类由50个item，所以我们抽出40个进行训练，剩下的10个做测试集，这里使用train_test_split函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splitdata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>x <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"SepalLength"</span><span class="token punctuation">,</span><span class="token string">"SepalWidth"</span><span class="token punctuation">,</span><span class="token string">"PetalLength"</span><span class="token punctuation">,</span><span class="token string">"PetalWidth"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">"FClass"</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>stratify<span class="token operator">=</span>y<span class="token punctuation">)</span></code></pre><h4 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h4><p>直接调用sklearn中的函数即可，完全不需要写逻辑。其实LDA也是，但是为了理解内容我们还是稍微写一下LDA的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegressiondata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>x <span class="token operator">=</span>data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"SepalLength"</span><span class="token punctuation">,</span><span class="token string">"SepalWidth"</span><span class="token punctuation">,</span><span class="token string">"PetalLength"</span><span class="token punctuation">,</span><span class="token string">"PetalWidth"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">"FClass"</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>stratify<span class="token operator">=</span>y<span class="token punctuation">)</span>classifier <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></code></pre><p>最后py运行一下</p><h4 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metricsdata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>x <span class="token operator">=</span>data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"SepalLength"</span><span class="token punctuation">,</span><span class="token string">"SepalWidth"</span><span class="token punctuation">,</span><span class="token string">"PetalLength"</span><span class="token punctuation">,</span><span class="token string">"PetalWidth"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">"FClass"</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>stratify<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里本来是像使用40-10来分类的，结果发现这样使用后直接精度到0.98没太有优化空间了，所以改为35-15</span>classifier <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>prdt_y <span class="token operator">=</span> classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>prdt_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>prdt_y<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>py一下</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Data$ py3 sdfs.py              precision    recall  f1-score   support           0       1.00      1.00      1.00        15           1       1.00      0.73      0.85        15           2       0.79      1.00      0.88        15   micro avg       0.91      0.91      0.91        45   macro avg       0.93      0.91      0.91        45weighted avg       0.93      0.91      0.91        450.9111111111111111</code></pre><p>可以看到对于Iris Setosa - Iris Versicolour - Iris Virginica三种不同的花，我们分类的精度，召回率， $F1$ ，最后显示的正确率。</p><h4 id="模型改进"><a href="#模型改进" class="headerlink" title="模型改进"></a>模型改进</h4><p>正确率只有0.9啊，太捞了。我们能不能继续优化一下来。</p><h5 id="软间隔与正则化"><a href="#软间隔与正则化" class="headerlink" title="软间隔与正则化"></a>软间隔与正则化</h5><p>women知道优化目标中的第一项用来描述超平面的间隔大小，另一项 $\sum^{m}_{i=1}\iota(f(x_i),y_i)$ 用来表示训练集上的误差，课些微更一般的形式</p><p>$$<br>\min \limits_f \Omega(f) + C \sum_{i=1}^{m} \iota(f(x_i),y_i)<br>$$</p><p>线性判别中， $C$ 这个正则化常数，用于对经验风险和结构风险进行折中，而我们的<code>LogisticRegression()</code>方法中也可以设置这个参数。我们长将正则化的程度降低，看看会有什么不一样的结果。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> classifier <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1e3</span><span class="token punctuation">)</span></code></pre><p>再次py一下我们可以发现正确率果然提高了一些</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Dat$ py3 sdfs.py              precision    recall  f1-score   support           0       1.00      1.00      1.00        15           1       0.83      1.00      0.91        15           2       1.00      0.80      0.89        15   micro avg       0.93      0.93      0.93        45   macro avg       0.94      0.93      0.93        45weighted avg       0.94      0.93      0.93        450.9333333333333333</code></pre><h5 id="solver参数"><a href="#solver参数" class="headerlink" title="solver参数"></a>solver参数</h5><p><code>LogisticRegression()</code>包含的参数当然不仅仅只有C，我们还可以选择其他的优化方法，这里就要用到我们的solver参数了。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> classifier <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1e3</span>，solver<span class="token operator">=</span><span class="token string">'lbfgs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将优化器改为L-BFGS梯度下降优化</span></code></pre><p>可以自己py一下看看结果，这里就不再赘述了，但是需要注意的是，方法之间没有高低，根据第一章中的“没有免费午餐”定理，只有适合的才是最好的。下面是不同优化器:</p><pre><code>&#39;liblinear&#39;, &#39;newton-cg&#39;, &#39;lbfgs&#39;, &#39;sag&#39;, &#39;saga&#39;</code></pre><h5 id="multi-class参数"><a href="#multi-class参数" class="headerlink" title="multi_class参数"></a>multi_class参数</h5><p>这个参数的默认值为’ovr’,也就是将一个类的样例当作正例，其它类作为反例，来训练多个二分类器，和我们的思路是一样的；’multinomial’表示最小化多项式损失满足整个概率分布，也就是Softmax分类器。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> classifier <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1e3</span>，solver<span class="token operator">=</span><span class="token string">'sags'</span><span class="token punctuation">,</span>multi_class<span class="token operator">=</span><span class="token string">'multinomial'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#优化器改为随机平均梯度下降，multi改为Softmax</span></code></pre><p>这样处理之后，我们的精度达到了0.98，这样就十分可以了，继续处理有可能会出现过拟合的情况。</p><h5 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h5><p><img src="https://s2.ax1x.com/2019/05/20/Ex4m1H.png" alt="Ex4m1H.png"><br>观察一下混淆矩阵，我们的模型只在一个测试上分类错误！</p><h3 id="复制参数"><a href="#复制参数" class="headerlink" title="复制参数"></a>复制参数</h3><p>将我们训练的模型放入一个3*4的矩阵中，通过这个矩阵我们可以得到三个二元逻辑回归模型，系数矩阵就是coef，截距就是intercept。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metricsdata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/flower/Data/data.csv'</span><span class="token punctuation">)</span>x <span class="token operator">=</span>data_train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"SepalLength"</span><span class="token punctuation">,</span><span class="token string">"SepalWidth"</span><span class="token punctuation">,</span><span class="token string">"PetalLength"</span><span class="token punctuation">,</span><span class="token string">"PetalWidth"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data_train<span class="token punctuation">[</span><span class="token string">"FClass"</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>stratify<span class="token operator">=</span>y<span class="token punctuation">)</span>classifier <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1e3</span><span class="token punctuation">)</span>classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>prdt_y <span class="token operator">=</span> classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>coef <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>classifier<span class="token punctuation">.</span>coef_<span class="token punctuation">,</span>columns<span class="token operator">=</span>data_train<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>coef<span class="token punctuation">[</span><span class="token string">"intercept"</span><span class="token punctuation">]</span> <span class="token operator">=</span> classifier<span class="token punctuation">.</span>intercept_<span class="token keyword">print</span> <span class="token punctuation">(</span>coef<span class="token punctuation">.</span>round<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>py一下，</p><pre class=" language-bash"><code class="language-bash">Jason@X1:~/flower/Dat$ py3 args.py   SepalLength  SepalWidth  PetalLength  PetalWidth  intercept0         1.31        2.91        -3.99       -1.96       0.681         0.97       -0.22        -0.25       -1.77       1.612        -2.28       -2.69         4.24        3.72      -2.29</code></pre><p>也就得到了三个线性回归方程<br>$$<br>\begin{align}<br>&amp; P(FClass==0)=\sigma(1.31SL+2.91SW-3.99PL-1.96PW+0.68) \\<br>&amp; P(FClass==0)=\sigma(0.97SL-0.22SW-0.25PL-1.77PW+1.61) \\<br>&amp; P(FClass==0)=\sigma(-2.28SL-2.69SW+4.24PL+3.72PW-2.29) \\<br>\end{align}<br>$$</p><h3 id="相关论文与参考资料："><a href="#相关论文与参考资料：" class="headerlink" title="相关论文与参考资料："></a>相关论文与参考资料：</h3><ul><li><p>Fisher，RA“在分类学问题中使用多次测量”年度优生学，7，第二部分，179-188（1936）; 同样在“对数学统计的贡献”（John Wiley，NY，1950）中。<br><a href="https://science.sciencemag.org/content/sci/111/2875/local/back-matter.pdf" target="_blank" rel="noopener">网站链接</a></p></li><li><p>Duda，RO，＆Hart，PE（1973）模式分类和场景分析。（Q327.D83）John Wiley＆Sons。国际标准书号0-471-22361-1。见第218页。<br><a href="http://www.cs.utsa.edu/~bylander/cs6243/hastie94discriminant.pdf" target="_blank" rel="noopener">网站链接</a></p></li><li><p>Dasarathy，BV（1980）“邻近地区：在部分暴露环境中识别的新系统结构和分类规则”。IEEE模式分析和机器智能交易，卷。PAMI-2，No.1,67-71。<br><a href="https://ieeexplore.ieee.org/document/4766972" target="_blank" rel="noopener">网站链接</a></p></li><li><p>Gates，GW（1972）“缩减的最近邻规则”。IEEE信息理论学报，1972年5月，431-433。 <a href="https://ieeexplore.ieee.org/document/1054809" target="_blank" rel="noopener">网站链接</a></p></li><li><p><a href="http://sklearn.lzjqsdd.com/auto_examples/decomposition/plot_pca_vs_lda.html#example-decomposition-plot-pca-vs-lda-py" target="_blank" rel="noopener">scikit learn</a></p></li><li><p><a href="http://sebastianraschka.com/Articles/2014_python_lda.html" target="_blank" rel="noopener">sebastianraschka’s blog</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 线性判别 </tag>
            
            <tag> 支持向量机 </tag>
            
            <tag> 主成分分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(7)-认识与学习BASH</title>
      <link href="/2019/05/06/niao-ge-de-linux-si-fang-cai-7-ren-shi-yu-xue-xi-bash/"/>
      <url>/2019/05/06/niao-ge-de-linux-si-fang-cai-7-ren-shi-yu-xue-xi-bash/</url>
      
        <content type="html"><![CDATA[<h4 id="认识-BASH-这个-Shell"><a href="#认识-BASH-这个-Shell" class="headerlink" title="认识 BASH 这个 Shell"></a>认识 BASH 这个 Shell</h4><h5 id="硬件、核心与shell"><a href="#硬件、核心与shell" class="headerlink" title="硬件、核心与shell"></a>硬件、核心与shell</h5><p><img src="https://s2.ax1x.com/2019/05/09/EgZRIg.png" alt="EgZRIg.png"></p><pre class=" language-bash"><code class="language-bash">用户：通过命令或图形界面操作系统使用者界面：shell，application，KDE，接受来自使用者的指令，与核心进行沟通核心kernel:内存管理，CPU进程管理等硬件：CPU，内存，显卡等物理硬件bash</code></pre><p>壳程序的功能只是提供用户操作系统的一个接口。也就是说,只要能够操作应用程序的接口都能够称为壳程序。所以图形接口也是属于shell的。</p><h5 id="为何要学文字接口的shell"><a href="#为何要学文字接口的shell" class="headerlink" title="为何要学文字接口的shell"></a>为何要学文字接口的shell</h5><ul><li>文字接口的shell在不同的distribution里操作基本一致。</li><li>联机时文字接口的传输速度一定比较快, 而且,较不容易出现断线或者是信息外流的问题</li></ul><h5 id="系统的合法shell与-etc-shells的区别"><a href="#系统的合法shell与-etc-shells的区别" class="headerlink" title="系统的合法shell与/etc/shells的区别"></a>系统的合法shell与/etc/shells的区别</h5><p>早期shell有各种版本，Bourne SHell (sh) 、在 Sun 里头预设的 CSHell、 商业上常用的 K SHell、, 还有 TCSH 等等。现在超女个用的是基于GNU架构下发展的Bourne Again SHell（bash）。</p><p>通过检查<code>/etc/shells</code>文件可以检查由多少个shell可用</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/shells<span class="token comment" spellcheck="true"># /etc/shells: valid login shells</span>/bin/sh<span class="token punctuation">(</span>已经被 /bin/bash 所取代<span class="token punctuation">)</span>/bin/bash<span class="token punctuation">(</span>就是 Linux 预设的 shell<span class="token punctuation">)</span>/bin/rbash/bin/dash/usr/bin/tmux<span class="token punctuation">(</span>我自己安装的课分栏的shell<span class="token punctuation">)</span></code></pre><p>各家 shell 的功能都差不多,但是在某些语法的下达方面则有所不同， <strong><em>系统上合法的 shell 要写入 /etc/shells 这个文件</em></strong> ,系统某些服务在运作过程中,会去检查使用者能够使用的 shells ,而这些 shell 的查询就是藉由<code>/etc/shells</code> 这个文件。</p><p>使用者什么时候可以取得 shell 来工作？使用者预设会取得哪一个 shell ？登入的时候,系统就会分配一个 shell 让使用者来工作了。 而这个登入取得的 shell 就记录在<code>/etc/passwd</code> 这个文件内。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologin<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>每一行的最后一个数据,就是使用者登入后可以取得的预设的 shell,root是 <code>/bin/bash</code> ,不过,系统账号 bin 与 daemon 等等,就使用 <code>/sbin/nologin</code>,某些 FTP 网站会去检查使用者的可用 shell ,而如果你不想要让这些用户使用 FTP 以外的主机资源时,可能会给予该使用者 <code>/sbin/nologin</code>,让使用者无法以其他服务登入主机。</p><h5 id="Bash-shell的功能"><a href="#Bash-shell的功能" class="headerlink" title="Bash shell的功能"></a>Bash shell的功能</h5><p>bash 主要的优点有底下几个:</p><pre><code>命令编修能力 history命令与文件补全功能　[Tab]命令别名设定功能 alias工作控制，前景背景控制　job control, foreground, background程序化脚本　shell script通配符　wildcard</code></pre><h6 id="命令编修能力-history"><a href="#命令编修能力-history" class="headerlink" title="命令编修能力 history"></a>命令编修能力 history</h6><p> bash能记忆使用过的指令,记录在家目录内的 ｀.bash_history｀文件内， 不过,需要留意的是,｀~/.bash_history｀ 记录的是前一次登入以前所执行过的指令, 而至于这一次登入所执行的指令都被暂存在内存中,注销系统后,该指令记忆才会记录到 ｀.bash_history｀ 当中。</p><ul><li>命令与文件补全功能　[Tab]<br>1)少打很多字; 2)确定输入的数据是正确的</li><li>命令别名设定功能 alias<br>在指令列输入 alias 就可以知道目前的命令别名，也可以直接下达命令来设定别名:</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">alias</span> lm<span class="token operator">=</span><span class="token string">'ls -al'</span></code></pre><ul><li>工作控制，前台后台控制　job control, foreground, background<br>工作控制(jobs)的用途更广, 可以随时将工作丢到后台中执行，而不怕不小心使用了<br>[Ctrl] + c 来停掉该程序。此外,也可以在单一登录的环境中,达到多任务的目的。</li><li>程序化脚本　shell script<br>以后在供雷讲唔</li><li>通配符　wildcard</li></ul><h5 id="查询指令是否为Bash-Shell的内建命令：type"><a href="#查询指令是否为Bash-Shell的内建命令：type" class="headerlink" title="查询指令是否为Bash Shell的内建命令：type"></a>查询指令是否为Bash Shell的内建命令：type</h5><p>利用 type 这个指令来观察指令是来自于外部指令(指的是其他非 bash 所提供的指令) 或是内建在 bash 当中的</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">type</span> <span class="token punctuation">[</span>-tpa<span class="token punctuation">]</span> name选项与参数::不加任何选项与参数时,type 会显示出 name 是外部指令还是 <span class="token function">bash</span> 内建指令-t:当加入 -t 参数时,type 会将 name 以底下这些字眼显示出他的意义:<span class="token function">file</span> :表示为外部指令<span class="token punctuation">;</span><span class="token function">alias</span> :表示该指令为命令别名所设定的名称<span class="token punctuation">;</span><span class="token function">builtin</span> :表示该指令为 <span class="token function">bash</span> 内建的指令功能<span class="token punctuation">;</span>-p :如果后面接的 name 为外部指令时,才会显示完整文件名<span class="token punctuation">;</span>-a :会由 PATH 变量定义的路径中,将所有含 name 的指令都列出来,包含 <span class="token function">alias</span></code></pre><p> type 也可以用来作为类似 which 指令的用途</p><h5 id="指令的下达与快速编辑按钮"><a href="#指令的下达与快速编辑按钮" class="headerlink" title="指令的下达与快速编辑按钮"></a>指令的下达与快速编辑按钮</h5><p>利用『 [Enter] 』来将 [Enter] 这个按键『跳脱!』开来,让 [Enter] 按键不再具有『开始执行』的功能!好让指令可以继续在下一行输入。需要特别留意, [Enter] 按键是紧接着反斜杠 () 的,两者中间没有其他字符。 因为 \ 仅跳过『紧接着的下一个字符』而已。</p><p>当所需要下达的命令特别长,或者是输入了一串错误的指令时,你快速的将这串指令<br>整个删除掉,可以使用其他的快速组合键。<br>常见的有底下这些:</p><table><thead><tr><th>组合键</th><th>功能与示范</th></tr></thead><tbody><tr><td>[ctrl]+u/[ctrl]+k</td><td>分别是从光标处向前删除指令串 ([ctrl]+u) 及向后删除指令串 ([ctrl]+k)。</td></tr><tr><td>[ctrl]+a/[ctrl]+e</td><td>分别是让光标移动到整个指令串的最前面 ([ctrl]+a) 或最后面 ([ctrl]+e)。</td></tr></tbody></table><p>在终端机 (tty) 上面登入后, Linux 就会依据 ``/etc/passwd` 文件的设定给我们一个 shell (预设是 bash),然后我们就可以依据上面的指令下达方式来操作 shell。</p><h4 id="shell的变量功能"><a href="#shell的变量功能" class="headerlink" title="shell的变量功能"></a>shell的变量功能</h4><ul><li><p>变量的可变性与方便性</p><p><a href="https://imgchr.com/i/EglPc4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/09/EglPc4.md.png" alt="EglPc4.md.png"></a><br>系统已经帮我们规划好 MAIL 这个变量,所以用户只要知道 mail 这个指令如何<br>使用即可, mail 会主动的取用 MAIL 这个变量,就能够如上图所示的取得自己的邮件信箱(注<br>意大小写,小写的 mail 是指令, 大写的 MAIL 则是变量名称。</p></li><li><p>影响 bash 环境操作的变量</p></li></ul><p><strong><em>在 Linux System 下面,所有的线程都是需要一个执行码</em></strong>, 而就如同上<br>面提到的,你『真正以 shell 来跟 Linux 沟通,是在正确的登入 Linux 之后!』这个时候你就有一<br>个 bash 的执行程序,也才可以真正的经由 bash 来跟系统沟通。而在进入 shell 之前,也正如同上面提到的,由于系统需要一些变量来提供他数据的存取 (或者是一些环境的设定参数值, 例如是<br>否要显示彩色等等的) ,所以就有一些所谓的『环境变量』 需要来读入系统中，这些环境变量例<br>如 PATH、HOME、MAIL、SHELL 等等,都是很重要的, 为了区别与自定义变量的不同,环境变<br>量通常以大写字符来表示。</p><ul><li><p>脚本程序设计 (shell script) 的好帮手</p><h5 id="什么是变量？"><a href="#什么是变量？" class="headerlink" title="什么是变量？"></a>什么是变量？</h5><p>变量就是以一组文字或符号等,来取代一些设定或者是一串保留的数据</p><h5 id="变量的取用与设定：echo，变量设置规则，unset"><a href="#变量的取用与设定：echo，变量设置规则，unset" class="headerlink" title="变量的取用与设定：echo，变量设置规则，unset"></a>变量的取用与设定：echo，变量设置规则，unset</h5><p>变量在被取用时,前面必须要加上『 $ 』才行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> <span class="token variable">$variable</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin$ <span class="token keyword">echo</span> <span class="token variable">${PATH}</span>$ <span class="token keyword">echo</span> <span class="token variable">${HOME}</span> <span class="token comment" spellcheck="true">#显示出您的环境变量 HOME</span>$ <span class="token keyword">echo</span> <span class="token variable">${MAIL}</span> <span class="token comment" spellcheck="true">#显示出您的环境变量 MAIL</span>$ <span class="token keyword">echo</span> <span class="token variable">${myname}</span>     <span class="token comment" spellcheck="true">#没有任何数据～因为这个变量尚未被设定</span>     <span class="token comment" spellcheck="true">#每一种 shell 的语法都不相同~在变量的使用上,bash 在你没有设定的变量中强迫去</span>     <span class="token comment" spellcheck="true">#echo 时,它会显示出空的值。 在其他某些 shell 中,随便去 echo 一个不存在的变</span>     <span class="token comment" spellcheck="true">#量,它是会出现错误讯息</span>$ myname<span class="token operator">=</span>Jason$ <span class="token keyword">echo</span> <span class="token variable">${myname}</span>Jason　<span class="token comment" spellcheck="true">#变量设置完成</span></code></pre><p>变量的设定规则：</p></li><li><p>变量与变量内容以一个等号『=』来连结</p></li><li><p>等号两边不能直接接空格符</p></li><li><p>变量名称只能是英文字母与数字,但是开头字符不能是数字</p></li><li><p>变量内容若有空格符可使用双引号『”』或单引号『’』将变量内容结合起来</p><ul><li>双引号内的特殊字符如 $ 等,可以保有原本的特性</li><li>单引号内的特殊字符则仅为一般字符 (纯文本)</li></ul></li><li><p>可用『 \ 』将特殊符号(如 [Enter], $, , 空格符, ‘等)变成一般字符</p></li><li><p>在一串指令的执行中,还需要藉由其他额外的指令所提供的信息时,可以使用反单引号『<code>命令</code>』或 『$(命令)』</p></li><li><p>若该变量为扩增变量内容时,则可用 “$变量名称” 或 ${变量} 累加内容</p></li><li><p>若该变量需要在其他子程序执行,则需要以 export 来使变量变成环境变量:『export PATH』</p></li><li><p>通常大写字符为系统默认变量,自行设定变量可以使用小写字符,方便判断</p></li><li><p>取消变量的方法为使用 unset :『unset 变量名称』</p><pre class=" language-bash"><code class="language-bash">$ name<span class="token operator">=</span>Jason$ <span class="token keyword">echo</span> <span class="token variable">${name}</span>Jason$ <span class="token function">bash</span>  <span class="token comment" spellcheck="true">#进入到子程序</span>$ <span class="token keyword">echo</span> <span class="token variable">${name}</span>        <span class="token comment" spellcheck="true">#并没有刚刚设定的内容</span>$ <span class="token keyword">exit</span>  <span class="token comment" spellcheck="true">#子程序:离开这个子程序</span>$ <span class="token function">export</span> name$ <span class="token function">bash</span>$ <span class="token keyword">echo</span> <span class="token variable">${name}</span>Jason<span class="token comment" spellcheck="true">#在一般的状态下,父程序的自定义变量是无法在子程序内使用的。但是透过export将变量变成环境变量后,就能够在子程序底下应用了</span>$ <span class="token function">cd</span> /lib/modules/<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -r<span class="token variable">`</span></span>/kernel<span class="token comment" spellcheck="true"># 进入到目前核心的模块目录</span>$ <span class="token function">ls</span> -ld <span class="token variable"><span class="token variable">$(</span><span class="token function">locate</span> <span class="token function">crontab</span><span class="token variable">)</span></span><span class="token comment" spellcheck="true"># 先以 locate 将文件名数据都列出来,再以 ls 指令来处理的意思</span>$ work<span class="token operator">=</span><span class="token string">"/cluster/server/work/taiwan_2015/003/"</span>$ <span class="token function">cd</span> <span class="token variable">$work</span><span class="token comment" spellcheck="true"># 使用其他目录作为我的模式工作目录时,只要变更 work 这个变数</span></code></pre></li></ul><h5 id="环境变量的功能"><a href="#环境变量的功能" class="headerlink" title="环境变量的功能"></a>环境变量的功能</h5><h6 id="用-env-观察环境变量与常见环境变量说明"><a href="#用-env-观察环境变量与常见环境变量说明" class="headerlink" title="用 env 观察环境变量与常见环境变量说明"></a>用 env 观察环境变量与常见环境变量说明</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出目前的 shell 环境下的所有环境变量与其内容</span>$ <span class="token function">env</span>HOSTNAME<span class="token operator">=</span>study.centos.vbird <span class="token comment" spellcheck="true"># 这部主机的主机名</span>TERM<span class="token operator">=</span>xterm <span class="token comment" spellcheck="true"># 这个终端机使用的环境是什么类型</span>SHELL<span class="token operator">=</span>/bin/bash <span class="token comment" spellcheck="true"># 目前这个环境下,使用的 Shell 是哪一个程序?</span>HISTSIZE<span class="token operator">=</span>1000 <span class="token comment" spellcheck="true"># 『记录指令的笔数』在 CentOS 默认可记录 1000 笔</span>OLDPWD<span class="token operator">=</span>/home/dmtsai <span class="token comment" spellcheck="true"># 上一个工作目录的所在</span>LC_ALL<span class="token operator">=</span>en_US.utf8 <span class="token comment" spellcheck="true"># 由于语系的关系,鸟哥偷偷丢上来的一个设定</span>USER<span class="token operator">=</span>dmtsai <span class="token comment" spellcheck="true"># 使用者的名称啊!</span>LS_COLORS<span class="token operator">=</span>rs<span class="token operator">=</span>0:di<span class="token operator">=</span>01<span class="token punctuation">;</span>34:ln<span class="token operator">=</span>01<span class="token punctuation">;</span>36:mh<span class="token operator">=</span>00:pi<span class="token operator">=</span>40<span class="token punctuation">;</span>33:so<span class="token operator">=</span>01<span class="token punctuation">;</span>35:do<span class="token operator">=</span>01<span class="token punctuation">;</span>35:bd<span class="token operator">=</span>40<span class="token punctuation">;</span>33<span class="token punctuation">;</span>01:cd<span class="token operator">=</span>40<span class="token punctuation">;</span>33<span class="token punctuation">;</span>01:or<span class="token operator">=</span>40<span class="token punctuation">;</span>31<span class="token punctuation">;</span>01:mi<span class="token operator">=</span>01<span class="token punctuation">;</span>05<span class="token punctuation">;</span>37<span class="token punctuation">;</span>41:su<span class="token operator">=</span>37<span class="token punctuation">;</span>41:sg<span class="token operator">=</span>30<span class="token punctuation">;</span>43:ca<span class="token operator">=</span>30<span class="token punctuation">;</span>41:tw<span class="token operator">=</span>30<span class="token punctuation">;</span>42:ow<span class="token operator">=</span>34<span class="token punctuation">;</span>42:st<span class="token operator">=</span>37<span class="token punctuation">;</span>44:ex<span class="token operator">=</span>01<span class="token punctuation">;</span>32:*.tar<span class="token operator">=</span>01<span class="token punctuation">..</span>. <span class="token comment" spellcheck="true"># 一些颜色显示</span>MAIL<span class="token operator">=</span>/var/spool/mail/dmtsai <span class="token comment" spellcheck="true"># 这个用户所取用的 mailbox 位置</span>PATH<span class="token operator">=</span>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/binPWD<span class="token operator">=</span>/home/dmtsai <span class="token comment" spellcheck="true"># 目前用户所在的工作目录 (利用 pwd 取出!)</span>LANG<span class="token operator">=</span>zh_TW.UTF-8 <span class="token comment" spellcheck="true"># 这个与语系有关,底下会再介绍!</span>HOME<span class="token operator">=</span>/home/dmtsai <span class="token comment" spellcheck="true"># 这个用户的家目录啊!</span>LOGNAME<span class="token operator">=</span>dmtsai <span class="token comment" spellcheck="true"># 登入者用来登入的账号名称</span>_<span class="token operator">=</span>/usr/bin/env <span class="token comment" spellcheck="true"># 上一次使用的指令的最后一个参数(或指令本身)</span></code></pre><ul><li>HOME：代表用户的家目录。</li><li>SHELL：目前这个环境使用的 SHELL 是哪个程序</li><li>HISTSIZE： 历史记录的『笔数』</li><li>MAIL：使用 mail 这个指令在收信时,系统会去读取的邮件信箱文件 (mailbox)</li><li>PATH:执行文件搜寻的路径</li><li>LANG:语系数据</li><li>RANDOM:可以透过这个随机数文件相关的变量 ($RANDOM) 来随机取得随机数值喔。<br>在 BASH 的环境下,这个 RANDOM 变量的内容,介于 0~32767 之间.<pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">declare</span> -i number<span class="token operator">=</span><span class="token variable">$RANDOM*10</span>/32678<span class="token punctuation">;</span>\<span class="token operator">></span> <span class="token keyword">echo</span> <span class="token variable">${number}</span>2</code></pre><h6 id="用-set-观察所有变量-含环境变量与自定义变量"><a href="#用-set-观察所有变量-含环境变量与自定义变量" class="headerlink" title="用 set 观察所有变量 (含环境变量与自定义变量)"></a>用 set 观察所有变量 (含环境变量与自定义变量)</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">set</span>BASH<span class="token operator">=</span>/bin/bash <span class="token comment" spellcheck="true"># bash 的主程序放置路径</span>BASH_VERSINFO<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"4"</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"2"</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"46"</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"1"</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"release"</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"x86_64-redhat-linux-gnu"</span><span class="token punctuation">)</span>BASH_VERSION<span class="token operator">=</span><span class="token string">'4.2.46(1)-release'</span> <span class="token comment" spellcheck="true"># 这两行是 bash 的版本啊!</span>COLUMNS<span class="token operator">=</span>90 <span class="token comment" spellcheck="true"># 在目前的终端机环境下,使用的字段有几个字符长度</span>HISTFILE<span class="token operator">=</span>/home/dmtsai/.bash_history <span class="token comment" spellcheck="true"># 历史命令记录的放置文件,隐藏档</span>HISTFILESIZE<span class="token operator">=</span>1000 <span class="token comment" spellcheck="true"># 存起来(与上个变量有关)的文件之指令的最大纪录笔数。</span>HISTSIZE<span class="token operator">=</span>1000 <span class="token comment" spellcheck="true"># 目前环境下,内存中记录的历史命令最大笔数。</span>IFS<span class="token operator">=</span>$<span class="token string">' \t\n'</span> <span class="token comment" spellcheck="true"># 预设的分隔符</span>LINES<span class="token operator">=</span>20 <span class="token comment" spellcheck="true"># 目前的终端机下的最大行数</span>MACHTYPE<span class="token operator">=</span>x86_64-redhat-linux-gnu <span class="token comment" spellcheck="true"># 安装的机器类型</span>OSTYPE<span class="token operator">=</span>linux-gnu <span class="token comment" spellcheck="true"># 操作系统的类型!</span>PS1<span class="token operator">=</span><span class="token string">'[\u@\h \W]\$ '</span> <span class="token comment" spellcheck="true"># PS1 就厉害了。这个是命令提示字符,也就是我们常见的[root@www ~] 或 [dmtsai ~]$ 的设定值啦!可以更动的!</span>PS2<span class="token operator">=</span><span class="token string">'> '</span> <span class="token comment" spellcheck="true"># 如果你使用跳脱符号 (\) 第二行以后的提示字符也</span>$ <span class="token comment" spellcheck="true"># 目前这个 shell 所使用的 PID</span>? <span class="token comment" spellcheck="true"># 刚刚执行完指令的回传值。</span></code></pre></li></ul><p><strong><em>基本上,在 Linux 预设的情况中,使用{大写的字母}来设定的变量<br>一般为系统内定需要的变量</em></strong></p><p>比较重要的几个变量：</p><h6 id="PS1-提示字符的设定"><a href="#PS1-提示字符的设定" class="headerlink" title="PS1:(提示字符的设定)"></a>PS1:(提示字符的设定)</h6><p>PS1 就是命令提示字符,每次按下 [Enter] 按键去执行某个指令后,最后要再次出现提示字符时, 就会主动去读取这个变数值了。每个 distributions 的bash 默认的 PS1 变量内容可能有些许的差异.</p><pre class=" language-bash"><code class="language-bash"> \d :可显示出『星期 月 日』的日期格式,如:<span class="token string">"Mon Feb 2"</span> \H :完整的主机名。举例来说,鸟哥的练习机为『study.centos.vbird』 \h :仅取主机名在第一个小数点之前的名字,如鸟哥主机则为『study』后面省略 \t :显示时间,为 24 小时格式的『HH:MM:SS』 \T :显示时间,为 12 小时格式的『HH:MM:SS』 \A :显示时间,为 24 小时格式的『HH:MM』 \@ :显示时间,为 12 小时格式的『am/pm』样式 \u :目前使用者的账号名称,如『dmtsai』 \v :BASH 的版本信息,如鸟哥的测试主机版本为 4.2.46<span class="token punctuation">(</span>1<span class="token punctuation">)</span>-release,仅取『4.2』显示 \w :完整的工作目录名称,由根目录写起的目录名称。但家目录会以 ~ 取代<span class="token punctuation">;</span> \W :利用 <span class="token function">basename</span> 函数取得工作目录名称,所以仅会列出最后一个目录名。 \# :下达的第几个指令。 \$ :提示字符,如果是 root 时,提示字符为 <span class="token comment" spellcheck="true"># ,否则就是 $ 啰~</span></code></pre><h6 id="关于本-shell-的-PID"><a href="#关于本-shell-的-PID" class="headerlink" title="$:(关于本 shell 的 PID)"></a>$:(关于本 shell 的 PID)</h6><p>代表的是『目前这个 Shell 的线程代号』,亦即是所谓的 PID(Process ID)。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> $$ <span class="token comment" spellcheck="true">#shell 的 PID</span></code></pre><h6 id="关于上个执行指令的回传值"><a href="#关于上个执行指令的回传值" class="headerlink" title="?:(关于上个执行指令的回传值)"></a>?:(关于上个执行指令的回传值)</h6><p>? 代表『上一个执行的指令所回传的值』,当我们执行某些指令时, 这些指令都会回传一个执行后的代码。一般来说,如果成功的执行该指令,则会回传一个 0 值，如果执行过程发生错误,就会回传『错误代码』</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> <span class="token variable">$SHELL</span>/bin/bash  <span class="token comment" spellcheck="true">#Linux 预设使用 /bin/bash</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>0          <span class="token comment" spellcheck="true">#因为没问题,所以回传值为 0</span>$ 12name<span class="token operator">=</span>Jaosn12name<span class="token operator">=</span>Jaosn: <span class="token function">command</span> not found <span class="token comment" spellcheck="true">#发生错误，bash 回报有问题</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>127 <span class="token comment" spellcheck="true">#错误代码回传值依据软件而有不同,可以利用这个代码来搜寻错误的原因</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>0</code></pre><ul><li>OSTYPE, HOSTTYPE, MACHTYPE:(主机硬件与核心的等级)</li></ul><h6 id="export-自定义变量转成环境变量"><a href="#export-自定义变量转成环境变量" class="headerlink" title="export: 自定义变量转成环境变量"></a>export: 自定义变量转成环境变量</h6><p><strong><em>子程序仅会继承父程序的环境变量, 子程序不会继承父程序的自定义变量</em></strong>。<br>想要让该变量内容继续的在子程序中使用,那么就请执行:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">export</span> 变量名称<span class="token comment" spellcheck="true"># 分享自己的变量设定给后来呼叫的文件或其他程序</span></code></pre><h5 id="影响显示结果的语系变量（locale）"><a href="#影响显示结果的语系变量（locale）" class="headerlink" title="影响显示结果的语系变量（locale）"></a>影响显示结果的语系变量（locale）</h5><pre class=" language-bash"><code class="language-bash">$ locale -a <span class="token comment" spellcheck="true">#当前系统支持了多少的语系</span>$ localeLANG<span class="token operator">=</span>en_US.UTF-8   <span class="token comment" spellcheck="true">#主语言的环境</span>LANGUAGE<span class="token operator">=</span>LC_CTYPE<span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span> <span class="token comment" spellcheck="true">#字符(文字)辨识的编码</span>LC_NUMERIC<span class="token operator">=</span>zh_CN.UTF-8 <span class="token comment" spellcheck="true">#数字系统的显示讯息</span>LC_TIME<span class="token operator">=</span>zh_CN.UTF-8 <span class="token comment" spellcheck="true">#时间系统的显示数据</span>LC_COLLATE<span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span> <span class="token comment" spellcheck="true">#字符串的比较与排序等</span>LC_MONETARY<span class="token operator">=</span>zh_CN.UTF-8 <span class="token comment" spellcheck="true">#币值格式的显示等</span>LC_MESSAGES<span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span> <span class="token comment" spellcheck="true">#讯息显示的内容,如菜单、错误讯息等</span>LC_PAPER<span class="token operator">=</span>zh_CN.UTF-8LC_NAME<span class="token operator">=</span>zh_CN.UTF-8LC_ADDRESS<span class="token operator">=</span>zh_CN.UTF-8LC_TELEPHONE<span class="token operator">=</span>zh_CN.UTF-8LC_MEASUREMENT<span class="token operator">=</span>zh_CN.UTF-8LC_IDENTIFICATION<span class="token operator">=</span>zh_CN.UTF-8LC_ALL<span class="token operator">=</span> <span class="token comment" spellcheck="true">#整体语系的环境</span></code></pre><p><strong><em>如果其他的语系变量都未设定, 且你有设定 LANG 或者是 LC_ALL 时,则其他的语系变量就会被这两个变量所取代</em></strong></p><h5 id="变量的有效范围"><a href="#变量的有效范围" class="headerlink" title="变量的有效范围"></a>变量的有效范围</h5><ul><li>环境变量=全局变量</li><li>自定义变数=局部变量<br>```bash</li></ul><p>1.当启动一个 shell,操作系统会分配一记忆区块给 shell 使用,此内存内之变量可让子程序取用<br>2.若在父程序利用 export 功能,可以让自定义变量的内容写到上述的记忆区块当中(环境变量);<br>3.当加载另一个 shell 时 (亦即启动子程序,而离开原本的父程序了),子 shell 可以将父<br>  shell 的环境变量所在的记忆区块导入自己的环境变量区块当中。</p><pre><code>这里需要注意的是 ***『环境变量』与『bash 的操作环境』*** 意思不太一样,举例来说, PS1 并不是环境变量。##### 变量键盘读取、数组与宣告read，array，declare+ read  ```bash  $ read [-pt] variable  选项与参数:  -p :后面接提示字符  -t :后面接等待的『秒数』  $ read atest  This is a test  # 此时光标会等待输入  $ echo ${atest}  This is a test # 刚刚输入的数据已经变成一个变量内容  $ read -p &quot;Please keyin your name: &quot; -t 30 named  Please keyin your name: Jason # 提示字符  $ echo ${named}  Jason #输入的数据又变成一个变量的内容了!</code></pre><ul><li><p>array</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">declare</span> -a var$ var<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"sdf"</span>$ var<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"sdfsd"</span>$ <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${var[1]}</span>,<span class="token variable">${var[2]}</span>"</span>sdf,sdfsd+ declare/typeset<span class="token keyword">declare</span> 或 typeset 是一样的功能,就是在『宣告变量的类型』。​```bash$ <span class="token keyword">declare</span> <span class="token punctuation">[</span>-aixr<span class="token punctuation">]</span> variable选项与参数:-a :将后面名为 variable 的变量定义成为数组 <span class="token punctuation">(</span>array<span class="token punctuation">)</span> 类型-i :将后面名为 variable 的变量定义成为整数数字 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 类型-x :用法与 <span class="token function">export</span> 一样,就是将后面的 variable 变成环境变量<span class="token punctuation">;</span>-r :将变量设定成为 <span class="token function">readonly</span> 类型,该变量不可被更改内容,也不能 unset$ sum<span class="token operator">=</span>100+300+50$ <span class="token keyword">echo</span> <span class="token variable">${sum}</span>100+300+50 <span class="token comment" spellcheck="true">#没有计算加总，因为这是文字型态的变量属性</span>$ <span class="token keyword">declare</span> -i sum<span class="token operator">=</span>100+300+50$ <span class="token keyword">echo</span> <span class="token variable">${sum}</span>450$ <span class="token keyword">declare</span> -x <span class="token function">sum</span>$ <span class="token function">export</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">sum</span><span class="token keyword">declare</span> -ix sum<span class="token operator">=</span><span class="token string">"450"</span> <span class="token comment" spellcheck="true">#将 sum 变成环境变量</span>$ <span class="token keyword">declare</span> -r <span class="token function">sum</span>$ sum<span class="token operator">=</span>tesgting-bash: sum: <span class="token function">readonly</span> variable <span class="token comment" spellcheck="true">#sum 变成只读属性,不可更动</span>$ <span class="token keyword">declare</span> +x <span class="token function">sum</span> <span class="token comment" spellcheck="true"># 将 - 变成 + 可以进行『取消』动作</span>$ <span class="token keyword">declare</span> -p <span class="token function">sum</span> <span class="token comment" spellcheck="true">#-p 可以单独列出变量的类型</span><span class="token keyword">declare</span> -ir sum<span class="token operator">=</span><span class="token string">"450"</span> <span class="token comment" spellcheck="true">#只剩下 i, r 的类型,不具有 x</span></code></pre></li></ul><h5 id="与文件系统及程序的限制关系：ulimit"><a href="#与文件系统及程序的限制关系：ulimit" class="headerlink" title="与文件系统及程序的限制关系：ulimit"></a>与文件系统及程序的限制关系：ulimit</h5><p>bash 是可以『限制用户的某些系统资源』的,包括可以开启的文件数量, 可以使用的 CPU 时间,可以使用的内存总量等等。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ulimit</span> <span class="token punctuation">[</span>-SHacdfltu<span class="token punctuation">]</span> <span class="token punctuation">[</span>配额<span class="token punctuation">]</span>选项与参数:-H :hard limit ,严格的设定,必定不能超过这个设定的数值<span class="token punctuation">;</span>-S :soft limit ,警告的设定,可以超过这个设定值,但是若超过则有警告讯息。在设定上,通常 soft 会比 hard 小,举例来说,soft 可设定为 80 而 hard设定为 100,那么你可以使用到 90 <span class="token punctuation">(</span>因为没有超过 100<span class="token punctuation">)</span>,但介于 80~100 之间时,系统会有警告讯息通知你<span class="token operator">!</span>-a :后面不接任何选项与参数,可列出所有的限制额度<span class="token punctuation">;</span>-c :当某些程序发生错误时,系统可能会将该程序在内存中的信息写成文件<span class="token punctuation">(</span>除错用<span class="token punctuation">)</span>,这种文件就被称为核心文件<span class="token punctuation">(</span>core file<span class="token punctuation">)</span>。此为限制每个核心文件的最大容量。-f :此 shell 可以建立的最大文件容量<span class="token punctuation">(</span>一般可能设定为 2GB<span class="token punctuation">)</span>单位为 Kbytes-d :程序可使用的最大断裂内存<span class="token punctuation">(</span>segment<span class="token punctuation">)</span>容量<span class="token punctuation">;</span>-l :可用于锁定 <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> 的内存量-t :可使用的最大 CPU 时间 <span class="token punctuation">(</span>单位为秒<span class="token punctuation">)</span>-u :单一用户可以使用的最大进程<span class="token punctuation">(</span>process<span class="token punctuation">)</span>数量。$ <span class="token function">ulimit</span> -acore <span class="token function">file</span> size          <span class="token punctuation">(</span>blocks, -c<span class="token punctuation">)</span> 0data seg size           <span class="token punctuation">(</span>kbytes, -d<span class="token punctuation">)</span> unlimitedscheduling priority             <span class="token punctuation">(</span>-e<span class="token punctuation">)</span> 0<span class="token function">file</span> size               <span class="token punctuation">(</span>blocks, -f<span class="token punctuation">)</span> unlimitedpending signals                 <span class="token punctuation">(</span>-i<span class="token punctuation">)</span> 62599max locked memory       <span class="token punctuation">(</span>kbytes, -l<span class="token punctuation">)</span> 16384max memory size         <span class="token punctuation">(</span>kbytes, -m<span class="token punctuation">)</span> unlimited<span class="token function">open</span> files                      <span class="token punctuation">(</span>-n<span class="token punctuation">)</span> 1024pipe size            <span class="token punctuation">(</span>512 bytes, -p<span class="token punctuation">)</span> 8POSIX message queues     <span class="token punctuation">(</span>bytes, -q<span class="token punctuation">)</span> 819200real-time priority              <span class="token punctuation">(</span>-r<span class="token punctuation">)</span> 0stack size              <span class="token punctuation">(</span>kbytes, -s<span class="token punctuation">)</span> 8192cpu <span class="token function">time</span>               <span class="token punctuation">(</span>seconds, -t<span class="token punctuation">)</span> unlimitedmax user processes              <span class="token punctuation">(</span>-u<span class="token punctuation">)</span> 62599virtual memory          <span class="token punctuation">(</span>kbytes, -v<span class="token punctuation">)</span> unlimited<span class="token function">file</span> locks                      <span class="token punctuation">(</span>-x<span class="token punctuation">)</span> unlimited$ <span class="token function">ulimit</span> -f 10240 <span class="token comment" spellcheck="true">#限制用户仅能建立 10MBytes 以下的容量的文件</span></code></pre><h5 id="变量内容的删除，取代与替换Optional"><a href="#变量内容的删除，取代与替换Optional" class="headerlink" title="变量内容的删除，取代与替换Optional"></a>变量内容的删除，取代与替换Optional</h5><ul><li><p>变量内容的删除与取代</p><pre class=" language-bash"><code class="language-bash">$ path<span class="token operator">=</span><span class="token variable">${PATH}</span>$ <span class="token keyword">echo</span> <span class="token variable">${path}</span>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin$ <span class="token keyword">echo</span> $<span class="token punctuation">{</span>path<span class="token comment" spellcheck="true">#/*local/bin:} #删除目录</span>$<span class="token punctuation">{</span>variable<span class="token comment" spellcheck="true">#/*local/bin:}</span>上面的特殊字体部分是关键词<span class="token operator">!</span>用在这种删除模式所必须存在的$<span class="token punctuation">{</span>variable<span class="token comment" spellcheck="true">#/*local/bin:}</span>这就是原本的变量名称,以上面范例二来说,这里就填写 path 这个『变量名称』啦<span class="token operator">!</span>$<span class="token punctuation">{</span>variable<span class="token comment" spellcheck="true">#/*local/bin:}</span>这是重点<span class="token operator">!</span>代表『从变量内容的最前面开始向右删除』,且仅删除最短的那个$<span class="token punctuation">{</span>variable<span class="token comment" spellcheck="true">#/*local/bin:}</span>代表要被删除的部分,由于 <span class="token comment" spellcheck="true"># 代表由前面开始删除,所以这里便由开始的 / 写起。</span>需要注意的是,我们还可以透过通配符 * 来取代 0 到无穷多个任意字符$ <span class="token keyword">echo</span> $<span class="token punctuation">{</span>path<span class="token comment" spellcheck="true">##/*:}</span>/home/dmtsai/bin<span class="token comment" spellcheck="true"># 变成 ## 之后『删除掉最长的那个数据』</span>$ <span class="token keyword">echo</span> <span class="token variable">${path%:*bin}</span>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin<span class="token comment" spellcheck="true"># 这个 % 符号代表由最后面开始向前删除!</span>$ <span class="token keyword">echo</span> <span class="token variable">${path%%:*bin}</span>/usr/local/bin<span class="token comment" spellcheck="true"># 同样的, %% 代表的则是最长的符合字符串</span>$ <span class="token keyword">echo</span> <span class="token variable">${path/sbin/SBIN}</span> <span class="token comment" spellcheck="true">#将 path 的变量内容内的 sbin 取代成大写 SBIN</span>$ <span class="token keyword">echo</span> <span class="token variable">${path//sbin/SBIN}</span> <span class="token comment" spellcheck="true">#如果是两条斜线,那么就变成所有符合的内容都会被取代喔</span></code></pre></li></ul><table><thead><tr><th>变量设定方式</th><th>说明</th></tr></thead><tbody><tr><td>${变量#关键词}</td><td>若变量内容从头开始的数据符合『关键词』,则将符合的最短数据删除</td></tr><tr><td>${变量##关键词}</td><td>若变量内容从头开始的数据符合『关键词』,则将符合的最长数据删除</td></tr><tr><td>${变量%关键词}</td><td>若变量内容从尾向前的数据符合『关键词』,则将符合的最短数据删除</td></tr><tr><td>${变量%%关键词}</td><td>若变量内容从尾向前的数据符合『关键词』,则将符合的最长数据删除</td></tr><tr><td>${变量/旧字符串/新字符串}</td><td>若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串</td></tr><tr><td>${变量//旧字符串/新字符串}</td><td>若变量内容符合『旧字取代』若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』</td></tr></tbody></table><ul><li>变量的测试与内容替换<pre class=" language-bash"><code class="language-bash">new_var<span class="token operator">=</span><span class="token variable">${old_var-content}</span>新的变量,主要用来取代旧变量。新旧变量名称其实常常是一样的new_var<span class="token operator">=</span><span class="token variable">${old_var-content}</span>这是本范例中的关键词部分<span class="token operator">!</span>必须要存在的哩<span class="token operator">!</span>new_var<span class="token operator">=</span><span class="token variable">${old_var-content}</span>旧的变量,被测试的项目<span class="token operator">!</span>new_var<span class="token operator">=</span><span class="token variable">${old_var-content}</span>变量的『内容』,在本范例中,这个部分是在『给予未设定变量的内容』</code></pre></li></ul><table><thead><tr><th>变量设定方式</th><th>str 没有设定</th><th>str 为空字符串</th><th>str 已设定非为空字符串</th></tr></thead><tbody><tr><td>var=${str-expr}</td><td>var=expr</td><td>var=</td><td>var=str</td></tr><tr><td>var=${str:-expr}</td><td>var=expr</td><td>var=expr</td><td>var=str</td></tr><tr><td>var=${str+expr}</td><td>var=</td><td>var=expr</td><td>var=expr</td></tr><tr><td>var=${str:+expr}</td><td>var=</td><td>var=</td><td>var=expr</td></tr><tr><td>var=${str=expr}</td><td>str=expr var=expr</td><td>str 不变 var=</td><td>str 不变 var=str</td></tr><tr><td>var=${str:=expr}</td><td>str=expr var=expr</td><td>str=expr var=expr</td><td>str 不变 var=str</td></tr><tr><td>var=${str?expr}</td><td>expr 输出至 stderr</td><td>var=</td><td>var=str</td></tr><tr><td>var=${str:?expr}</td><td>expr 输出至 stderr</td><td>expr 输出至 stderr</td><td>var=str</td></tr></tbody></table><h4 id="变量别名与历史命令"><a href="#变量别名与历史命令" class="headerlink" title="变量别名与历史命令"></a>变量别名与历史命令</h4><h5 id="命令别名设定-alias-unalias"><a href="#命令别名设定-alias-unalias" class="headerlink" title="命令别名设定: alias, unalias"></a>命令别名设定: alias, unalias</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">alias</span> lm<span class="token operator">=</span><span class="token string">'ls -al | more'</span></code></pre><p>alias 的定义规则与变量定义规则几乎相同』, 所以只要在 alias 后面加上{『别名』=’指令 选项…’ }</p><h5 id="历史命令-history"><a href="#历史命令-history" class="headerlink" title="历史命令:history"></a>历史命令:history</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">history</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span>$ <span class="token function">history</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span>$ <span class="token function">history</span> <span class="token punctuation">[</span>-raw<span class="token punctuation">]</span> histfiles选项与参数: n :数字,意思是『要列出最近的 n 笔命令行表』的意思<span class="token operator">!</span>-c :将目前的 shell 中的所有 <span class="token function">history</span> 内容全部消除-a :将目前新增的 <span class="token function">history</span> 指令新增入 histfiles 中,若没有加 histfiles ,则预设写入 ~/.bash_history-r :将 histfiles 的内容读到目前这个 shell 的 <span class="token function">history</span> 记忆中<span class="token punctuation">;</span>-w :将目前的 <span class="token function">history</span> 记忆内容写入 histfiles 中<span class="token operator">!</span>$ <span class="token operator">!</span>number$ <span class="token operator">!</span>command$ <span class="token operator">!</span><span class="token operator">!</span>选项与参数:number:执行第几笔指令的意思<span class="token punctuation">;</span><span class="token function">command</span> :由最近的指令向前搜寻『指令串开头为 command』的那个指令,并执行<span class="token punctuation">;</span><span class="token operator">!</span><span class="token operator">!</span> :就是执行上一个指令<span class="token punctuation">(</span>相当于按↑按键后,按 Enter<span class="token punctuation">)</span></code></pre><ul><li>同一账号同时多次登入的 history 写入问题</li></ul><p>bash 在同时以 root 的身份登入, 因此所有的 bash 都有自己的 1000 笔记录在内存中。因为等到注销时才会更新记录文件,所以啰, 最后注销的那个 bash 才会是最后写入的数据。</p><h4 id="Bash-Shell-的操作环境"><a href="#Bash-Shell-的操作环境" class="headerlink" title="Bash Shell 的操作环境"></a>Bash Shell 的操作环境</h4><h5 id="路径与指令搜寻顺序"><a href="#路径与指令搜寻顺序" class="headerlink" title="路径与指令搜寻顺序"></a>路径与指令搜寻顺序</h5><p>指令运作的顺序可以这样看:</p><pre class=" language-bash"><code class="language-bash">1. 以相对/绝对路径执行指令,例如『 /bin/ls 』或『 ./ls 』<span class="token punctuation">;</span>2. 由 <span class="token function">alias</span> 找到该指令来执行<span class="token punctuation">;</span>3. 由 <span class="token function">bash</span> 内建的 <span class="token punctuation">(</span>builtin<span class="token punctuation">)</span> 指令来执行<span class="token punctuation">;</span>4. 透过 <span class="token variable">$PATH</span> 这个变量的顺序搜寻到的第一个指令来执行。</code></pre><p>/bin/ls 及单纯的 ls 看看,会发现使用 ls 有颜色但是 /bin/ls 则没有颜色。 因为 /bin/ls 是直接取用该指令来下达,而 ls 会因为『 alias ls=’ls –color=auto’ 』这个命令别名而先使用 。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">alias</span> echo<span class="token operator">=</span><span class="token string">'echo -n'</span>$ <span class="token function">type</span> -a <span class="token keyword">echo</span><span class="token keyword">echo</span> is aliased to <span class="token string">'echo -n'</span><span class="token keyword">echo</span> is a shell <span class="token function">builtin</span><span class="token keyword">echo</span> is /usr/bin/echo</code></pre><h5 id="bash-的进站与欢迎讯息-etc-issue-etc-motd"><a href="#bash-的进站与欢迎讯息-etc-issue-etc-motd" class="headerlink" title="bash 的进站与欢迎讯息: /etc/issue, /etc/motd"></a>bash 的进站与欢迎讯息: /etc/issue, /etc/motd</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/issueUbuntu 18.04.1 LTS \n \l</code></pre><table><thead><tr><th>issue 内的各代码意义</th></tr></thead><tbody><tr><td>\d 本地端时间的日期;</td></tr><tr><td>\l  显示第几个终端机接口;</td></tr><tr><td>\m  显示硬件的等级 (i386/i486/i586/i686…);</td></tr><tr><td>\n  显示主机的网络名称;</td></tr><tr><td>\O  显示 domain name;</td></tr><tr><td>\r  操作系统的版本 (相当于 uname -r)</td></tr><tr><td>\t  显示本地端时间的时间;</td></tr><tr><td>\S  操作系统的名称;</td></tr><tr><td>\v  操作系统的版本。</td></tr></tbody></table><p>当我们使用 telnet 连接到主机时,主机的登入画面就会显示 /etc/issue.net 而不是/etc/issue</p><p>要让使用者登入后取得一些讯息,例如您想要让大家都知道的讯息, 那么可以将讯息加入 /etc/motd 里面</p><h5 id="bash-的环境配置文件"><a href="#bash-的环境配置文件" class="headerlink" title="bash 的环境配置文件"></a>bash 的环境配置文件</h5><ul><li>login 与 non-login shell<ul><li>login shell:取得 bash 时需要完整的登入流程的,就称为 login shell。举例来说,你要由 tty1 ~ tty6 登入,需要输入用户的账号与密码,此时取得的 bash 就称为『 login shell 』;</li><li>non-login shell:取得 bash 接口的方法不需要重复登入的举动,举例来说,<ul><li>(1)你以 X window 登入 Linux 后,再以 X 的图形化接口启动终端机,此时那个终端接口并没有需要再次的输入账号与密码,那个 bash 的环境就称为 non-login shell 了。</li><li>(2)你在原本的 bash 环境下再次下达 bash 这个指令,同样的也没有输入账号密码, 那第二个 bash (子程序) 也是 non-login shell 。</li></ul></li></ul></li></ul><p>login shell 其实只会读取这两个配置文件:</p><pre class=" language-bash"><code class="language-bash">1. /etc/profile:这是系统整体的设定,你最好不要修改这个文件<span class="token punctuation">;</span>2. ~/.bash_profile 或 ~/.bash_login 或 ~/.profile:属于使用者个人设定,你要改自的数据,就写入这里<span class="token operator">!</span></code></pre><h6 id="etc-profile-login-shell-才会读"><a href="#etc-profile-login-shell-才会读" class="headerlink" title="/etc/profile (login shell 才会读)"></a>/etc/profile (login shell 才会读)</h6><p><strong><em>每个使用者登入取得 bash 时一定会读取的配置文件</em></strong></p><pre class=" language-bash"><code class="language-bash">PATH:会依据 UID 决定 PATH 变量要不要含有 sbin 的系统指令目录<span class="token punctuation">;</span>MAIL:依据账号设定好使用者的 mailbox 到 /var/spool/mail/账号名<span class="token punctuation">;</span>USER:根据用户的账号设定此一变量内容<span class="token punctuation">;</span>HOSTNAME:依据主机的 <span class="token function">hostname</span> 指令决定此一变量内容<span class="token punctuation">;</span>HISTSIZE:历史命令记录笔数。CentOS 7.x 设定为 1000 <span class="token punctuation">;</span>umask:包括 root 默认为 022 而一般用户为 002 等<span class="token operator">!</span></code></pre><p>/etc/profile 可不止会做这些事而已,他还会去呼叫外部的设定数据：</p><pre class=" language-bash"><code class="language-bash">/etc/profile.d/*sh:只要在 /etc/profile.d/ 这个目录内且扩展名为 .sh ,另外,使用者                   能够具有 r 的权限, 那么该文件就会被 /etc/profile 呼叫进来。在 CentOS 7.x 中,这个目录底                   下的文件规范了 <span class="token function">bash</span> 操作接口的颜色、 语系、ll 与 <span class="token function">ls</span> 指令的命令别名、vi 的命令别名、which                   的命令别名等等/etc/locale.conf:由 /etc/profile.d/lang.sh 呼叫进来的<span class="token operator">!</span>这也是我们决定 <span class="token function">bash</span> 预设使用何种语系的重要配置文件<span class="token operator">!</span>/usr/share/bash-completion/completions/*:命令补齐、档名补齐之外,还可以进行指令的选项/参数                                         补齐功能<span class="token operator">!</span>那就是从这个目录里面找到相对应的指令来处理的<span class="token comment" spellcheck="true"># bash 的 login shell 情况下所读取的整体环境配置文件其实只有 /etc/profile</span></code></pre><h6 id="bash-profile-login-shell-才会读"><a href="#bash-profile-login-shell-才会读" class="headerlink" title="~/.bash_profile (login shell 才会读)"></a>~/.bash_profile (login shell 才会读)</h6><p>login shell 的 bash 环境中,所读取的个人偏好配置文件其实主要有三个,依序分别是:</p><pre class=" language-bash"><code class="language-bash">1. ~/.bash_profile2. ~/.bash_login3. ~/.profile</code></pre><p><strong><em>bash 的 login shell 设定只会读取上面三个文件的其中一个, 而读取的顺序则是依照上面的顺序。</em></strong></p><h6 id="source-读入环境配置文件的指令"><a href="#source-读入环境配置文件的指令" class="headerlink" title="source :读入环境配置文件的指令"></a>source :读入环境配置文件的指令</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">source</span> 配置文件档名范例:将家目录的 ~/.bashrc 的设定读入目前的 <span class="token function">bash</span> 环境中$ <span class="token function">source</span> ~/.bashrc$. ~/.bashrc</code></pre><ul><li>~/.bashrc (non-login shell 会读)</li></ul><p>取得 non-login shell 时,该 bash 配置文件仅会读取 ~/.bashrc</p><h6 id="其他相关配置文件"><a href="#其他相关配置文件" class="headerlink" title="其他相关配置文件"></a>其他相关配置文件</h6><pre class=" language-bash"><code class="language-bash">/etc/man_db.conf：规范了使用 <span class="token function">man</span> 的时候, <span class="token function">man</span> page 的路径到哪里去寻找<span class="token operator">!</span>~/.bash_history~/.bash_logout：当我注销 <span class="token function">bash</span> 后,系统再帮我做完什么动作后才离开</code></pre><p><a href="https://imgchr.com/i/EoltnP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/14/EoltnP.md.png" alt="EoltnP.md.png"></a></p><h5 id="终端机的环境设定-stty-set"><a href="#终端机的环境设定-stty-set" class="headerlink" title="终端机的环境设定: stty, set"></a>终端机的环境设定: stty, set</h5><p>查阅目前的一些按键内容</p><pre class=" language-bash"><code class="language-bash">$ stty <span class="token punctuation">[</span>-a<span class="token punctuation">]</span>选项与参数:-a :将目前所有的 stty 参数列出来<span class="token punctuation">;</span>stty -aspeed 38400 baud<span class="token punctuation">;</span> rows 24<span class="token punctuation">;</span> columns 80<span class="token punctuation">;</span> line <span class="token operator">=</span> 0<span class="token punctuation">;</span>intr <span class="token operator">=</span> ^C<span class="token punctuation">;</span> quit <span class="token operator">=</span> ^\<span class="token punctuation">;</span> erase <span class="token operator">=</span> ^?<span class="token punctuation">;</span> <span class="token function">kill</span> <span class="token operator">=</span> ^U<span class="token punctuation">;</span> eof <span class="token operator">=</span> ^D<span class="token punctuation">;</span> eol <span class="token operator">=</span> <span class="token operator">&lt;</span>undef<span class="token operator">></span><span class="token punctuation">;</span>eol2 <span class="token operator">=</span> <span class="token operator">&lt;</span>undef<span class="token operator">></span><span class="token punctuation">;</span> swtch <span class="token operator">=</span> <span class="token operator">&lt;</span>undef<span class="token operator">></span><span class="token punctuation">;</span> start <span class="token operator">=</span> ^Q<span class="token punctuation">;</span> stop <span class="token operator">=</span> ^S<span class="token punctuation">;</span> susp <span class="token operator">=</span> ^Z<span class="token punctuation">;</span> rprnt <span class="token operator">=</span> ^R<span class="token punctuation">;</span>werase <span class="token operator">=</span> ^W<span class="token punctuation">;</span> lnext <span class="token operator">=</span> ^V<span class="token punctuation">;</span> discard <span class="token operator">=</span> ^O<span class="token punctuation">;</span> min <span class="token operator">=</span> 1<span class="token punctuation">;</span> <span class="token function">time</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>-parenb -parodd -cmspar cs8 -hupcl -cstopb cread -clocal -crtscts-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff-iuclc -ixany -imaxbel iutf8opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0isig icanon iexten <span class="token keyword">echo</span> echoe echok -echonl -noflsh -xcase -tostop -echoprtechoctl echoke -flusho -extproc$ stty erase ^h <span class="token comment" spellcheck="true">#用 [ctrl]+h 来进行字符的删除</span>intr <span class="token keyword">:</span> 送出一个 interrupt <span class="token punctuation">(</span>中断<span class="token punctuation">)</span> 的讯号给目前正在 run 的程序 <span class="token punctuation">(</span>就是终止啰<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>quit <span class="token keyword">:</span> 送出一个 quit 的讯号给目前正在 run 的程序<span class="token punctuation">;</span>erase <span class="token keyword">:</span> 向后删除字符,<span class="token function">kill</span> <span class="token keyword">:</span> 删除在目前指令列上的所有文字<span class="token punctuation">;</span>eof: End of <span class="token function">file</span> 的意思,代表『结束输入』start <span class="token keyword">:</span> 在某个程序停止后,重新启动他的 outputstop <span class="token keyword">:</span> 停止目前屏幕的输出<span class="token punctuation">;</span>susp <span class="token keyword">:</span> 送出一个 terminal stop 的讯号给正在 run 的程序。</code></pre><p>set以设定整个指令输出/输入的环境。 例如记录历史命令、显示错误内容等等。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">set</span> <span class="token punctuation">[</span>-uvCHhmBx<span class="token punctuation">]</span>选项与参数:-u :预设不启用。若启用后,当使用未设定变量时,会显示错误讯息<span class="token punctuation">;</span>-v :预设不启用。若启用后,在讯息被输出前,会先显示讯息的原始内容<span class="token punctuation">;</span>-x :预设不启用。若启用后,在指令被执行前,会显示指令内容<span class="token punctuation">(</span>前面有 ++ 符号<span class="token punctuation">)</span>-h :预设启用。与历史命令有关<span class="token punctuation">;</span>-H :预设启用。与历史命令有关<span class="token punctuation">;</span>-m :预设启用。与工作管理有关<span class="token punctuation">;</span>-B :预设启用。与刮号 <span class="token punctuation">[</span><span class="token punctuation">]</span> 的作用有关<span class="token punctuation">;</span>-C :预设不启用。若使用 <span class="token operator">></span> 等,则若文件存在时,该文件不会被覆盖。$ <span class="token keyword">echo</span> $- <span class="token comment" spellcheck="true">#显示目前所有的 set 设定值</span>himBHs</code></pre><table><thead><tr><th>组合按键</th><th>执行结果</th></tr></thead><tbody><tr><td>Ctrl + C</td><td>终止目前的命令</td></tr><tr><td>Ctrl + D</td><td>输入结束 (EOF),例如邮件结束的时候;</td></tr><tr><td>Ctrl + M</td><td>就是 Enter 啦!</td></tr><tr><td>Ctrl + S</td><td>暂停屏幕的输出</td></tr><tr><td>Ctrl + Q</td><td>恢复屏幕的输出Ctrl + U 在提示字符下,将整列命令删除</td></tr><tr><td>Ctrl + Z</td><td>『暂停』目前的命令</td></tr></tbody></table><h5 id="通配符与特殊符号"><a href="#通配符与特殊符号" class="headerlink" title="通配符与特殊符号"></a>通配符与特殊符号</h5><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>*</td><td>代表『 0 个到无穷多个』任意字符</td></tr><tr><td>?</td><td>代表『一定有一个』任意字符</td></tr><tr><td>[ ]</td><td>同样代表『一定有一个在括号内』的字符(非任意字符)。例如 [abcd] 代表『一定有一个字符, 可能是 a, b,c, d 这四个任何一个』</td></tr><tr><td>[ - ]</td><td>若有减号在中括号内时,代表『在编码顺序内的所有字符』。例如 [0-9] 代表 0 到 9 之间的所有数字,因为数字的语系编码是连续的!</td></tr><tr><td>[^ ]</td><td>若中括号内的第一个字符为指数符号 (^) ,那表示『反向选择』,例如 [^abc] 代表 一定有一个字符,只要是非 a, b, c 的其他字符就接受的意思。</td></tr></tbody></table><table><thead><tr><th>符号</th><th>内容</th></tr></thead><tbody><tr><td>#</td><td>批注符号:这个最常被使用在 script 当中,视为说明!在后的数据均不执行</td></tr><tr><td>\</td><td>跳脱符号:将『特殊字符或通配符』还原成一般字符</td></tr><tr><td>|</td><td>管线 (pipe):分隔两个管线命令的界定(后两节介绍);</td></tr><tr><td>;</td><td>连续指令下达分隔符:连续性命令的界定 (注意!与管线命令并不相同)</td></tr><tr><td>~</td><td>用户的家目录</td></tr><tr><td>$</td><td>取用变数前导符:亦即是变量之前需要加的变量取代值</td></tr><tr><td>&amp;</td><td>工作控制 (job control):将指令变成背景下工作</td></tr><tr><td>!</td><td>逻辑运算意义上的『非』 not 的意思!</td></tr><tr><td>/</td><td>目录符号:路径分隔的符号</td></tr><tr><td>&gt;, &gt;&gt;</td><td>数据流重定向:输出定向,分别是『取代』与『累加』</td></tr><tr><td>&lt;, &lt;&lt;</td><td>数据流重定向:输入定向 (这两个留待下节介绍)</td></tr><tr><td>‘ ‘</td><td>单引号,不具有变量置换的功能 ($ 变为纯文本)</td></tr><tr><td>“ “</td><td>具有变量置换的功能! ($ 可保留相关功能)</td></tr><tr><td><code></code></td><td>两个『 ` 』中间为可以先执行的指令,亦可使用 $( )</td></tr><tr><td>( )</td><td>在中间为子 shell 的起始与结束</td></tr><tr><td>{ }</td><td>在中间为命令区块的组合!</td></tr><tr><td>#### 数据流重定向</td><td></td></tr><tr><td>redirec,据流重导向就是将某个指令执行后应该要出现在屏幕上的数据, 给他传输到其他的地方,</td><td></td></tr><tr><td>例如文件或者是装置 (例如打印机)。</td><td></td></tr><tr><td>##### 什么是数据流重定向</td><td></td></tr><tr><td><a href="https://imgchr.com/i/Eol81A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/14/Eol81A.md.png" alt="Eol81A.md.png"></a></td><td></td></tr><tr><td>###### standard output 与 standard error output</td><td></td></tr></tbody></table><p><strong><em>标准输出指的是『指令执行所回传的正确的讯息』,而标准错误输出可理解为『 指令执行失败后,所回传的错误讯息』</em></strong></p><pre class=" language-bash"><code class="language-bash">$ ll / <span class="token comment" spellcheck="true">#此时屏幕会显示出文件名信息</span>$ ll / <span class="token operator">></span> ~/rootfile <span class="token comment" spellcheck="true">#屏幕并无任何信息</span>$ ll ~/rootfile-rw-r--r-- 1 jason jason 2058 5月  14 16:10 /home/jason/rootfile<span class="token comment" spellcheck="true"># 1. 该文件 (本例中是 ~/rootfile) 若不存在,系统会自动的将他建立起来,但是</span><span class="token comment" spellcheck="true"># 2. 当这个文件存在的时候,那么系统就会先将这个文件内容清空,然后再将数据写入!</span><span class="token comment" spellcheck="true"># 3. 也就是若以 > 输出到一个已存在的文件中,那个文件就会被覆盖掉啰!</span><span class="token comment" spellcheck="true">#那如果我想要将数据累加而不想要将旧的数据删除,那该如何是好?利用两个大于的符号 (>>) 就好</span><span class="token comment" spellcheck="true">#啦!以上面的范例来说,你应该要改成『 ll / >> ~/rootfile 』即可。 如此一来,当 (1) ~/#rootfile 不存在时系统会主动建立这个文件;(2)若该文件已存在, 则数据会在该文件的最下方累加进去!</span><span class="token comment" spellcheck="true"># 1> :以覆盖的方法将『正确的数据』输出到指定的文件或装置上;</span><span class="token comment" spellcheck="true"># 1>>:以累加的方法将『正确的数据』输出到指定的文件或装置上;</span><span class="token comment" spellcheck="true"># 2> :以覆盖的方法将『错误的数据』输出到指定的文件或装置上;</span><span class="token comment" spellcheck="true"># 2>>:以累加的方法将『错误的数据』输出到指定的文件或装置上;</span></code></pre><h6 id="dev-null-垃圾桶黑洞装置与特殊写法"><a href="#dev-null-垃圾桶黑洞装置与特殊写法" class="headerlink" title="/dev/null 垃圾桶黑洞装置与特殊写法"></a>/dev/null 垃圾桶黑洞装置与特殊写法</h6><p>dev/null 可以吃掉任何导向这个装置的信息</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> /home -name .bashrc 2<span class="token operator">></span> /dev/null/home/dmtsai/.bashrc <span class="token comment" spellcheck="true">#只有 stdout 会显示到屏幕上, stderr 被丢弃了</span>$ <span class="token function">find</span> /home -name .bashrc <span class="token operator">></span> list 2<span class="token operator">></span> list <span class="token operator">&lt;=</span><span class="token operator">=</span>错误<span class="token comment" spellcheck="true">#由于两股数据同时写入一个文件,又没有使用特殊的语法, 此时两</span><span class="token comment" spellcheck="true">#股数据可能会交叉写入该文件内,造成次序的错乱。</span>$ <span class="token function">find</span> /home -name .bashrc <span class="token operator">></span> list 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&lt;=</span><span class="token operator">=</span>正确$ <span class="token function">find</span> /home -name .bashrc <span class="token operator">&amp;</span><span class="token operator">></span> list <span class="token operator">&lt;=</span><span class="token operator">=</span>正确<span class="token comment" spellcheck="true"># 将指令的数据全部写入名为 list 的文件中</span></code></pre><h6 id="standard-input-lt-与-lt-lt"><a href="#standard-input-lt-与-lt-lt" class="headerlink" title="standard input : &lt; 与 &lt;&lt;"></a>standard input : &lt; 与 &lt;&lt;</h6><p>将原本需要由键盘输入的数据,改由文件内容来取代</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#利用 cat 指令来建立一个文件的简单流程</span>$ <span class="token function">cat</span> <span class="token operator">></span> catfiletesting<span class="token function">cat</span> <span class="token function">file</span> <span class="token function">test</span><span class="token operator">&lt;=</span><span class="token operator">=</span>这里按下 <span class="token punctuation">[</span>ctrl<span class="token punctuation">]</span>+d 来离开<span class="token comment" spellcheck="true"># 由于加入 > 在 cat 后,所以那个 catfile 会被主动的建立,</span><span class="token comment" spellcheck="true"># 而内容就是刚刚键盘上面输入的那两行数据了</span><span class="token comment" spellcheck="true">#用 stdin 取代键盘的输入以建立新文件的简单流程</span>$ <span class="token function">cat</span> <span class="token operator">></span> catfile <span class="token operator">&lt;</span> ~/.bashrc$ ll catfile ~/.bashrc-rw-r--r-- 1 jason jason 4958 5月  14 16:34 catfile-rw-r--r-- 1 jason jason 4958 5月  14 15:25 /home/jason/.bashrc<span class="token comment" spellcheck="true">#&lt;&lt;代表的是『结束的输入字符』的意思</span>$ <span class="token function">cat</span> <span class="token operator">></span> catfile <span class="token operator">&lt;&lt;</span> <span class="token string">"eof"</span><span class="token operator">></span> This is a test.<span class="token operator">></span> OK now stop<span class="token operator">></span> eof<span class="token operator">&lt;=</span><span class="token operator">=</span>输入这关键词,立刻就结束而不需要输入 <span class="token punctuation">[</span>ctrl<span class="token punctuation">]</span>+d<span class="token punctuation">[</span>dmtsai@study ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> catfileThis is a test.OK now stop<span class="token operator">&lt;=</span><span class="token operator">=</span>只有这两行,不会存在关键词那一行<span class="token operator">!</span></code></pre><h5 id="命令执行的判断依据-amp-amp"><a href="#命令执行的判断依据-amp-amp" class="headerlink" title="命令执行的判断依据: ;  &amp;&amp;  ||"></a>命令执行的判断依据: ;  &amp;&amp;  ||</h5><ul><li>cmd ; cmd (不考虑指令相关性的连续指令下达)<br>在指令与指令中间利用分号 (;) 来隔开,这样一来,分号前的指令执行完后就会立刻接着执行后面的指令了。</li><li>$? (指令回传值) 与 &amp;&amp; 或 ||</li></ul><p>两个指令之间有相依性,而这个相依性主要判断的地方就在于前一个指令执行的结果是否正确。<strong><em>若前一个指令执行的结果为正确,在 Linux 底下会回传一个 $? = 0 的值</em></strong></p><table><thead><tr><th>指令下达情况</th><th>说明</th></tr></thead><tbody><tr><td>cmd1 &amp;&amp; cmd2</td><td>1. 若 cmd1 执行完毕且正确执行($?=0),则开始执行 cmd2。2. 若 cmd1 执行完毕且为错误 ($?≠0),则 cmd2 不执行。</td></tr><tr><td>cmd1 || cmd2</td><td>1. 若 cmd1 执行完毕且正确执行($?=0),则 cmd2 不执行。2. 若 cmd1 执行完毕且为错误 ($?≠0),则开始执行 cmd2。</td></tr></tbody></table><p><strong><em>Linux 底下的指令都是由左往右执行的</em></strong> 由于指令是一个接着一个去执行的,因此,如果真要使用判断,那么这个 &amp;&amp; 与 || 的顺序就不能搞错。</p><h4 id="管线命令pipe"><a href="#管线命令pipe" class="headerlink" title="管线命令pipe"></a>管线命令pipe</h4><p>管线命令『 | 』仅能处理经由前面一个指令传来的正确信息,也就是 standard output 的信息,对于stdandard error 并没有直接处理的能力。<br><a href="https://imgchr.com/i/EollfH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/14/EollfH.md.png" alt="EollfH.md.png"></a></p><pre class=" language-bash"><code class="language-bash">1.管线命令仅会处理 standard output,对于 standard error output 会予以忽略2.管线命令必须要能够接受来自前一个指令的数据成为 standard input 继续处理才行</code></pre><h5 id="选取命令cut，grep"><a href="#选取命令cut，grep" class="headerlink" title="选取命令cut，grep"></a>选取命令cut，grep</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cut</span> -d<span class="token string">'分隔字符'</span> -f fields <span class="token operator">&lt;=</span><span class="token operator">=</span>用于有特定分隔字符$ <span class="token function">cut</span> -c 字符区间 <span class="token operator">&lt;=</span><span class="token operator">=</span>用于排列整齐的讯息选项与参数:-d :后面接分隔字符。与 -f 一起使用<span class="token punctuation">;</span>-f :依据 -d 的分隔字符将一段讯息分区成为数段,用 -f 取出第几段的意思<span class="token punctuation">;</span>-c :以字符 <span class="token punctuation">(</span>characters<span class="token punctuation">)</span> 的单位取出固定字符区间<span class="token punctuation">;</span></code></pre><p>cut 主要的用途在于将『同一行里面的数据进行分解!』</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token punctuation">[</span>-acinv<span class="token punctuation">]</span> <span class="token punctuation">[</span>--color<span class="token operator">=</span>auto<span class="token punctuation">]</span> <span class="token string">'搜寻字符串'</span> filename选项与参数:-a :将 binary 文件以 text 文件的方式搜寻数据-c :计算找到 <span class="token string">'搜寻字符串'</span> 的次数-i :忽略大小写的不同,所以大小写视为相同-n :顺便输出行号-v :反向选择,亦即显示出没有 <span class="token string">'搜寻字符串'</span> 内容的那一行<span class="token operator">!</span>--color<span class="token operator">=</span>auto :可以将找到的关键词部分加上颜色的显示喔<span class="token operator">!</span></code></pre><h5 id="排序命令sort，wc，uniq"><a href="#排序命令sort，wc，uniq" class="headerlink" title="排序命令sort，wc，uniq"></a>排序命令sort，wc，uniq</h5><h6 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sort</span> <span class="token punctuation">[</span>-fbMnrtuk<span class="token punctuation">]</span> <span class="token punctuation">[</span>file or stdin<span class="token punctuation">]</span>选项与参数:-f :忽略大小写的差异,例如 A 与 a 视为编码相同<span class="token punctuation">;</span>-b :忽略最前面的空格符部分<span class="token punctuation">;</span>-M :以月份的名字来排序,例如 JAN, DEC 等等的排序方法<span class="token punctuation">;</span>-n :使用『纯数字』进行排序<span class="token punctuation">(</span>默认是以文字型态来排序的<span class="token punctuation">)</span><span class="token punctuation">;</span>-r :反向排序<span class="token punctuation">;</span>-u :就是 <span class="token function">uniq</span> ,相同的数据中,仅出现一行代表<span class="token punctuation">;</span>-t :分隔符,预设是用 <span class="token punctuation">[</span>tab<span class="token punctuation">]</span> 键来分隔<span class="token punctuation">;</span>-k :以那个区间 <span class="token punctuation">(</span>field<span class="token punctuation">)</span> 来进行排序的意思$ <span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sort</span> -t <span class="token string">':'</span> -k 3root:x:0:0:root:/root:/bin/bashdmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bashalex:x:1001:1002::/home/alex:/bin/basharod:x:1002:1003::/home/arod:/bin/bash$ last <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">' '</span> -f1 <span class="token operator">|</span> <span class="token function">sort</span> <span class="token comment" spellcheck="true">#利用 last ,将输出的数据仅取账号,并加以排序</span></code></pre><h6 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">uniq</span> <span class="token punctuation">[</span>-ic<span class="token punctuation">]</span>选项与参数:-i :忽略大小写字符的不同<span class="token punctuation">;</span>-c :进行计数</code></pre><h6 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wc</span> <span class="token punctuation">[</span>-lwm<span class="token punctuation">]</span>选项与参数:-l :仅列出行<span class="token punctuation">;</span>-w :仅列出多少字<span class="token punctuation">(</span>英文单字<span class="token punctuation">)</span><span class="token punctuation">;</span>-m :多少字符<span class="token punctuation">;</span></code></pre><h5 id="双向重定向tee"><a href="#双向重定向tee" class="headerlink" title="双向重定向tee"></a>双向重定向tee</h5><p>tee 会同时将数据流分送到文件去与屏幕 (screen);而输出到屏幕的,其实就是 stdout ,那就可以让下个指令继续处理<br><a href="https://imgchr.com/i/EotDat" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/14/EotDat.md.png" alt="EotDat.md.png"></a></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tee</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span> <span class="token function">file</span>选项与参数:-a:以累加 <span class="token punctuation">(</span>append<span class="token punctuation">)</span> 的方式,将数据加入 <span class="token function">file</span> 当中<span class="token operator">!</span><span class="token comment" spellcheck="true">##### 字符转换命令tr，col，join，paste，expand</span><span class="token comment" spellcheck="true">###### tr</span><span class="token function">tr</span> 可以用来删除一段讯息当中的文字,或者是进行文字讯息的替换​```bash$ <span class="token function">tr</span> <span class="token punctuation">[</span>-ds<span class="token punctuation">]</span> SET1 <span class="token punctuation">..</span>.选项与参数:-d :删除讯息当中的 SET1 这个字符串<span class="token punctuation">;</span>-s :取代掉重复的字符<span class="token operator">!</span></code></pre><h6 id="col"><a href="#col" class="headerlink" title="col"></a>col</h6><pre class=" language-bash"><code class="language-bash">$ col <span class="token punctuation">[</span>-xb<span class="token punctuation">]</span>选项与参数:-x:将 tab 键转换成对等的空格键</code></pre><h6 id="join"><a href="#join" class="headerlink" title="join"></a>join</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">join</span> <span class="token punctuation">[</span>-ti12<span class="token punctuation">]</span> file1 file2选项与参数:-t:join 默认以空格符分隔数据,并且比对『第一个字段』的数据,如果两个文件相同,则将两笔数据联成一行,且第一个字段放在第一个<span class="token operator">!</span>-i :忽略大小写的差异<span class="token punctuation">;</span>-1 :这个是数字的 1 ,代表『第一个文件要用那个字段来分析』的意思<span class="token punctuation">;</span>-2 :代表『第二个文件要用那个字段来分析』的意思。<span class="token comment" spellcheck="true"># 在使用 join 之前,你所需要处理的文件应该要事先经过排序 (sort) 处理</span></code></pre><h6 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h6><p>将两行贴在一起,且中间以 [tab] 键隔开</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">paste</span> <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> file1 file2选项与参数:-d :后面可以接分隔字符。预设是以 <span class="token punctuation">[</span>tab<span class="token punctuation">]</span> 来分隔的<span class="token operator">!</span>- :如果 <span class="token function">file</span> 部分写成 - ,表示来自 standard input 的资料的意思。</code></pre><h6 id="expand"><a href="#expand" class="headerlink" title="expand"></a>expand</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">expand</span> <span class="token punctuation">[</span>-t<span class="token punctuation">]</span> <span class="token function">file</span>选项与参数:-t:后面可以接数字。一般来说,一个 tab 按键可以用 8 个空格键取代。我们也可以自行定义一个 <span class="token punctuation">[</span>tab<span class="token punctuation">]</span> 按键代表多少个字符呢<span class="token operator">!</span><span class="token comment" spellcheck="true">##### 分区命令split</span>``bash$ <span class="token function">split</span> <span class="token punctuation">[</span>-bl<span class="token punctuation">]</span> <span class="token function">file</span> PREFIX选项与参数:-b :后面可接欲分区成的文件大小,可加单位,例如 b, k, m 等<span class="token punctuation">;</span>-l :以行数来进行分区。PREFIX :代表前导符的意思,可作为分区文件的前导文字。$ <span class="token function">cd</span> /tmp<span class="token punctuation">;</span> <span class="token function">split</span> -b 300k /etc/services services$ <span class="token function">cat</span> services* <span class="token operator">>></span> servicesback <span class="token comment" spellcheck="true">#将上面的三个小文件合成一个文件</span></code></pre><h5 id="参数代换xargs"><a href="#参数代换xargs" class="headerlink" title="参数代换xargs"></a>参数代换xargs</h5><p>在产生某个指令的参数</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">xargs</span> <span class="token punctuation">[</span>-0epn<span class="token punctuation">]</span> <span class="token function">command</span>选项与参数:-0:如果输入的 stdin 含有特殊字符,例如 `, \, 空格键等等字符时,这个 -0 参数可以将他还原成一般字符。这个参数可以用于特殊状态喔<span class="token operator">!</span>-e:这个是 EOF <span class="token punctuation">(</span>end of file<span class="token punctuation">)</span> 的意思。后面可以接一个字符串,当 <span class="token function">xargs</span> 分析到这个字符串时,就会停止继续工作<span class="token operator">!</span>-p :在执行每个指令的 argument 时,都会询问使用者的意思<span class="token punctuation">;</span>-n :后面接次数,每次 <span class="token function">command</span> 指令执行时,要使用几个参数的意思。当 <span class="token function">xargs</span> 后面没有接任何的指令时,默认是以 <span class="token keyword">echo</span> 来进行输出喔<span class="token operator">!</span>$ $ <span class="token function">cut</span> -d <span class="token string">':'</span> -f 1 /etc/passwd <span class="token operator">|</span> <span class="token function">head</span> -n 3 <span class="token operator">|</span> <span class="token function">xargs</span> -n 1 <span class="token function">id</span>uid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> gid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> groups<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span>uid<span class="token operator">=</span>1<span class="token punctuation">(</span>bin<span class="token punctuation">)</span> gid<span class="token operator">=</span>1<span class="token punctuation">(</span>bin<span class="token punctuation">)</span> groups<span class="token operator">=</span>1<span class="token punctuation">(</span>bin<span class="token punctuation">)</span>uid<span class="token operator">=</span>2<span class="token punctuation">(</span>daemon<span class="token punctuation">)</span> gid<span class="token operator">=</span>2<span class="token punctuation">(</span>daemon<span class="token punctuation">)</span> groups<span class="token operator">=</span>2<span class="token punctuation">(</span>daemon<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 透过 -n 来处理,一次给予一个参数</span><span class="token comment" spellcheck="true"># 很多指令其实并不支持管线命令,因此我们可以透过 xargs 来提供该指令引用 standard input 之用</span></code></pre><h5 id="关于减号-的用途"><a href="#关于减号-的用途" class="headerlink" title="关于减号-的用途"></a>关于减号-的用途</h5><p>在管线命令当中,常常会使用到前一个指令的 stdout 作为这次的stdin , 某些指令需要用到文件名 (例如 tar) 来进行处理时,该 stdin 与 stdout 可以利用减号 “-“来替代:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> /tmp/homeback$ <span class="token function">tar</span> -cvf - /home <span class="token operator">|</span> <span class="token function">tar</span> -xvf - -C /tmp/homeback<span class="token comment" spellcheck="true">#将 /home 里面的文件给他打包,但打包的数据不是纪录到文件,而是传送</span><span class="token comment" spellcheck="true">#到 stdout; 经过管线后,将 tar -cvf - /home 传送给后面的 tar -xvf - 』。</span><span class="token comment" spellcheck="true">#后面的这个 - 则是取用前一个指令的 stdout, 因此,我们就不需要使用 filename 了!</span></code></pre><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>由于核心在内存中是受保护的区块,因此我们必须要透过『 Shell 』将我们输入的指令与 Kernel 沟通,好<br>让 Kernel 可以控制硬件来正确无误的工作</li><li>学习 shell 的原因主要有:文字接口的 shell 在各大 distribution 都一样;远程管理时文字接口速度较快;<br>shell 是管理 Linux 系统非常重要的一环,因为 Linux 内很多控制都是以 shell 撰写的。</li><li>系统合法的 shell 均写在 /etc/shells 文件中;</li><li>用户默认登入取得的 shell 记录于 /etc/passwd 的最后一个字段;</li><li>bash 的功能主要有:命令编修能力;命令与文件补全功能;命令别名设定功能;工作控制、前景背景控制;程序化脚本;通配符</li><li>type 可以用来找到执行指令为何种类型,亦可用于与 which 相同的功能;</li><li>变量就是以一组文字或符号等,来取代一些设定或者是一串保留的数据</li><li>变量主要有环境变量与自定义变量,或称为全局变量与局部变量</li><li>使用 env 与 export 可观察环境变量,其中 export 可以将自定义变量转成环境变量;</li><li>set 可以观察目前 bash 环境下的所有变量;</li><li>$? 亦为变量,是前一个指令执行完毕后的回传值。在 Linux 回传值为 0 代表执行成功;</li><li>locale 可用于观察语系资料;</li><li>可用 read 让用户由键盘输入变量的值</li><li>ulimit 可用以限制用户使用系统的资源情况</li><li>bash 的配置文件主要分为 login shell 与 non-login shell。 login shell 主要读取 /etc/profile 与 ~/.bash_profile,non-login shell 则仅读取 ~/.bashrc</li><li>在使用 vim 时,若不小心按了 [crtl]+s 则画面会被冻结。你可以使用 [ctrl]+q 来解除冻结</li><li>通配符主要有: *, ?, [] 等等</li><li>数据流重导向透过 &gt;, 2&gt;, &lt; 之类的符号将输出的信息转到其他文件或装置去;</li><li>连续命令的下达可透过 ; &amp;&amp; || 等符号来处理</li><li>管线命令的重点是:『管线命令仅会处理 standard output,对于 standard error output 会予以忽略』 『管线命令必须要能够接受来自前一个指令的数据成为 standard input 继续处理才行。』</li><li>本章介绍的管线命令主要有:cut, grep, sort, wc, uniq, tee, tr, col, join, paste, expand, split, xargs 等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BASH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(6)-vim程序编辑器</title>
      <link href="/2019/04/23/niao-ge-de-linux-si-fang-cai-6-vim-cheng-xu-bian-ji-qi/"/>
      <url>/2019/04/23/niao-ge-de-linux-si-fang-cai-6-vim-cheng-xu-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#     # ### #     #    ###  #####     ######  #######  #####  #######</span><span class="token comment" spellcheck="true">#     #  #  ##   ##     #  #     #    #     # #       #     #    #</span><span class="token comment" spellcheck="true">#     #  #  # # # #     #  #          #     # #       #          #</span><span class="token comment" spellcheck="true">#     #  #  #  #  #     #   #####     ######  #####    #####     #</span> <span class="token comment" spellcheck="true">#   #   #  #     #     #        #    #     # #             #    #</span>  <span class="token comment" spellcheck="true"># #    #  #     #     #  #     #    #     # #       #     #    #</span>   <span class="token comment" spellcheck="true">#    ### #     #    ###  #####     ######  #######  #####     #</span></code></pre><p>上古神器–vim，功能简单却又强大。是Linux下文本编辑的不二之选(emacs教徒不要打我)逃。</p><h4 id="vi与vim"><a href="#vi与vim" class="headerlink" title="vi与vim"></a>vi与vim</h4><p>vim是vi的高级版本，在vi的基础上添加来许多功能。其实不同的Linux发行版都会附带有很多不同的文本编辑器如emacs，nano，pico，joe等，但是vi还是占有统治地位：</p><ul><li><strong><em>许多UNIX-like系统都会基础集成vi编辑器，但是别的就不一定存在了</em></strong> ，所以vi的学习成本是值得我们付出的</li><li><strong><em>许多软件的编辑接口都会选择vi</em></strong> 这一点的原因同上</li><li><strong><em>vi有语法高亮的功能</em></strong></li><li>程序简单，编辑速度相当快捷</li></ul><h4 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h4><p>vi 有三种模式：命令模式(conmmand mode)，编辑模式(insert mode)，命令行模式(command-line mode).</p><ul><li>命令模式(conmmand mode)<br>使用vi打开一个文件，就直接进入命令模式了,这里可以使用上下左右控制光标，也可以删除整行，删除字符，也可以复制粘贴</li><li>编辑模式(insert mode)<br>在一般命令模式下，按下<code>i，I，o，O，a，A，r，R</code>就可以进入insert mode了，[Esc]可以推出insert mode。</li><li>命令行模式(command-line mode).<br>在一般命令模式下输入[:/?]中任意一个按钮，就可以将光标移动到最下面一行。</li></ul><p>需要注意的是<br><strong><em>命令模式可以与命令行模式和编辑模式互换，但是命令行模式和编辑模式不能互换</em></strong></p><h5 id="简易执行范例"><a href="#简易执行范例" class="headerlink" title="简易执行范例"></a>简易执行范例</h5><ul><li>使用vi进入一般命令模式<pre class=" language-bash"><code class="language-bash">$ /usr/bin/vi .vimrc<span class="token comment" spellcheck="true"># 现在大部分发行版中都默认使用vim替换vi，所以要</span></code></pre></li></ul><h5 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h5><ul><li>第一部份:一般指令模式可用的按钮说明,光标移动、复制贴上、搜寻取代等</li></ul><table><thead><tr><th>移动光标的方法</th><th>效果</th></tr></thead><tbody><tr><td>h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td>使用 “30j” 或 “30↓”,即加上想要进行的次数(数字)后</td><td>向下移动30行g</td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页,相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页,相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行g</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行g</td></tr><tr><td>n&lt;space&gt;</td><td>n 表示『数字』,例如 20 。按下数字后再按空格键,光标会向右移动这一行g的 n个字符。</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』:移动到这一行g的最前面字符处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一行g的最后面字符处(常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行g的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行g的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行g的第一个字符</td></tr><tr><td>G</td><td>移动到这个文件的最后一行g(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个文件的第 n 行g。</td></tr><tr><td>gg</td><td>移动到这个文件的第一行g,相当于 1G 啊! (常用)</td></tr><tr><td>n&lt;Enter&gt;</td><td>n 为数字。光标向下移动 n 行g(常用)</td></tr></tbody></table><table><thead><tr><th>搜寻与取代</th><th>效果</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。(常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表『重复前一个搜寻的动作』。</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反,为『反向』进行前一个搜寻动作。</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行g之间寻找 word1 这个字符串,并将该字符串取代为 word2(常用)</td></tr><tr><td>:1,$s/word1/word2/g</td><td>从第一行g到最后一行g寻找 word1 字符串,并将该字符串取代为 word2(常用)</td></tr><tr><td>:1,$s/word1/word2/gc</td><td>从第一行g到最后一行g寻找 word1 字符串,并将该字符串取代为 word2 !且在取代前显示提示字符给用户确认 (confirm) 是否需要取代!(常用)</td></tr></tbody></table><table><thead><tr><th>删除、复制与贴上</th><th>效果</th></tr></thead><tbody><tr><td>x, X</td><td>在一行g字当中,x 为向后删除一个字符 (相当于 [del] 按键), X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx n</td><td>为数字,连续向后删除 n 个字符。举例来说,我要连续删除 10 个字符, 『10x』 。</td></tr><tr><td>dd</td><td>删除游标所在的那一整行g(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行g,例如 20dd 则是删除 20 行g (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行g的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行g的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处,到该行g的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ,删除游标所在处,到该行g的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行g(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行g,例如 20yy 则是复制 20 行g(常用)</td></tr><tr><td>y1G</td><td>复制光标所在行g到第一行g的所有数据</td></tr><tr><td>yG</td><td>复制光标所在行g到最后一行g的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行g行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行g行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行g贴上,P 则为贴在游标上一行g!</td></tr><tr><td>J</td><td>将光标所在列与下一列的数据结合成同一列</td></tr><tr><td>c</td><td>重复删除多个数据,例如向下删除 10 列,[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作</td></tr><tr><td>.</td><td>意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作,按下小数点『.』就好了! (常用)</td></tr></tbody></table><ul><li>第二部份:一般指令模式切换到编辑模式的可用的按钮说明</li></ul><table><thead><tr><th>进入插入或取代的编辑模式</th><th>效果</th></tr></thead><tbody><tr><td>i 进入插入模式(Insert mode)</td><td>i为『从目前光标所在处插入』(常用)</td></tr><tr><td>I 进入插入模式(Insert mode)</td><td>I为『在目前所在列的第一个非空格符处开始插入』(常用)</td></tr><tr><td>a 进入插入模式(Insert mode)</td><td>a为『从目前光标所在的下一个字符处开始插入』(常用)</td></tr><tr><td>A 进入插入模式(Insert mode)</td><td>A为『从光标所在列的最后一个 字符处开始插入』(常用)</td></tr><tr><td>o 进入插入模式(Insert mode)</td><td>o 为『在目前光标所在的下一列处插入新的一列』(常用)</td></tr><tr><td>O 进入插入模式(Insert mode)</td><td>O 为 在目前光标所在处的上一列插入新的一列(常用)</td></tr><tr><td>r 进入取代模式(Replace mode)</td><td>r 只会取代光标所在的那一个字符一次(常用)</td></tr><tr><td>R 进入取代模式(Replace mode)</td><td>R 会一直取代光标所在的文字,直到按下 ESC 为止;(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式,回到一般指令模式中(常用)</td></tr></tbody></table><ul><li>第三部份:一般指令模式切换到指令列模式的可用按钮说明</li></ul><table><thead><tr><th>指令列模式的储存、离开等指令</th><th>效果</th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘文件中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时,强制写入该文件</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过文件,又不想储存,使用 ! 为强制离开不储存文件。</td></tr><tr><td>:wq</td><td>储存后离开,若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ 这是大写的 Z 喔!若文件没有更动,则不储存离开,若文件已经被更动过,则储存后离开</td><td></td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个文件(类似另存新档)</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中,读入另一个文件的数据。亦即将 『filename』 这个文件内容加到游标所在列后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个文件</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令列模式下执行 command 的显示结果</td></tr></tbody></table><table><thead><tr><th>vim 环境的变更</th><th>效果</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号,设定之后,会在每一列的前缀显示该列的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反,为取消行号!</td></tr></tbody></table><h5 id="vim的缓存，恢复与打开时的警告信息"><a href="#vim的缓存，恢复与打开时的警告信息" class="headerlink" title="vim的缓存，恢复与打开时的警告信息"></a>vim的缓存，恢复与打开时的警告信息</h5><p>当我们在使用 vim 编辑时, vim 会在与被编辑的文件的目录下,再建立一个名为 <code>.filename.swp</code> 的文件。</p><p>For example,我们使用vim打开一个已经存在的文件。</p><pre class=" language-bash"><code class="language-bash">$ vim config.json<span class="token comment" spellcheck="true"># 此时会进入到 vim 的画面,请在 vim 的命令模式下按下『 [ctrl]-z 』的组合键</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>+  Stopped                 vim config.json$ <span class="token function">ls</span> -alh <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"config"</span>-rw-r--r--  1 jason jason  767 4月  16 13:43 config.json-rw-r--r--  1 jason jason  12K 5月   6 08:39 .config.json.swp <span class="token operator">&lt;=</span><span class="token operator">=</span>暂存文件<span class="token comment" spellcheck="true"># 按下『 [ctrl]-z 』vim在后台中继续执行，我们可以模拟一种更极端的情况，断电</span>$ <span class="token function">kill</span> -9 %1<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+  Stopped                 vim -u ~/.defaultvim config.json$ <span class="token function">ls</span> -alh <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"config"</span>-rw-r--r--  1 jason jason  767 4月  16 13:43 config.json-rw-r--r--  1 jason jason  12K 5月   6 08:39 .config.json.swp <span class="token operator">&lt;=</span><span class="token operator">=</span>暂存文件依然存在<span class="token comment" spellcheck="true"># 由于 vim 的工作被不正</span><span class="token comment" spellcheck="true"># 常的中断,导致暂存盘无法藉由正常流程来结束,</span><span class="token comment" spellcheck="true"># 所以暂存档就不会消失,而继续保留下来。</span>$ vim -u ~/.defaultvim config.jsonE325: ATTENTIONFound a swap <span class="token function">file</span> by the name <span class="token string">".config.json.swp"</span>          owned by: jason   dated: Mon May  6 08:39:13 2019         <span class="token function">file</span> name: ~jason/v2ray-linux-64/config.json <span class="token operator">&lt;=</span><span class="token operator">=</span>这个暂存文件属于哪个实际的文件          modified: no         user name: jason   host name: jason-ThinkPad-X1-Carbon-6th        process ID: 6350While opening <span class="token function">file</span> <span class="token string">"config.json"</span>             dated: Tue Apr 16 13:43:18 2019<span class="token punctuation">(</span>1<span class="token punctuation">)</span> Another program may be editing the same file.  If this is the case,    be careful not to end up with two different instances of the same    <span class="token function">file</span> when making changes.  Quit, or <span class="token keyword">continue</span> with caution.<span class="token punctuation">(</span>2<span class="token punctuation">)</span> An edit session <span class="token keyword">for</span> this <span class="token function">file</span> crashed.    If this is the case, use <span class="token string">":recover"</span> or <span class="token string">"vim -r config.json"</span>    to recover the changes <span class="token punctuation">(</span>see <span class="token string">":help recovery"</span><span class="token punctuation">)</span>.    If you did this already, delete the swap <span class="token function">file</span> <span class="token string">".config.json.swp"</span>    to avoid this message.<span class="token comment" spellcheck="true"># 问题一:可能有其他人或程序同时在编辑这个文件:</span><span class="token comment" spellcheck="true"># 由于 Linux 是多人多任务的环境,因此很可能有很多人同时在编辑同一个文件。</span><span class="token comment" spellcheck="true"># 如果在多人共同编辑的情况下, 万一大家同时储存,那么这个文件的内容将会变的乱七八糟!</span><span class="token comment" spellcheck="true"># 为了避免这个问题,因此 vim 会出现这个警告窗口解决的方法则是:</span><span class="token comment" spellcheck="true">#　１．找到另外那个程序或人员,请他将该 vim 的工作结束,然后你再继续处理。</span><span class="token comment" spellcheck="true">#　２．如果你只是要看该文件的内容并不会有任何修改编辑的行为,那么可以选择开启成为只读(O)文件,</span><span class="token comment" spellcheck="true">#　亦即上述画面反白部分输入英文『 o 』即可,其实就是 [O]pen Read-Only 的选项啦!</span><span class="token comment" spellcheck="true">#　问题二:在前一个 vim 的环境中,可能因为某些不知名原因导致 vim 中断 (crashed):</span><span class="token comment" spellcheck="true"># 如果你之前的 vim 处理动作尚未储存,此时你应该要按下『R』</span><span class="token comment" spellcheck="true"># ,亦即使用 (R)ecover 的项目，离开 vim 后</span><span class="token comment" spellcheck="true"># 还得要自行删除 .man_db.conf.swp 才能避免每次打开这个文件都会出现这样的警告!</span>Swap <span class="token function">file</span> <span class="token string">".config.json.swp"</span> already exists<span class="token operator">!</span><span class="token punctuation">[</span>O<span class="token punctuation">]</span>pen Read-Only, <span class="token punctuation">(</span>E<span class="token punctuation">)</span>dit anyway, <span class="token punctuation">(</span>R<span class="token punctuation">)</span>ecover, <span class="token punctuation">(</span>D<span class="token punctuation">)</span>elete it, <span class="token punctuation">(</span>Q<span class="token punctuation">)</span>uit, <span class="token punctuation">(</span>A<span class="token punctuation">)</span>bort:<span class="token comment" spellcheck="true"># [O]pen Read-Only:打开此文件成为只读档, 可以用在你只是想要查阅该文件内容并不想要进行编辑行为时。</span><span class="token comment" spellcheck="true"># (E)dit anyway:还是用正常的方式打开你要编辑的那个文件, 并不会载入暂存盘的内容。不过很容易出现两个使用者互相改变对方的文件等问题!</span><span class="token comment" spellcheck="true"># (R)ecover:就是加载暂存盘的内容,用在你要救回之前未储存的工作。不过当你救回来并且储存离开 vim后,还是要手动自行删除那个暂存档喔!</span><span class="token comment" spellcheck="true"># (D)elete it:你确定那个暂存档是无用的!那么开启文件前会先将这个暂存盘删除! 这个动作其实是比较常</span><span class="token comment" spellcheck="true"># (Q)uit:按下 q 就离开 vim ,不会进行任何动作回到命令提示字符。</span><span class="token comment" spellcheck="true"># (A)bort:忽略这个编辑行为,感觉上与 quit 非常类似! 也会送你回到命令提示字符!</span></code></pre><h4 id="vim的额外功能"><a href="#vim的额外功能" class="headerlink" title="vim的额外功能"></a>vim的额外功能</h4><h5 id="可视区块"><a href="#可视区块" class="headerlink" title="可视区块"></a>可视区块</h5><p>区块选择(Visual Block),当我们按下 v 或者 V 或者 [Ctrl]+v 时, 这个时候光标移动过的地方就会开始反白,这三个按键的意义分别是:</p><table><thead><tr><th>区块选择的按键</th><th>意义</th></tr></thead><tbody><tr><td>v</td><td>字符选择,会将光标经过的地方反白选择!</td></tr><tr><td>V</td><td>列选择,会将光标经过的列反白选择!</td></tr><tr><td>[Ctrl]+v</td><td>区块选择,可以用长方形的方式选择资料</td></tr><tr><td>y</td><td>将反白的地方复制起来</td></tr><tr><td>d</td><td>将反白的地方删除掉</td></tr><tr><td>p</td><td>将刚刚复制的区块,在游标所在处贴上!</td></tr></tbody></table><h5 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h5><table><thead><tr><th>多文件编辑的按键</th><th>意义</th></tr></thead><tbody><tr><td>:n</td><td>编辑下一个文件</td></tr><tr><td>:N</td><td>编辑上一个文件</td></tr><tr><td>:files</td><td>列出目前这个 vim 的开启的所有文件</td></tr><tr><td>##### 多窗口功能</td><td></td></tr></tbody></table><table><thead><tr><th>多窗口情况下的按键</th><th>功能</th></tr></thead><tbody><tr><td>:sp [filename]</td><td>开启一个新窗口,如果有加 filename, 表示在新窗口开启一个新文件,否则表示两个窗口为同一个文件内容(同步显示)。</td></tr><tr><td>[ctrl]+w+j,[ctrl]+w+↓</td><td>光标可移动到下方的窗口</td></tr><tr><td>[ctrl]+w+k,[ctrl]+w+↑</td><td>光标移动到上面的窗口</td></tr><tr><td>[ctrl]+w+q</td><td>其实就是 :q 结束离开啦!</td></tr></tbody></table><h5 id="vim的关键词补全功能"><a href="#vim的关键词补全功能" class="headerlink" title="vim的关键词补全功能"></a>vim的关键词补全功能</h5><table><thead><tr><th>组合按钮</th><th>补齐的内容</th></tr></thead><tbody><tr><td>[ctrl]+x -&gt; [ctrl]+n</td><td>透过目前正在编辑的这个『文件的内容文字』作为关键词,予以补齐</td></tr><tr><td>[ctrl]+x -&gt; [ctrl]+f</td><td>以当前目录内的『文件名』作为关键词,予以补齐</td></tr><tr><td>[ctrl]+x -&gt; [ctrl]+o</td><td>以扩展名作为语法补充,以 vim 内建的关键词,予以补齐</td></tr></tbody></table><h5 id="vim环境设置与记录：-vimrc和-viminfo"><a href="#vim环境设置与记录：-vimrc和-viminfo" class="headerlink" title="vim环境设置与记录：/.vimrc和/.viminfo"></a>vim环境设置与记录：<del>/.vimrc和</del>/.viminfo</h5><p>vim 会主动的将你曾经做过的行为登录下来,那个记录动作的文件就是: <code>~/.viminfo</code></p><table><thead><tr><th>vim 的环境设定参数</th><th>效果</th></tr></thead><tbody><tr><td>:set nu :set nonu</td><td>就是设定与取消行号</td></tr><tr><td>:set hlsearch :set nohlsearch</td><td>hlsearch 就是 high light search(高亮度搜寻)</td></tr><tr><td>:set autoindent :set noautoindent</td><td>是否自动缩排?autoindent 就是自动缩排。</td></tr><tr><td>:set backup</td><td>是否自动储存备份档?</td></tr><tr><td>:set ruler</td><td>显示或不显示右下角的一些状态栏说明</td></tr><tr><td>:set showmode</td><td>这个则是,是否要显示 –INSERT– 之类的字眼在左下角的状态栏。</td></tr><tr><td>:set backspace=(012)</td><td>当 backspace 为 2 时,就是可以删除任意值;0 或 1 时,仅可删除刚刚输入的字符, 而无法删除原本就已经存在的文字</td></tr><tr><td>:set all</td><td>显示目前所有的环境参数设定值</td></tr><tr><td>:set</td><td>显示与系统默认值不同的设定参数, 一般来说就是你有自行变动过的设定参数啦!</td></tr><tr><td>:syntax on :syntax off</td><td>是否依据程序相关语法显示不同颜色?</td></tr><tr><td>:set bg=dark :set bg=light</td><td>可用以显示不同的颜色色调,预设是『 light 』。</td></tr></tbody></table><h5 id="vim常用命令示意图"><a href="#vim常用命令示意图" class="headerlink" title="vim常用命令示意图"></a>vim常用命令示意图</h5><p><img src="https://s2.ax1x.com/2019/05/06/EB5Dbt.jpg" alt="EB5Dbt.jpg"></p><h4 id="其他vim使用注意事项"><a href="#其他vim使用注意事项" class="headerlink" title="其他vim使用注意事项"></a>其他vim使用注意事项</h4><h5 id="中文编码的问题-q"><a href="#中文编码的问题-q" class="headerlink" title="中文编码的问题:q"></a>中文编码的问题:q</h5><pre class=" language-bash"><code class="language-bash">1. 你的 Linux 系统默认支持的语系数据:这与 /etc/locale.conf 有关<span class="token punctuation">;</span>2. 你的终端界面 <span class="token punctuation">(</span>bash<span class="token punctuation">)</span> 的语系: 这与 LANG, LC_ALL 这几个变数有关<span class="token punctuation">;</span>3. 你的文件原本的编码<span class="token punctuation">;</span>4. 开启终端机的软件,例如在 GNOME 底下的窗口接口。</code></pre><p>解决</p><pre class=" language-bash"><code class="language-bash">$ LANG<span class="token operator">=</span>zh_CN.gb18030$ <span class="token function">export</span> LC_ALL<span class="token operator">=</span>zh_CN.gb18030</code></pre><h5 id="DOS与Linux的换行符"><a href="#DOS与Linux的换行符" class="headerlink" title="DOS与Linux的换行符"></a>DOS与Linux的换行符</h5><p>DOS 与 Linux 断行字符的不同。<code>DOS</code> 使用的断行字符为 <code>^M$</code> ,我们称为 <code>CR</code> 与 <code>LF</code> 两个符号。 而在 Linux 底下,则是仅有 <code>LF ($)</code> 这个断行符号。</p><p>Linux 底下的指令在开始执行时,他的判断依据是 『Enter』,而 Linux 的 Enter 为<code>LF</code> 符号, 不过,由于 <code>DOS</code> 的断行符号是 <code>CRLF</code> ,也就是多了一个 <code>^M</code> 的符号出来, 在这样的<br>情况下,如果是一个 <code>shell script</code> 的程序文件,将可能造成『程序无法执行』的状态。</p><pre class=" language-bash"><code class="language-bash">$ dos2unix <span class="token punctuation">[</span>-kn<span class="token punctuation">]</span> <span class="token function">file</span> <span class="token punctuation">[</span>newfile<span class="token punctuation">]</span>$ unix2dos <span class="token punctuation">[</span>-kn<span class="token punctuation">]</span> <span class="token function">file</span> <span class="token punctuation">[</span>newfile<span class="token punctuation">]</span>选项与参数:-k :保留该文件原本的 mtime 时间格式 <span class="token punctuation">(</span>不更新文件上次内容经过修订的时间<span class="token punctuation">)</span>-n :保留原本的旧档,将转换后的内容输出到新文件,如: dos2unix -n old new范例一:将 /etc/man_db.conf 重新复制到 /tmp/vitest/ 底下,并将其修改成为 dos 断行$ <span class="token function">cd</span> /tmp/vitest$ <span class="token function">cp</span> -a /etc/man_db.conf <span class="token keyword">.</span>$ ll man_db.conf-rw-r--r--. 1 root root 5171 Jun 102014 man_db.conf$ unix2dos -k man_db.confunix2dos: converting <span class="token function">file</span> man_db.conf to DOS <span class="token function">format</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 屏幕会显示上述的讯息,说明断行转为 DOS 格式了!</span>$ ll man_db.conf-rw-r--r--. 1 dmtsai dmtsai 5302 Jun 102014 man_db.conf<span class="token comment" spellcheck="true"># 断行字符多了 ^M ,所以容量增加了!</span>范例二:将上述的 man_db.conf 转成 Linux 断行字符,并保留旧文件,新档放于 man_db.conf.linux$ dos2unix -k -n man_db.conf man_db.conf.linuxdos2unix: converting <span class="token function">file</span> man_db.conf to <span class="token function">file</span> man_db.conf.linux <span class="token keyword">in</span> Unix <span class="token function">format</span> <span class="token punctuation">..</span>.$ ll man_db.conf*-rw-r--r--. 1 dmtsai dmtsai 5302 Jun 10 2014 man_db.conf-rw-r--r--. 1 dmtsai dmtsai 5171 Jun 10 2014 man_db.conf.linux$ <span class="token function">file</span> man_db.conf*man_db.conf:<span class="token punctuation">[</span>dmtsai@study vitest<span class="token punctuation">]</span>ASCII text, with CRLF line terminators<span class="token comment" spellcheck="true"># 很清楚说明是 CRLF 断行!</span>man_db.conf.linux: ASCII text</code></pre><h5 id="语系编码转换"><a href="#语系编码转换" class="headerlink" title="语系编码转换"></a>语系编码转换</h5><p>使用<code>iconv</code>命令可以快捷的完成文件编码的转换</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">iconv</span> --listThe following list contains all the coded character sets known.  This doesnot necessarily mean that all combinations of these names can be used <span class="token keyword">for</span>the FROM and TO <span class="token function">command</span> line parameters.  One coded character <span class="token keyword">set</span> can belisted with several different names <span class="token punctuation">(</span>aliases<span class="token punctuation">)</span>.  437, 500, 500V1, 850, 851, 852, 855, 856, 857, 858, 860, 861, 862, 863, 864,  865, 866, 866NAV, 869, 874, 904, 1026, 1046, 1047, 8859_1, 8859_2, 8859_3,  8859_4, 8859_5, 8859_6, 8859_7, 8859_8, 8859_9, 10646-1:1993,  10646-1:1993/UCS4, ANSI_X3.4-1968, ANSI_X3.4-1986, ANSI_X3.4,<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.$ <span class="token function">iconv</span> -f 原本编码 -t 新编码 filename <span class="token punctuation">[</span>-o newfile<span class="token punctuation">]</span>选项与参数:--list :列出 <span class="token function">iconv</span> 支持的语系数据-f :from ,亦即来源之意,后接原本的编码格式<span class="token punctuation">;</span>-t :to ,亦即后来的新编码要是什么格式<span class="token punctuation">;</span> -o file:如果要保留原本的文件,那么使用 -o 新档名,可以建立新编码文件。</code></pre><p>不过如果是要将正体中文的 utf8 转成简体中文的 utf8 编码时,那就得费些功夫了! 举例来说,如<br>果要将刚刚那个 vi.utf8 转成简体的 utf8 时,可以这样做:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">iconv</span> -f utf8 -t big5 vi.utf8 <span class="token operator">|</span> \<span class="token operator">></span> <span class="token function">iconv</span> -f big5 -t gb2312 <span class="token operator">|</span> <span class="token function">iconv</span> -f gb2312 -t utf8 -o vi.gb.utf8</code></pre><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>Linux 底下的配置文件多为文本文件,故使用 vim 即可进行设定编辑;</li><li>vim 可视为程序编辑器,可用以编辑 shell script, 配置文件等,避免打错字;</li><li>vi 为所有 unix like 的操作系统都会存在的编辑器,且执行速度快速;</li><li>vi 有三种模式,一般指令模式可变换到编辑与指令列模式,但编辑模式与指令列模式不能互换;</li><li>常用的按键有 i, [Esc], :wq 等;</li><li>vi 的画面大略可分为两部份,(1)上半部的本文与(2)最后一行的状态+指令列模式;</li><li>数字是有意义的,用来说明重复进行几次动作的意思,如 5yy 为复制 5 列之意;</li><li>光标的移动中,大写的 G 经常使用,尤其是 1G, G 移动到文章的头/尾功能!</li><li>vi 的取代功能也很棒! :n1,n2s/old/new/g 要特别注意学习起来;</li><li>小数点『 . 』为重复进行前一次动作,也是经常使用的按键功能!</li><li>进入编辑模式几乎只要记住: i, o, R 三个按钮即可!尤其是新增一列的 o 与取代的 R</li><li>vim 会主动的建立 swap 暂存档,所以不要随意断线!</li><li>如果在文章内有对齐的区块,可以使用 [ctrl]-v 进行复制/贴上/删除的行为</li><li>使用 :sp 功能可以分区窗口</li><li>若使用 vim 来撰写网页,若需要 CSS 元素数据,可透过 [crtl]+x, [crtl]+o 这两个连续组合按键来取得关键词</li><li>vim 的环境设定可以写入在 ~/.vimrc 文件中;</li><li>可以使用 iconv 进行文件语系编码的转换</li><li>使用 dos2unix 及 unix2dos 可以变更文件每一列的行尾断行字符。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始打造你自己的编译器</title>
      <link href="/2019/04/22/cong-ling-kai-shi-da-zao-ni-zi-ji-de-bian-yi-qi/"/>
      <url>/2019/04/22/cong-ling-kai-shi-da-zao-ni-zi-ji-de-bian-yi-qi/</url>
      
        <content type="html"><![CDATA[<p>构造一个自己的编译器，看似是一个需要非常多的programming的事情，但是实际上借助现代的工具，构造一个编译器并不是我们想象中的那么困难。<br>当然你也可以追求手撕编译器的极致体验，这当然很好，但是重复造轮子对于初学者从宏观和大局上理解编译器的架构的作用并不大，现代的分析器生成工具，可以让我们把精力集中在重要的部分，而且bug的调试也较为简单。</p><p>先简单介绍一下我们将要使用的工具集：</p><pre class=" language-c"><code class="language-c">flex：基于lex 的词法分析器的生成器bison：基于yacc语法分析器的生成器LLVM<span class="token punctuation">:</span></code></pre><p>再来简单介绍一下编译器的各个流程：<br><img src="https://s2.ax1x.com/2019/04/22/EkYv9g.png" alt="EkYv9g.png"></p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
            <tag> 编译器 </tag>
            
            <tag> yacc </tag>
            
            <tag> bison </tag>
            
            <tag> Lex </tag>
            
            <tag> flex </tag>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(5)-文件与文件系统的压缩</title>
      <link href="/2019/04/18/niao-ge-de-linux-si-fang-cai-5-wen-jian-yu-wen-jian-xi-tong-de-ya-suo/"/>
      <url>/2019/04/18/niao-ge-de-linux-si-fang-cai-5-wen-jian-yu-wen-jian-xi-tong-de-ya-suo/</url>
      
        <content type="html"><![CDATA[<p>Linux下一切都是文件，所以其实不同压缩文件的的文件扩展名对于Linux来说并没有什么区别，但是可以方便系统的操作这也就是方便人类阅读和管理。</p><h4 id="压缩文件的用途与技术"><a href="#压缩文件的用途与技术" class="headerlink" title="压缩文件的用途与技术"></a>压缩文件的用途与技术</h4><p>我们知道一个字节有8个bit，假设一个数字只有最右侧的bit为1，剩下的位都为0，这样就有可以压缩的地方，我们可以将剩下的7个0丢出去。这样就完成了压缩的目的，减小了文件的容量。还有一种可能是文件中有连续的100个1，我们可以将其压缩尾『100个1』而不是真的记录100个1。</p><p><strong><em>压缩后文件与压缩前文件的比值就称为压缩比</em></strong></p><h4 id="Linux系统常见的压缩命令"><a href="#Linux系统常见的压缩命令" class="headerlink" title="Linux系统常见的压缩命令"></a>Linux系统常见的压缩命令</h4><p>通过不同压缩文件的扩展名，我们可以知道文件的压缩方式，并选择合适的文件解压缩方式。</p><p>Linux下的压缩文件扩展名一般有：</p><pre class=" language-bash"><code class="language-bash">*.Z        compress压缩文件，现在基本没有了*.zip      zip程序压缩的文件*.gz       gzip程序压缩的文件*.bz2      bzip2程序压缩的文件*.xz       xz程序压缩的文件*.tar      tar程序打包的文件*.tar.gz   tar程序打包的文件，并经过gzip的压缩*.tar.bz2  tar程序打包的文件，并经过bzip2的压缩*.tar.xz   tar程序打包的文件，并经过xz的压缩</code></pre><h5 id="gzip，zcat-zmore-zless-zgrep"><a href="#gzip，zcat-zmore-zless-zgrep" class="headerlink" title="gzip，zcat/zmore/zless/zgrep"></a>gzip，zcat/zmore/zless/zgrep</h5><p>下面用内核文件演示一下过程</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">gzip</span> <span class="token punctuation">[</span>-cdtv<span class="token comment" spellcheck="true">#] 文件名</span>$ zcat 文件名.gz选项与参数: -c <span class="token keyword">:</span> 将压缩的数据输出到屏幕上，可以通过数据流重定向来处理 -d <span class="token keyword">:</span> 解压缩 -t <span class="token keyword">:</span> 检验一个压缩文件的一致性，尾呢见有无错误 -v <span class="token keyword">:</span> 显示出压缩比 -<span class="token comment" spellcheck="true"># : # 为数字的意思1-9，-1最快但是压缩比最差，默认是-6</span>$ <span class="token function">gzip</span> -v vmlinuz-4.15.0-46-genericvmlinuz-4.15.0-46-generic:      4.4% -- replaced with vmlinuz-4.15.0-46-generic.gz$ zat/zmore/zless 文本文件<span class="token comment" spellcheck="true"># 如果原来的文件是文本文件，这三个命令可以将压缩文件中的内容读出来</span>$ <span class="token function">gzip</span> -d services.gz<span class="token comment" spellcheck="true"># 与windows不同的是，Linux解压和压缩都会将源文件删除，只保留操作后的文件</span>$ <span class="token function">gzip</span> -9 -c services <span class="token operator">></span> services.gz<span class="token comment" spellcheck="true"># 这样就可以保留原有的文件</span><span class="token comment" spellcheck="true"># -c负责将压缩的文件内容输出大屏幕上，但是通过>我们可以将内容输入到文件里</span>$ zgrep -n <span class="token string">"http"</span> services.gz <span class="token comment" spellcheck="true">#这样可以查询压缩文件中的关键词</span>7:<span class="token comment" spellcheck="true"># Updated from http://www.iana.org/assignments/port-numbers and other</span>8:<span class="token comment" spellcheck="true"># sources like http://www.freebsd.org/cgi/cvsweb.cgi/src/etc/services .</span>53:http        80/tcp        www        <span class="token comment" spellcheck="true"># WorldWideWeb HTTP</span>138:https        443/tcp                <span class="token comment" spellcheck="true"># http protocol over TLS/SSL</span>419:http-alt    8080/tcp    webcache    <span class="token comment" spellcheck="true"># WWW caching service</span>420:http-alt    8080/udp$ znew 文件<span class="token comment" spellcheck="true"># 将老的*.Z文件转换为gzip文件</span></code></pre><h5 id="bzip2，bzcat-bzmore-bzless-bzgrep"><a href="#bzip2，bzcat-bzmore-bzless-bzgrep" class="headerlink" title="bzip2，bzcat/bzmore/bzless/bzgrep"></a>bzip2，bzcat/bzmore/bzless/bzgrep</h5><p>bzip2可以获得比gzip更好的压缩比</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">bzip2</span> <span class="token punctuation">[</span>-cdkzv<span class="token comment" spellcheck="true">#] 文件名</span>$ bcat 文件名.bz2选项与参数:-c <span class="token keyword">:</span> 将压缩的数据输出到屏幕上，可以通过数据流重定向来处理-d <span class="token keyword">:</span> 解压缩-k <span class="token keyword">:</span> 保留原始文件不删除-t <span class="token keyword">:</span> 检验一个压缩文件的一致性，尾呢见有无错误-v <span class="token keyword">:</span> 显示出压缩比-<span class="token comment" spellcheck="true"># : # 为数字的意思1-9，-1最快但是压缩比最差，默认是-6</span></code></pre><p>但是对于大容量文件来说，bzip2会耗费更多的时间。</p><h5 id="xz-xzcat-xzmore-xzless-xzgrep"><a href="#xz-xzcat-xzmore-xzless-xzgrep" class="headerlink" title="xz,xzcat/xzmore/xzless/xzgrep"></a>xz,xzcat/xzmore/xzless/xzgrep</h5><p>xz的压缩比会更高</p><pre class=" language-bash"><code class="language-bash">$ xz <span class="token punctuation">[</span>-dtlkc<span class="token comment" spellcheck="true">#] 文件名</span>$ xcat 文件名.xz选项与参数：-c <span class="token keyword">:</span> 将压缩的数据输出到屏幕上，可以通过数据流重定向来处理-d <span class="token keyword">:</span> 解压缩-k <span class="token keyword">:</span> 保留原始文件不删除-l <span class="token keyword">:</span> 列出压缩文件的相关信息-t <span class="token keyword">:</span> 检验一个压缩文件的一致性，尾呢见有无错误-<span class="token comment" spellcheck="true"># : # 为数字的意思1-9，-1最快但是压缩比最差，默认是-6</span>$ xz -l services.xzStrms  Blocks   Compressed Uncompressed  Ratio  Check   Filename    1       1      7,052 B     18.7 KiB  0.368  CRC64   services.xz</code></pre><p>我们可以比较一下三个命令的时间：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">time</span> <span class="token function">gzip</span> -c services <span class="token operator">></span> services.gzreal    0m0.003suser    0m0.002ssys    0m0.001s$ <span class="token function">time</span> <span class="token function">bzip2</span> -c services <span class="token operator">></span> services.bz2real    0m0.003suser    0m0.003ssys    0m0.000s$ <span class="token function">time</span> xz -c services <span class="token operator">></span> services.xzreal    0m0.004suser    0m0.001ssys    0m0.004s</code></pre><p>可以看到三个命令的不同用时。</p><h4 id="打包命令：tar"><a href="#打包命令：tar" class="headerlink" title="打包命令：tar"></a>打包命令：tar</h4><p>上面的介绍的压缩命令都只能针对单个文件操作，如果有多个文件或者一整个目录都需要压缩的话，我们就需要tar打包命令。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这里只有一部分的tar参数和选项，剩下的可以通过man 来查询</span>$ <span class="token function">tar</span> <span class="token punctuation">[</span>-z<span class="token operator">|</span>-j<span class="token operator">|</span>-J<span class="token punctuation">]</span> <span class="token punctuation">[</span>cv<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f 待建立的新文件名<span class="token punctuation">]</span> filename<span class="token punctuation">..</span>. <span class="token comment" spellcheck="true"># 打包与压缩</span>$ <span class="token function">tar</span> <span class="token punctuation">[</span>-z<span class="token operator">|</span>-j<span class="token operator">|</span>-J<span class="token punctuation">]</span> <span class="token punctuation">[</span>tv<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f 已有的tar文件名<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 查看文件名</span>$ <span class="token function">tar</span> <span class="token punctuation">[</span>-z<span class="token operator">|</span>-j<span class="token operator">|</span>-J<span class="token punctuation">]</span> <span class="token punctuation">[</span>xv<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f 已有的新文件名<span class="token punctuation">]</span> <span class="token punctuation">[</span>-C directory<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 解压</span>选项与参数：-c <span class="token keyword">:</span> 建立打包文件-t <span class="token keyword">:</span> 查看打包文件含有哪些文件名-x <span class="token keyword">:</span> 解包或解压缩的功能，通过-C指定文件解压缩的目录-z <span class="token keyword">:</span> 通过gzip对文件进行解压缩-j <span class="token keyword">:</span> 通过bzip2对文件进行解压缩-J <span class="token keyword">:</span> 通过x对文件进行解压缩-v <span class="token keyword">:</span> 在压缩解压缩的过程中将正在处理的文件名显示出来-f <span class="token keyword">:</span> -f后面接立刻要被处理的文件名-C <span class="token keyword">:</span> 指定解压目录-p <span class="token keyword">:</span> 保留备份文件的原本权限和数据-P <span class="token keyword">:</span> 保留绝对路径--exclude<span class="token operator">=</span>FILE <span class="token keyword">:</span> 不对FILE打包</code></pre><ul><li>使用tar备份/etc目录</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">time</span> <span class="token function">tar</span> -zpcv -f /root/etc.tar.gz /etctar: Removing leading / from member names<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.real    0m1.130suser    0m0.895ssys    0m0.133s$ <span class="token function">time</span> <span class="token function">tar</span> -jpcv -f /root/etc.tar.bz2 /etctar: Removing leading / from member names<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.real    0m5.890suser    0m5.830ssys    0m0.104s$ <span class="token function">time</span> <span class="token function">tar</span> -jpcv -f /root/etc.tar.bz2 /etctar: Removing leading / from member names<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.real    0m8.008suser    0m7.957ssys    0m0.232s$ ll -h /root/etc*-rw-r--r-- 1 root root 2.3M 4月  23 15:33 /root/etc.tar.bz2-rw-r--r-- 1 root root 2.9M 4月  23 15:31 /root/etc.tar.gz-rw-r--r-- 1 root root 1.8M 4月  23 15:36 /root/etc.tar.xz$  <span class="token function">du</span> -sm /etc34    /etc <span class="token comment" spellcheck="true">#原本的文件占有34m</span></code></pre><ul><li>查看tar文件内部的数据内容</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> -jtv -f /root/etc.tar.bz2-rw-r--r-- root/root        77 2018-01-18 06:35 etc/sysctl.d/10-console-messages.conf-rw-r--r-- root/root       506 2018-01-18 06:35 etc/sysctl.d/10-zeropage.conf-rw-r--r-- root/root       257 2018-01-18 06:35 etc/sysctl.d/10-link-restrictions.conf-rw-r--r-- root/root      1184 2018-01-18 06:35 etc/sysctl.d/10-magic-sysrq.conf</code></pre><p>这里我们可以发现警告信息<code>tar: Removing leading / from member names</code>的情况，每个文件都木得根目录，因为如果带有根目录你解压这个文件的时候，解压出来的文件就会覆盖根目录下的文件。-P选项代表你确实要保留压缩文件的根目录。</p><ul><li><p>将备份的内容解压缩，并指定特殊的目录</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> -jxv -f /root/etc.tar.bz2 -C /tmp</code></pre></li><li><p>仅解开单一文件的方法<br>```bash<br>$ tar -jtv -f /root/etc.tar.bz2 | grep ‘shadow’</p></li></ul><p>-rw-r—– root/shadow     834 2019-03-27 21:47 etc/gshadow-<br>-rw-r—– root/shadow     848 2019-03-27 21:47 etc/gshadow<br>-rw-r—– root/shadow    1356 2019-03-27 21:47 etc/shadow-<br>-rw-r—– root/shadow    1382 2019-03-27 21:47 etc/shadow<br>$ tar -jxv -f /root/etc.tar.bz2 etc/shadow<br>etc/shadow</p><pre><code>+ 打包目录，但是不包含目录下某些文件不要以`/root/etc*`开头的文件，而且文件也不能自己打包自己（因为在一个目录下）```bash$  tar -jcv -f /root/system.tar.bz2 --exclude=/root/etc* --exclude=/root/system.tar.bz2 /etc /root</code></pre><ul><li>仅备份比某个时刻还要新的文件<br><code>--newer</code>后面的日期包含mtime和ctime，<code>--newer-mtime</code>值包含mtime<br>```bash<br>$ find /etc -newer /etc/passwd<br>$ ll /etc/passwd</li></ul><p>-rw-r–r– 1 root root 2580 3月  27 21:47 /etc/passwd<br>$ tar -jcv -f /root/etc.newer.then.passwd.tar.bz2 –newer-mtime=”2019/03/27” /etc/*<br>$ tar -jtv -f /root/etc.newer.then.passwd.tar.bz2 | grep -v ‘/$’</p><h1 id="这个命令可以吸纳是出tar包中所有不以-结尾的文件"><a href="#这个命令可以吸纳是出tar包中所有不以-结尾的文件" class="headerlink" title="这个命令可以吸纳是出tar包中所有不以/结尾的文件"></a>这个命令可以吸纳是出tar包中所有不以/结尾的文件</h1><pre><code>+ tarfile  + 只是使用tar来打包的文件为 ***tarfile*** `tar -cv -f file.tar`  + 打包并压缩的为 ***tarball***将文件备份到磁带中无法使用cp命令，因为磁带是一次性读写设备，这时可以`tar -cv -f /dev/st0 /home /root /etc`+ 将文件一边打包一边解压```bash$ tar -cvf - /etc | tar -xvf -</code></pre><h4 id="XFS文件系统的备份与还原"><a href="#XFS文件系统的备份与还原" class="headerlink" title="XFS文件系统的备份与还原"></a>XFS文件系统的备份与还原</h4><h5 id="XFS文件系统备份xfsdump"><a href="#XFS文件系统备份xfsdump" class="headerlink" title="XFS文件系统备份xfsdump"></a>XFS文件系统备份xfsdump</h5><p>xfdump的一个特性是可以进行增量备份，这样可以节省很多时间，也就在第一次进行系统备份之后，之后在备份时我们都可以选择增量备份。</p><ul><li>第一次备份一定是完整备份，第一次备份在xfsdump中被认定为level0</li><li>xfsdump不支持没有挂载的文件系统的备份，只能备份已经被挂载的文件系统</li><li>必须使用root权限</li><li>只能备份xfs文件系统</li><li>xfsdump备份的数据只能有xfsrestore解析</li><li>不能备份两个有相同UUID的文件</li></ul><pre class=" language-bash"><code class="language-bash">$ xfsdump <span class="token punctuation">[</span>-L S_label<span class="token punctuation">]</span> <span class="token punctuation">[</span>-M M_label<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l <span class="token comment" spellcheck="true">#] [-f 备份文件] 待备份数据</span>$ xfsdump -I选项与参数： -L <span class="token keyword">:</span> 对文件系统的说明 -M <span class="token keyword">:</span> 对储存媒介的说明 -l <span class="token keyword">:</span> 指定等级，0-9，0为完整备份 -f <span class="token keyword">:</span> 接产生的文件 -I <span class="token keyword">:</span> 从/var/lib/xfsdump/inventory列出目前备份的信息状态</code></pre><ul><li>xfsdump备份完整的文件系统<br>```bash<h1 id="1-先确定-boot-是独立的文件系统喔"><a href="#1-先确定-boot-是独立的文件系统喔" class="headerlink" title="1. 先确定 /boot 是独立的文件系统喔!"></a>1. 先确定 /boot 是独立的文件系统喔!</h1><h1 id="df-h-boot"><a href="#df-h-boot" class="headerlink" title="df -h /boot"></a>df -h /boot</h1>Filesystem Size<br>/dev/vda2 1014M<br>Used Avail Use% Mounted on<br>131M<br>884M<br>13% /boot<h1 id="挂载-boot-的是-dev-vda-装置"><a href="#挂载-boot-的是-dev-vda-装置" class="headerlink" title="挂载 /boot 的是 /dev/vda 装置!"></a>挂载 /boot 的是 /dev/vda 装置!</h1><h1 id="看-确实是独立的文件系统喔-boot-是挂载点"><a href="#看-确实是独立的文件系统喔-boot-是挂载点" class="headerlink" title="看!确实是独立的文件系统喔! /boot 是挂载点!"></a>看!确实是独立的文件系统喔! /boot 是挂载点!</h1><h1 id="2-将完整备份的文件名记录成为-srv-boot-dump"><a href="#2-将完整备份的文件名记录成为-srv-boot-dump" class="headerlink" title="2. 将完整备份的文件名记录成为 /srv/boot.dump :"></a>2. 将完整备份的文件名记录成为 /srv/boot.dump :</h1><h1 id="xfsdump-l-0-L-boot-all-M-boot-all-f-srv-boot-dump-boot"><a href="#xfsdump-l-0-L-boot-all-M-boot-all-f-srv-boot-dump-boot" class="headerlink" title="xfsdump -l 0 -L boot_all -M boot_all -f /srv/boot.dump /boot"></a>xfsdump -l 0 -L boot_all -M boot_all -f /srv/boot.dump /boot</h1>xfsdump -l 0 -L boot_all -M boot_all -f /srv/boot.dump /boot<br>xfsdump: using file dump (drive_simple) strategy<br>xfsdump: version 3.1.4 (dump format 3.0) - type ^C for status and control<br>xfsdump: level 0 dump of study.centos.vbird:/boot # 开始备份本机/boot 系统<br>xfsdump: dump date: Wed Jul # 备份的时间<br>1 18:43:04 2015<br>xfsdump: session id: 418b563f-26fa-4c9b-98b7-6f57ea0163b1 # 这次 dump 的 ID<br>xfsdump: session label: “boot_all” # 简单给予一个名字记忆<br>xfsdump: ino map phase 1: constructing initial dump list # 开始备份程序<br>xfsdump: ino map phase 2: skipping (no pruning necessary)<br>xfsdump: ino map phase 3: skipping (only one dump stream)<br>xfsdump: ino map construction complete<br>xfsdump: estimated dump size: 103188992 bytes<br>xfsdump: creating dump session media file 0 (media 0, file 0)<br>xfsdump: dumping ino map<br>xfsdump: dumping directories<br>xfsdump: dumping non-directory files<br>xfsdump: ending media file<br>xfsdump: media file size 102872168 bytes<br>xfsdump: dump size (non-dir files) : 102637296 bytes<br>xfsdump: dump complete: 1 seconds elapsed<br>xfsdump: Dump Summary:xfsdump:<br>stream 0 /srv/boot.dump OK (success)<br>xfsdump: Dump Status: SUCCESS<h1 id="在指令的下达方面-你也可以不加-L-及-M-的-只是那就会进入互动模式-要求你-enter"><a href="#在指令的下达方面-你也可以不加-L-及-M-的-只是那就会进入互动模式-要求你-enter" class="headerlink" title="在指令的下达方面,你也可以不加 -L 及 -M 的,只是那就会进入互动模式,要求你 enter!"></a>在指令的下达方面,你也可以不加 -L 及 -M 的,只是那就会进入互动模式,要求你 enter!</h1><h1 id="而执行-xfsdump-的过程中会出现如上的一些讯息-您可以自行仔细的观察"><a href="#而执行-xfsdump-的过程中会出现如上的一些讯息-您可以自行仔细的观察" class="headerlink" title="而执行 xfsdump 的过程中会出现如上的一些讯息,您可以自行仔细的观察!"></a>而执行 xfsdump 的过程中会出现如上的一些讯息,您可以自行仔细的观察!</h1><h1 id="ll-srv-boot-dump"><a href="#ll-srv-boot-dump" class="headerlink" title="ll /srv/boot.dump"></a>ll /srv/boot.dump</h1></li></ul><p>-rw-r–r–. 1 root root 102872168 Jul<br>1 18:43 /srv/boot.dump</p><h1 id="ll-var-lib-xfsdump-inventory"><a href="#ll-var-lib-xfsdump-inventory" class="headerlink" title="ll /var/lib/xfsdump/inventory"></a>ll /var/lib/xfsdump/inventory</h1><p>-rw-r–r–. 1 root root 5080 Jul 1 18:43 506425d2-396a-433d-9968-9b200db0c17c.StObj<br>-rw-r–r–. 1 root root 312 Jul 1 18:43 94ac5f77-cb8a-495e-a65b-2ef7442b837c.InvIndex<br>-rw-r–r–. 1 root root 576 Jul 1 18:43 fstab</p><h1 id="使用了-xfsdump-之后才会有上述-var-lib-xfsdump-inventory-内的文件产生喔"><a href="#使用了-xfsdump-之后才会有上述-var-lib-xfsdump-inventory-内的文件产生喔" class="headerlink" title="使用了 xfsdump 之后才会有上述 /var/lib/xfsdump/inventory 内的文件产生喔!"></a>使用了 xfsdump 之后才会有上述 /var/lib/xfsdump/inventory 内的文件产生喔!</h1><pre><code>+ 用xfsdump进行增量备份```bash# 0. 看一下有没有任何文件系统被 xfsdump 过的资料?# xfsdump -Ifile system 0:fs id:94ac5f77-cb8a-495e-a65b-2ef7442b837csession 0:     mount point: study.centos.vbird:/boot     device: study.centos.vbird:/dev/vda2     time: Wed Jul     1 18:43:04 2015     session label: &quot;boot_all&quot;     session id: 418b563f-26fa-4c9b-98b7-6f57ea0163b1     level: 0     resumed: NO     subtree: NO     streams: 1     stream 0:             pathname: /srv/boot.dump             start: ino 132 offset 0             end: ino 2138243 offset 0             interrupted: NO             media files: 1             media file 0:                     mfile index: 0                     mfile type: data                     mfile size: 102872168                     mfile start: ino 132 offset                     mfile end: ino 2138243 offset 0                     media label: &quot;boot_all&quot;                     media id: a6168ea6-1ca8-44c1-8d88-95c863202eabxfsdump: Dump Status: SUCCESS# 我们可以看到目前仅有一个 session 0 的备份资料而已!而且是 level 0 喔!# 1. 先恶搞一下,建立一个大约 10 MB 的文件在 /boot 内:# dd if=/dev/zero of=/boot/testing.img bs=1M count=1010+0 records in10+0 records out10485760 bytes (10 MB) copied, 0.166128 seconds, 63.1 MB/s# 2. 开始建立差异备份档,此时我们使用 level 1 吧:# xfsdump -l 1 -L boot_2 -M boot_2 -f /srv/boot.dump1 /boot....(中间省略)....# ll /srv/boot*-rw-r--r--. 1 root root 102872168 Jul 1 18:43 /srv/boot.dump-rw-r--r--. 1 root root 1 18:46 /srv/boot.dump110510952 Jul# 看看文件大小,岂不是就是刚刚我们所建立的那个大文件的容量吗? ^_^# 3. 最后再看一下是否有记录 level 1 备份的时间点呢?# xfsdump -Ifile system 0:fs id:94ac5f77-cb8a-495e-a65b-2ef7442b837csession 0:mount point: study.centos.vbird:/bootdevice: study.centos.vbird:/dev/vda2....(中间省略)....session 1:mount point: study.centos.vbird:/bootdevice: study.centos.vbird:/dev/vda2time: Wed Jul1 18:46:21 2015session label: &quot;boot_2&quot;session id: c71d1d41-b3bb-48ee-bed6-d77c939c5ee8level: 1resumed: NOsubtree: NOstreams:1stream 0:pathname: /srv/boot.dump1start: ino 455518 offset 0</code></pre><h5 id="XFS文件系统还原xfsrestore"><a href="#XFS文件系统还原xfsrestore" class="headerlink" title="XFS文件系统还原xfsrestore"></a>XFS文件系统还原xfsrestore</h5><pre class=" language-bash"><code class="language-bash">$ xfsrestore -I <span class="token operator">&lt;=</span><span class="token operator">=</span>用来察看备份文件资料$ xfsrestore <span class="token punctuation">[</span>-f 备份档<span class="token punctuation">]</span> <span class="token punctuation">[</span>-L S_label<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> 待复原目录 <span class="token operator">&lt;=</span><span class="token operator">=</span>单一文件全系统复原$ xfsrestore <span class="token punctuation">[</span>-f 备份文件<span class="token punctuation">]</span> -r 待复原目录<span class="token operator">&lt;=</span><span class="token operator">=</span>透过累积备份文件来复原系统$ xfsrestore <span class="token punctuation">[</span>-f 备份文件<span class="token punctuation">]</span> -i 待复原目录<span class="token operator">&lt;=</span><span class="token operator">=</span>进入互动模式选项与参数:-I :跟 xfsdump 相同的输出<span class="token operator">!</span>可查询备份数据,包括 Label 名称与备份时间等-f :后面接的就是备份档<span class="token operator">!</span>企业界很有可能会接 /dev/st0 等磁带机<span class="token operator">!</span>我们这里接档名<span class="token operator">!</span>-L :就是 Session 的 Label name 喔<span class="token operator">!</span>可用 -I 查询到的数据,在这个选项后输入<span class="token operator">!</span>-s :需要接某特定目录,亦即仅复原某一个文件或目录之意<span class="token operator">!</span>-r :如果是用文件来储存备份数据,那这个就不需要使用。如果是一个磁带内有多个文件,需要这东西来达成累积复原-i:进入互动模式,进阶管理员使用的<span class="token operator">!</span>一般我们不太需要操作它<span class="token operator">!</span></code></pre><ul><li>用 xfsrestore 观察 xfsdump 后的备份数据内容<pre class=" language-bash"><code class="language-bash">$ xfsrestore -I</code></pre></li><li>简单复原 level 0 的文件系统<pre class=" language-bash"><code class="language-bash">$ xfsrestore -f /srv/boot.dump -L boot_all /boot<span class="token comment" spellcheck="true"># 直接复原的结果就是:『同名的文件会被覆盖,其他系统内新的文件会被保留』</span><span class="token comment" spellcheck="true"># 仅复原备份档内的 grub2 到 /tmp/boot2/ 里头去!</span>$ <span class="token function">mkdir</span> /tmp/boot2$ xfsrestore -f /srv/boot.dump -L boot_all -s grub2 /tmp/boot2</code></pre></li><li>复原累积备份资料<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 继续复原 level 1 到 /tmp/boot 当中!</span>$ xfsrestore -f /srv/boot.dump1 /tmp/boot</code></pre></li><li>仅还原部分文件的 xfsrestore 互动模式<br>```bash<h1 id="1-先进入备份文件内-准备找出需要备份的文件名数据-同时预计还原到-tmp-boot3-当中"><a href="#1-先进入备份文件内-准备找出需要备份的文件名数据-同时预计还原到-tmp-boot3-当中" class="headerlink" title="1. 先进入备份文件内,准备找出需要备份的文件名数据,同时预计还原到 /tmp/boot3 当中!"></a>1. 先进入备份文件内,准备找出需要备份的文件名数据,同时预计还原到 /tmp/boot3 当中!</h1>$ mkdir /tmp/boot3<br>$ xfsrestore -f /srv/boot.dump -i /tmp/boot3<br>========================== subtree selection dialog ==========================the following commands are available:<br>pwd<br>ls [ <path> ]<br>cd [ <path> ]<br>add [ <path> ] # 可以加入复原文件列表中<br>delete [ <path> ] # 从复原列表拿掉档名!并非删除喔!<br>extract # 开始复原动作!<br>quit<br>help</path></path></path></path></li></ul><p>-&gt; ls<br>455517 initramfs-3.10.0-229.el7.x86_64kdump.img<br>138 initramfs-3.10.0-229.el7.x86_64.img<br>141 initrd-plymouth.img<br>140 vmlinuz-0-rescue-309eb890d09f440681f596543d95ec7a<br>139 initramfs-0-rescue-309eb890d09f440681f596543d95ec7a.img<br>137 vmlinuz-3.10.0-229.el7.x86_64<br>136 symvers-3.10.0-229.el7.x86_64.gz<br>133 .vmlinuz-3.10.0-229.el7.x86_64.hmac<br>1048704 grub2/<br>131 grub/<br>-&gt; add grub<br>-&gt; add grub2<br>-&gt; add config-3.10.0-229.el7.x86_64<br>-&gt; extract<br>$ ls -l /tmp/boot3<br>-rw-r–r–. 1 root root 123838 Mar 6 19:45 config-3.10.0-229.el7.x86_64<br>drwxr-xr-x. 2 root root 4 17:52 grub<br>drwxr-xr-x. 6 root root<br>26 May<br>104 Jun 25 00:02 grub2</p><h1 id="就只会有-3-个档名被复原-当然-如果文件名是目录-那底下的子文件当然也会被还原回来的"><a href="#就只会有-3-个档名被复原-当然-如果文件名是目录-那底下的子文件当然也会被还原回来的" class="headerlink" title="就只会有 3 个档名被复原,当然,如果文件名是目录,那底下的子文件当然也会被还原回来的!"></a>就只会有 3 个档名被复原,当然,如果文件名是目录,那底下的子文件当然也会被还原回来的!</h1><pre><code>事实上,这个 -i 是很有帮助的一个项目!可以从备份档里面找出你所需要的数据来复原!相当有趣!当然啦, 如果你已经知道档名,使用 -s 不需要进入备份档就能够处理掉这部份了!#### 光盘写入工具+ 现将数据创建为一个镜像文件（iso），利用mkisofs命令处理+ 将该镜像文件刻录至CD或DVD当中，利用cdrecord命令来处理##### mkisofs：建立镜像文件+ 制作一般数据光盘镜像文件```bashmkisofs [-o 镜像文件] [-Jrv] [-V vol] [-m file] 待备份文件... -graft-point isodir=systemdir ...选项与参数:-o :后面接你想要产生的那个镜像文件。-J :产生较兼容于 windows 机器的文件名结构,可增加文件名长度到 64 个 unicode 字符-r :透过 Rock Ridge 产生支持 Unix/Linux 的文件数据,可记录较多的信息(如 UID/GID 等) ;-v :显示创建 ISO 文件的过程-V vol :建立 Volume,有点像 Windows 在文件资源管理器中看到的CD卷标-m file：-m 为排除文件的意思后面的文件不备份到镜像文件中,也能使用 * 通配符喔-graft-point:graft 有转嫁或移植的意思,相关资料在底下文章内说明。</code></pre><p><strong><em>光盘的格式一般称为 iso9660 ,这种格式一般仅支持旧版的 DOS 文件名,亦即文件<br>名只能以 8.3 (文件名 8 个字符,扩展名 3 个字符) 的方式存在。</em></strong> 可以-r来记录更多。<br><strong><em>所有要被加到镜像文件中的文件都会被放置到镜像文件中的根目录</em></strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkisofs</span> -r -v -o /tmp/system.img /root /home /etcI: -input-charset not specified, using utf-8 <span class="token punctuation">(</span>detected <span class="token keyword">in</span> locale settings<span class="token punctuation">)</span>genisoimage 1.1.11 <span class="token punctuation">(</span>Linux<span class="token punctuation">)</span>Scanning /root<span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">(</span>中间省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.Scanning /etc/scl/prefixes<span class="token comment" spellcheck="true"># 被改名子了!</span>Using SYSTE000.<span class="token punctuation">;</span>1 <span class="token keyword">for</span> /system-release-cpe <span class="token punctuation">(</span>system-release<span class="token punctuation">)</span>Using CENTO000.<span class="token punctuation">;</span>1 <span class="token keyword">for</span> /centos-release-upstream <span class="token punctuation">(</span>centos-release<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 被改名子了!</span>Using CRONT000.<span class="token punctuation">;</span>1 <span class="token keyword">for</span> /crontab <span class="token punctuation">(</span>crontab<span class="token punctuation">)</span>genisoimage: Error: <span class="token string">'/etc/crontab'</span> and <span class="token string">'/root/crontab'</span> have the same Rock Ridge name <span class="token string">'crontab'</span><span class="token keyword">.</span><span class="token comment" spellcheck="true"># 文件名不可一样啊!</span>Unable to <span class="token function">sort</span> directoryNOTE: multiple <span class="token function">source</span> directories have been specified and merged into the rootof the filesystem. Check your program arguments. genisoimage is not tar.<span class="token comment" spellcheck="true"># 看到没?因为档名一模一样,所以就不给你建立 ISO 檔了啦!</span><span class="token comment" spellcheck="true"># 请先删除 /root/crontab 这个文件,然后再重复执行一次 mkisofs 吧!</span>$ <span class="token function">rm</span> /root/crontab$ <span class="token function">mkisofs</span> -r -v -o /tmp/system.img /root /home /etc<span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">(</span>前面省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.83.91% done, estimate finish Thu Jul 2 18:48:04 201592.29% done, estimate finish Thu Jul 2 18:48:04 2015Total translation table size: 0Total rockridge attributes bytes: 600251Total directory bytes: 2150400Path table size<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>: 12598Done with: The File<span class="token punctuation">(</span>s<span class="token punctuation">)</span> Block<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Writing: Start Block 59449Ending PadblockDone with: Ending PadblockBlock<span class="token punctuation">(</span>s<span class="token punctuation">)</span>58329150Max brk space used 54800059599 extents written <span class="token punctuation">(</span>116 MB<span class="token punctuation">)</span>$ ll -h /tmp/system.img-rw-r--r--. 1 root root 117M Jul2 18:48 /tmp/system.img$ <span class="token function">mount</span> -o loop /tmp/system.img /mnt$ <span class="token function">df</span> -h /mntFilesystemSizeUsed Avail Use% Mounted on/dev/loop0117M117M0 100% /mnt$ <span class="token function">ls</span> /mntabrt festival mail.rc rsyncd.confadjtime filesystems makedumpfile.conf.sample rsyslog.confalex firewalld man_db.conf rsyslog.d<span class="token comment" spellcheck="true"># 看吧!一堆数据都放置在一起!包括有的没有的目录与文件等等!</span>$ <span class="token function">umount</span> /mnt<span class="token comment" spellcheck="true"># 测试完毕要记得卸除!</span>这样可以使用-graft-point来处理​```bash$ <span class="token function">mkisofs</span> -r -V <span class="token string">'linux_file'</span> -o /tmp/system.img \<span class="token operator">></span>-m /root/etc -graft-point /root<span class="token operator">=</span>/root /home<span class="token operator">=</span>/home /etc<span class="token operator">=</span>/etc$ ll -h /tmp/system.img-rw-r--r--. 1 root root 92M Jul2 19:00 /tmp/system.img<span class="token comment" spellcheck="true"># 上面的指令会建立一个大文件,其中 -graft-point 后面接的就是我们要备份的数据。</span><span class="token comment" spellcheck="true"># 必须要注意的是那个等号的两边,等号左边是在映像文件内的目录,右侧则是实际的数据。</span>$ <span class="token function">mount</span> -o loop /tmp/system.img /mnt$ ll /mntdr-xr-xr-x. 131 root root 34816 Jun 26 22:14 etcdr-xr-xr-x. 5 root root 2048 Jun 17 00:20 homedr-xr-xr-x. 8 root root 4096 Jul2 18:48 root<span class="token comment" spellcheck="true"># 瞧!数据是分门别类的在各个目录中喔这样了解乎?最后将数据卸除一下:</span>$ <span class="token function">umount</span> /mnt</code></pre><ul><li>制作/修改课启动光盘镜像文件<br>```bash<h1 id="1-先观察一下这片光盘里面有啥东西-是否是我们需要的光盘系统"><a href="#1-先观察一下这片光盘里面有啥东西-是否是我们需要的光盘系统" class="headerlink" title="1. 先观察一下这片光盘里面有啥东西?是否是我们需要的光盘系统!"></a>1. 先观察一下这片光盘里面有啥东西?是否是我们需要的光盘系统!</h1>$ isoinfo -d -i /home/CentOS-7-x86_64-Minimal-1503-01.iso<br>CD-ROM is in ISO 9660 format<br>System id: LINUX<br>Volume id: CentOS 7 x86_64<br>Volume set id:<br>Publisher id:<br>Data preparer id:<br>Application id: GENISOIMAGE ISO 9660/HFS FILESYSTEM CREATOR (C) 1993 E.YOUNGDALE (C) …<br>Copyright File id:<br>…..(中间省略)…..<br>Eltorito defaultboot header:<br>Bootid 88 (bootable)<br>Boot media 0 (No Emulation Boot)<br>Load segment 0<br>Sys type 0<br>Nsect 4<h1 id="2-开始挂载这片光盘到-mnt-并且将所有数据完整复制到-srv-newcd-目录去喔"><a href="#2-开始挂载这片光盘到-mnt-并且将所有数据完整复制到-srv-newcd-目录去喔" class="headerlink" title="2. 开始挂载这片光盘到 /mnt ,并且将所有数据完整复制到 /srv/newcd 目录去喔"></a>2. 开始挂载这片光盘到 /mnt ,并且将所有数据完整复制到 /srv/newcd 目录去喔</h1>$ mount /home/CentOS-7-x86_64-Minimal-1503-01.iso /mnt<br>$ mkdir /srv/newcd<br>$ rsync -a /mnt/ /srv/newcd<br>$ ll /srv/newcd/</li></ul><p>-rw-r–r–. 1 root root 16 Apr<br>1 07:11 CentOS_BuildTag<br>drwxr-xr-x. 3 root root 33 Mar 28 06:34 EFI<br>-rw-r–r–. 1 root root 215 Mar 28 06:36 EULA<br>-rw-r–r–. 1 root root 18009 Mar 28 06:36 GPL<br>drwxr-xr-x. 3 root root 54 Mar 28 06:34 images<br>drwxr-xr-x. 2 root root 4096 Mar 28 06:34 isolinux<br>drwxr-xr-x. 2 root root 41 Mar 28 06:34 LiveOS<br>drwxr-xr-x. 2 root root 20480 Apr<br>1 07:11 Packages<br>drwxr-xr-x. 2 root root 4096 Apr<br>1 07:11 repodata<br>-rw-r–r–. 1 root root 1690 Mar 28 06:36 RPM-GPG-KEY-CentOS-7<br>-rw-r–r–. 1 root root 1690 Mar 28 06:36 RPM-GPG-KEY-CentOS-Testing-7<br>-r–r–r–. 1 root root 2883 Apr<br>1 07:15 TRANS.TBL</p><h1 id="rsync-可以完整的复制所有的权限属性等数据-也能够进行镜像处理-相当好用的指令喔"><a href="#rsync-可以完整的复制所有的权限属性等数据-也能够进行镜像处理-相当好用的指令喔" class="headerlink" title="rsync 可以完整的复制所有的权限属性等数据,也能够进行镜像处理!相当好用的指令喔!"></a>rsync 可以完整的复制所有的权限属性等数据,也能够进行镜像处理!相当好用的指令喔!</h1><h1 id="这里先了解一下即可。现在-newcd-目录内已经是完整的映像档内容-3-假设已经处理完毕你在-srv-newcd-里面所要进行的各项修改行为-准备建立-ISO-檔"><a href="#这里先了解一下即可。现在-newcd-目录内已经是完整的映像档内容-3-假设已经处理完毕你在-srv-newcd-里面所要进行的各项修改行为-准备建立-ISO-檔" class="headerlink" title="这里先了解一下即可。现在 newcd/ 目录内已经是完整的映像档内容!# 3. 假设已经处理完毕你在 /srv/newcd 里面所要进行的各项修改行为,准备建立 ISO 檔!"></a>这里先了解一下即可。现在 newcd/ 目录内已经是完整的映像档内容!# 3. 假设已经处理完毕你在 /srv/newcd 里面所要进行的各项修改行为,准备建立 ISO 檔!</h1><p>$ ll /srv/newcd/isolinux/<br>-r–r–r–. 1 root root<br>2048 Apr<br>1 07:15 boot.cat<br>-rw-r–r–. 1 root root 84 Mar 28 06:34 boot.msg<br>-rw-r–r–. 1 root root 281 Mar 28 06:34 grub.conf</p><h1 id="开机的型号数据等等"><a href="#开机的型号数据等等" class="headerlink" title="开机的型号数据等等"></a>开机的型号数据等等</h1><p>-rw-r–r–. 1 root root 35745476 Mar 28 06:31 initrd.img<br>-rw-r–r–. 1 root root 24576 Mar 28 06:38 isolinux.bin<br>-rw-r–r–. 1 root root 3032 Mar 28 06:34 isolinux.cfg<br>-rw-r–r–. 1 root root 176500 Sep 11<br>-rw-r–r–. 1 root root 186 Jul<br>-r–r–r–. 1 root root 2438 Apr<br>2</p><h1 id="相当于开机管理程序"><a href="#相当于开机管理程序" class="headerlink" title="相当于开机管理程序"></a>相当于开机管理程序</h1><p>2014 memtest<br>2014 splash.png<br>1 07:15 TRANS.TBL<br>-rw-r–r–. 1 root root 33997348 Mar 28 06:33 upgrade.img<br>-rw-r–r–. 1 root root 153104 Mar<br>-rwxr-xr-x. 1 root root 5029136 Mar<br>6 13:46 vesamenu.c32<br>6 19:45 vmlinuz</p><h1 id="Linux-核心文件"><a href="#Linux-核心文件" class="headerlink" title="Linux 核心文件"></a>Linux 核心文件</h1><p>$ cd /srv/newcd<br>[root@study newcd]# mkisofs -o /custom.iso -b isolinux/isolinux.bin -c isolinux/boot.cat \</p><blockquote><p>-no-emul-boot -V ‘CentOS 7 x86_64’ -boot-load-size 4 -boot-info-table -R -J -v -T .</p></blockquote><pre><code>##### cdrecord：光盘刻录工具现在一般使用wodim来刻录```bash$ wodim --devices dev=/dev/sr0... &lt;==查询刻录机的 BUS 位置$ wodim -v dev=/dev/sr0 blank=[fast|all] &lt;==抹除重复读写片$ wodim -v dev=/dev/sr0 -format &lt;==格式化 DVD+RW$ wodim -v dev=/dev/sr0 [可用选项功能] file.iso选项与参数:--devices :用在扫瞄磁盘总线并找出可用的刻录机,后续的装置为 ATA 接口-v :在 cdrecord 运作的过程中,显示过程而已。dev=/dev/sr0 :可以找出此光驱的 bus 地址,非常重要!blank=[fast|all]:blank 为抹除可重复写入的 CD/DVD-RW,使用 fast 较快,all 较完整-format:对光盘片进行格式化,但是仅针对 DVD+RW 这种格式的 DVD 而已;[可用选项功能] 主要是写入 CD/DVD 时可使用的选项,常见的选项包括有:-data:指定后面的文件以数据格式写入,不是以 CD 音轨(-audio)方式写入!speed=X :指定刻录速度,例如 CD 可用 speed=40 为 40 倍数,DVD 则可用 speed=4 之类-eject :指定刻录完毕后自动退出光盘fs=Ym :指定多少缓冲存储器,可用在将映像档先暂存至缓冲存储器。预设为 4m,一般建议可增加到 8m ,不过,还是得视你的刻录机而定。针对 DVD 的选项功能:driveropts=burnfree :打开 Buffer Underrun Free 模式的写入功能-sa:支持 DVD-RW 的格式</code></pre><ul><li><p>侦测你的刻录机所在位置:</p><pre class=" language-bash"><code class="language-bash">$ ll /dev/sr0brw-rw----+ 1 root cdrom 11, 0 Jun 26 22:14 /dev/sr0 <span class="token comment" spellcheck="true">#一般 Linux 光驱文件名!</span>$ wodim --devices dev<span class="token operator">=</span>/dev/sr0-------------------------------------------------------------------------0dev<span class="token operator">=</span><span class="token string">'/dev/sr0'</span>rwrw-- <span class="token keyword">:</span> <span class="token string">'QEMU'</span> <span class="token string">'QEMU DVD-ROM'</span>-------------------------------------------------------------------------$ wodim --devices dev<span class="token operator">=</span>/dev/sr0wodim: Overview of accessible drives <span class="token punctuation">(</span>1 found<span class="token punctuation">)</span> <span class="token keyword">:</span>-------------------------------------------------------------------------0dev<span class="token operator">=</span><span class="token string">'/dev/sr0'</span>rwrw-- <span class="token keyword">:</span> <span class="token string">'ASUS'</span> <span class="token string">'DRW-24D1ST'</span>-------------------------------------------------------------------------</code></pre></li></ul><ul><li>进行cd/dvd的刻录<br>```bash<h1 id="0-先抹除光盘的原始内容-非可重复读写则可略过此步骤"><a href="#0-先抹除光盘的原始内容-非可重复读写则可略过此步骤" class="headerlink" title="0. 先抹除光盘的原始内容:(非可重复读写则可略过此步骤)"></a>0. 先抹除光盘的原始内容:(非可重复读写则可略过此步骤)</h1>$ wodim -v dev=/dev/sr0 blank=fast<h1 id="中间会跑出一堆讯息告诉你抹除的进度-而且会有-10-秒钟的时间等待你的取消"><a href="#中间会跑出一堆讯息告诉你抹除的进度-而且会有-10-秒钟的时间等待你的取消" class="headerlink" title="中间会跑出一堆讯息告诉你抹除的进度,而且会有 10 秒钟的时间等待你的取消!"></a>中间会跑出一堆讯息告诉你抹除的进度,而且会有 10 秒钟的时间等待你的取消!</h1><h1 id="1-开始刻录"><a href="#1-开始刻录" class="headerlink" title="1. 开始刻录:"></a>1. 开始刻录:</h1>$ wodim -v dev=/dev/sr0 speed=4 -dummy -eject /tmp/system.img<br>….(前面省略)….<br>Waiting for reader process to fill input buffer … input buffer ready.<br>Starting new track at sector: 0<br>Track 01:<br>86 of<br>86 MB written (fifo 100%) [buf<br>97%]</li></ul><p>4.0x.</p><h1 id="这里有流程时间"><a href="#这里有流程时间" class="headerlink" title="这里有流程时间!"></a>这里有流程时间!</h1><p>Track 01: Total bytes read/written: 90937344/90937344 (44403 sectors).<br>Writing<br>time:</p><h1 id="写入的总时间"><a href="#写入的总时间" class="headerlink" title="写入的总时间"></a>写入的总时间</h1><p>38.337s<br>Average write speed</p><h1 id="换算下来的写入时间"><a href="#换算下来的写入时间" class="headerlink" title="换算下来的写入时间"></a>换算下来的写入时间</h1><p>1.7x.<br>Min drive buffer fill was 97%<br>Fixating…<br>Fixating time:<br>120.943s<br>wodim: fifo had 1433 puts and 1433 gets.<br>wodim: fifo was 0 times empty and 777 times full, min fill was 89%.</p><h1 id="因为有加上-eject-这个选项的缘故-因此刻录完成后-DVD-会被退出光驱喔-记得推回去"><a href="#因为有加上-eject-这个选项的缘故-因此刻录完成后-DVD-会被退出光驱喔-记得推回去" class="headerlink" title="因为有加上 -eject 这个选项的缘故,因此刻录完成后,DVD 会被退出光驱喔!记得推回去!"></a>因为有加上 -eject 这个选项的缘故,因此刻录完成后,DVD 会被退出光驱喔!记得推回去!</h1><h1 id="2-刻录完毕后-测试挂载一下-检验内容"><a href="#2-刻录完毕后-测试挂载一下-检验内容" class="headerlink" title="2. 刻录完毕后,测试挂载一下,检验内容:"></a>2. 刻录完毕后,测试挂载一下,检验内容:</h1><p>$ mount /dev/sr0/mnt<br>$ df -h /mnt<br>Filesystem<br>Filesystem<br>/dev/sr0<br>Size<br>Size<br>Used Avail Use% Mounted on<br>Used Avail Use% Mounted on<br>87M<br>87M<br>0 100% /mnt<br>$ ll /mnt<br>dr-xr-xr-x. 135 root root 36864 Jun 30 04:00 etc<br>dr-xr-xr-x.<br>19 root root<br>$ umount /mnt<br>8192 Jul<br>2 13:16 root<br>&lt;==不要忘了卸除</p><pre><code>#### 其他常见的压缩与备份工具停下你的dd行为##### dd```bash$ dd if=&quot;input_file&quot; of=&quot;output_file&quot; bs=&quot;block_size&quot; count=&quot;number&quot;选项与参数：if ： 就是input file，也可以是设备of ： 就是output file，也可以是设备bs ： 设置一个block的大小，默认512bytes（一个扇区）count ： 多少个bs的意思$ dd if=/etc/passwd of=/tmp/passwd.back #将镜像文件写入u盘5+1 records in5+1 records out2580 bytes (2.6 kB, 2.5 KiB) copied, 0.000205157 s, 12.6 MB/s$ ll /etc/passwd /tmp/passwd.back-rw-r--r-- 1 root  root  2580 3月  27 21:47 /etc/passwd-rw-r--r-- 1 jason jason 2580 4月  23 22:28 /tmp/passwd.back$ dd if=/dev/sr0 of=/tmp/system.iso #备份数据为镜像文件$ lsblk /dev/sda$ dd if=/tmp/system.iso of=/dev/sda$ mount /dev/sda /mnt$ ll /mnt$ df -h /boot$ dd if=/dev/vd2 of /tmp/vda2.img #将/boot整个文件系统备份下来$ ll -h /tmp/vda2.img</code></pre><p>dd是很笨拙的一个一个扇区去读写的，那这个其实非常nice啊，复制文件系统就可以使用</p><h5 id="cpio"><a href="#cpio" class="headerlink" title="cpio"></a>cpio</h5><p>cpio可以备份一切东西，但是需要配合find等命令进行重定向。</p><pre class=" language-bash"><code class="language-bash">$ cpio -ovcB  <span class="token operator">></span> <span class="token punctuation">[</span>file<span class="token operator">|</span>device<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#备份</span>$ cpio -ivcdu <span class="token operator">&lt;</span> <span class="token punctuation">[</span>file<span class="token operator">|</span>device<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#还原</span>$ cpio -ivct  <span class="token operator">&lt;</span> <span class="token punctuation">[</span>file<span class="token operator">|</span>device<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#查看</span>备份会使用到的选项与参数:-o :将数据 copy 输出到文件或装置上-B :让预设的 Blocks 可以增加至 5120 bytes ,预设是 512 bytes <span class="token operator">!</span>这样的好处是可以让大文件的储存速度加快<span class="token punctuation">(</span>请参考 i-nodes 的观念<span class="token punctuation">)</span>还原会使用到的选项与参数:-i :将数据自文件或装置 copy 出来系统当中-d :自动建立目录<span class="token operator">!</span>使用 cpio 所备份的数据内容不见得会在同一层目录中,因此我们必须要让 cpio 在还原时可以建立新目录,此时就得要 -d 选项的帮助<span class="token operator">!</span>-u :自动的将较新的文件覆盖较旧的文件<span class="token operator">!</span>-t :需配合 -i 选项,可用在<span class="token string">"察看"</span>以 cpio 建立的文件或装置的内容一些可共享的选项与参数:-v :让储存的过程中文件名可以在屏幕上显示-c :一种较新的 portable <span class="token function">format</span> 方式储存</code></pre><p>将/boot的文件备份到/tmp/boot.cpio中</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /$ <span class="token function">find</span> boot -print$ <span class="token function">find</span> boot <span class="token operator">|</span> cpio -ovcB <span class="token operator">></span> /tmp/boot.cpio$ ll -h /tmp/boot.cpio-rw-r--r-- 1 jason jason 119M 4月  23 23:13 /tmp/boot.cpio$ <span class="token function">file</span> /tmp/boot/cpio /tmp/boot.cpio: ASCII cpio archive <span class="token punctuation">(</span>pre-SVR4 or odc<span class="token punctuation">)</span></code></pre><p>这里我们一开始是先转入根目录然后操作 <strong><em>因为cpio命令如果加上绝对路径的开头，那解开的时候，就会覆盖掉原本的/boot</em></strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~$ cpio -idvc <span class="token operator">&lt;</span> /tmp/boot.cpio$ ll /root/boot</code></pre><p>cpio命令也可用于磁带</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> / <span class="token operator">|</span> cpio -ovcB <span class="token operator">></span> /dev/st0$ cpio -idvc <span class="token operator">&lt;</span> /dev/st0</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 文件压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下fcitx增添词库</title>
      <link href="/2019/04/17/ubuntu-xia-fcitx-zeng-tian-ci-ku/"/>
      <url>/2019/04/17/ubuntu-xia-fcitx-zeng-tian-ci-ku/</url>
      
        <content type="html"><![CDATA[<p>为了使用atom真的是大费周章，因为atom貌似不是KDE的环境，所以在屏幕下方使用sougoupinyin时，会出现候选框跑到屏幕外面的情况，这就很难受。(这是因为qimpanel不支持这种桌面环境？）</p><p>不管怎样，atom的片段功能实在是好用，所以权衡一下，hello google，goodbye sougou。但是google拼音的词库是依托于fcitx的，词库源很少而且并不好用，所以这里我们就来为fcitx添加词库。</p><h4 id="下载词库"><a href="#下载词库" class="headerlink" title="下载词库"></a>下载词库</h4><p>首先新建一个文件夹来保存我们想要的词库，然后在<a href="https://pinyin.sogou.com/dict/" target="_blank" rel="noopener">搜狗拼音官网</a>下载细胞词库，将下载的词库放入该文件夹中。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ./Doucments$ <span class="token function">mkdir</span> ./dict/$ <span class="token function">cp</span> *.scel ~/Documents/dict/ <span class="token comment" spellcheck="true">#这步操作在下载文件夹下执行</span>$ <span class="token function">rm</span> *.scel <span class="token comment" spellcheck="true">#这步操作在下载文件夹下执行</span></code></pre><p>意外的发现了很多优秀词库啊<br><img src="https://s2.ax1x.com/2019/04/18/ESUjqU.png" alt="ESUjqU.png"></p><h4 id="转为-org-格式"><a href="#转为-org-格式" class="headerlink" title="转为 org 格式"></a>转为 org 格式</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ./Doucments/dict/$ <span class="token function">mkdir</span> org$ <span class="token function">find</span> <span class="token keyword">.</span> -name <span class="token string">'*.scel'</span> -exec scel2org -o org/<span class="token punctuation">{</span><span class="token punctuation">}</span>.org <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span></code></pre><h4 id="合并所有org文件"><a href="#合并所有org文件" class="headerlink" title="合并所有org文件"></a>合并所有org文件</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> dict$ <span class="token function">cd</span> dict$ <span class="token function">cat</span> <span class="token punctuation">..</span>/org/*.scel.org <span class="token operator">></span> 1.org</code></pre><h4 id="复制fcitx的基础词库"><a href="#复制fcitx的基础词库" class="headerlink" title="复制fcitx的基础词库"></a>复制fcitx的基础词库</h4><p>这里说明一下，我之复制了搜狗标准词库，因为fcitx的词库感觉里面的候选词都很鬼畜，但是我也会列出如何复制fcitx的词库。</p><h5 id="准备必要的两个文件"><a href="#准备必要的两个文件" class="headerlink" title="准备必要的两个文件"></a>准备必要的两个文件</h5><p>从这里下载<a href="http://code.google.com/p/fcitx/downloads/list" target="_blank" rel="noopener">http://code.google.com/p/fcitx/downloads/list</a>fcitx-4.xx_dict.rat.gz词库文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> xf fcitx-4.2.7_dict.tar.xz fcitx-4.2.7/data/<span class="token punctuation">{</span>pinyin.tar.gz,gbkpy.org<span class="token punctuation">}</span>$ <span class="token function">tar</span> xf fcitx-4.2.7/data/pinyin.tar.gz$ <span class="token function">mv</span> fcitx-4.2.7/data/gbkpy.org ./</code></pre><h5 id="合并-fcitx-基础词库"><a href="#合并-fcitx-基础词库" class="headerlink" title="合并 fcitx 基础词库"></a>合并 fcitx 基础词库</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> pyPhrase.org <span class="token operator">>></span>1.org</code></pre><p>排序、去重、生成词库</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sort</span> 1.org <span class="token operator">></span>2.org$ <span class="token function">uniq</span> 2.org <span class="token operator">></span>3.org$ createPYMB gbkpy.org 3.orgGroups: 412Start Loading Phrase<span class="token punctuation">..</span>.225832 Phrases, 225831 Converted<span class="token operator">!</span>Writing Phrase <span class="token function">file</span> <span class="token punctuation">..</span>.OK<span class="token operator">!</span></code></pre><h5 id="结果文件"><a href="#结果文件" class="headerlink" title="结果文件:"></a>结果文件:</h5><pre><code>pyERROR 词库中重复或有其它问题条目，有兴趣可参考，没事直接忽略pyPhrase.ok 除错后的无错的 org 格式词库，可取代 3.org 而保留供下次使用pyphrase.mb 最终词库，必须，用于覆盖原文件pybase.mb 配套的字码库，必须，用于覆盖原文件</code></pre><h4 id="覆盖本地的词库文件"><a href="#覆盖本地的词库文件" class="headerlink" title="覆盖本地的词库文件"></a>覆盖本地的词库文件</h4><p>解压后，复制两 .mb 文件至 /usr/share/fcitx/data/ 或 /usr/share/fcitx/pinyin/ 覆盖原文件，或置于 ~/.config/fcitx/ 或 ~/.config/fcitx/pinyin/ 之中。这里要注意的是本地词库中也有同名的两个文件所以，一定要记得加上-f选项，否则不会生效。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">su</span>$ <span class="token function">cp</span> -f pybase.mb /usr/share/fcitx/pinyin/$ <span class="token function">cp</span> -f pyphrase.mb /usr/share/fcitx/pinyin/</code></pre><p>然后就可以reboot重启，或者kill掉fcitx进程并重启。</p><p>重启之后，对照<code>3.org</code>文件的内容，打几个词自看看是否一致，如果候选词出现就是配置完成了！</p><h4 id="开启云拼音"><a href="#开启云拼音" class="headerlink" title="开启云拼音"></a>开启云拼音</h4><p>本地词库再丰富，也不如网络上实时更新的云词库内容的更新速度。</p><p>终端安装插件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fcitx-module-cloudpinyin$ fcitx-configtool</code></pre><p>打开以后将源换到百度就可以正常使用了。<br><img src="https://s2.ax1x.com/2019/04/18/ES0Dyt.png" alt="ES0Dyt.png"></p><h4 id="rime"><a href="#rime" class="headerlink" title="rime"></a>rime</h4><p>发现了一个十分好用的输入法</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fcitx-rime</code></pre><p>就可以使用了，中州韵真香。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代编译原理-C语言描述》（5）- 语义分析</title>
      <link href="/2019/04/16/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-5/"/>
      <url>/2019/04/16/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>语义的（se-man-tic）:与语言表达的含义相关的。<br>—-韦氏词典</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虎书 </tag>
            
            <tag> 编译原理 </tag>
            
            <tag> 现代编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睡眠排序</title>
      <link href="/2019/04/14/shui-mian-pai-xu/"/>
      <url>/2019/04/14/shui-mian-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>在SS算法中，我们为输入数组中的每个元素创建不同的线程，然后每个线程休眠一段时间，该时间量与相应的数组元素的值成比例。</p><p>因此，最少睡眠时间的线程将首先被唤醒并且打印出来，然后是第二最小元素，依此类推。最长的元素在最后醒来，然后元素在最后被打印出来。因此输出是有序的。</p><p>所有这些多线程过程都发生在后台和操作系统的核心。我们对背景中发生的事情一无所知，因此这是一种“神秘”的排序算法。</p><p><strong>示例</strong>：假设(为方便起见)我们的计算机速度需要3秒才能完成对所有元素的排序：</p><pre><code>INPUT: 8 2 93s: sleep 86s: sleep 28s: &quot;2&quot; (2 wakes up so print it)9s: sleep 911s: &quot;8&quot; (8 wakes up so print it)18s: &quot;9&quot; (9 wakes up so print it)OUTPUT: 2 8 9</code></pre><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>为了实现sleep排序，我们需要调用多线程函数，例如<code>_beginthread()</code>和<code>WaitForMultipleObjects()</code>。因此我们需要包含<code>windows.h</code>来使用这些函数。我们必须在PC上运行它(注意这段代码是针对WINDOWS而不是针对LINUX)。</p><p>要执行睡眠排序，我们需要为输入数组中的每个值创建线程。我们使用<code>_beginthread()</code>函数执行此操作 。</p><p>在每个线程中，我们分配两个指令：</p><ul><li><p>睡眠：将此线程休眠直到<code>arr[i]</code>毫秒(其中<code>arr[i]</code>是与该线程关联的数组元素)。我们使用<code>Sleep()</code>函数执行此操作。<code>Sleep(n)</code>函数暂停与此线程关联的活动，直到’n’毫秒。因此，如果我们写<code>Sleep(1000)</code>，那么这意味着线程将休眠1秒(1000毫秒= 1秒)</p></li><li><p>打印：当线程在睡眠后’唤醒’然后打印数组元素与此线程关联的<code>arr[i]</code>。</p></li></ul><p>创建线程后，我们处理这些线程。我们使用<code>WaitForMultipleObjects()</code>来做到这一点。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// C implementation of Sleep Sort</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;process.h></span></span><span class="token comment" spellcheck="true">// This is the instruction set of a thread</span><span class="token comment" spellcheck="true">// So in these threads, we "sleep" for a particular</span><span class="token comment" spellcheck="true">// amount of time and then when it wakes up</span><span class="token comment" spellcheck="true">// the number is printed out</span><span class="token keyword">void</span> <span class="token function">routine</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// typecasting from void to int</span>    <span class="token comment" spellcheck="true">// Sleeping time is proportional to the number</span>    <span class="token comment" spellcheck="true">// More precisely this thread sleep for 'n' milliseconds</span>    <span class="token function">Sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// After the sleep, print the number</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* A function that performs sleep sort_beginthread() is a C run-time library call that creates a new'thread' for all the integers in the array and returns thatthread.Each of the 'thread' sleeps for a time proportional to thatinteger and print it after waking.We pass three parameters to _beginthread :-1) start_address --> start address of the routine/function                    which creates a new thread2) stack_size --> Stack Size of the new thread (which is 0)3) arglist --> Address of the argument to be passedThe return value of _beginthread() function is a handle to thethread which is created. So we must accept is using the datatype-'HANDLE' which is included in windows.h header'HANDLE' datatype is used to represent an event/thread/process etcSo 'HANDLE' datatype is used to define a threadWe store the threads in an array - threads[] which is declaredusing 'HANDLE' datatype.WaitForMultipleObjects() is a function that processes the threadsand has four arguments-1) no_of_threads --> Number of threads to be processed2) array_of_threads --> This is the array of threads which should be                        processed. This array must be of the type                        'HANDLE'3) TRUE or FALSE --> We pass TRUE if we want all the threads in the                    array to be processed4) time_limit --> The threads will be processed until this time limit                is crossed. So if we pass a 0 then no threads will                be processed, otherwise if we pass an INFINITE, then                the program will stop only when all the threads                are processed. We can put a cap on the execution                time of the program by passing the desired time                limit */</span><span class="token keyword">void</span> <span class="token function">sleepSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// An array of threads, one for each of the elements</span>    <span class="token comment" spellcheck="true">// in the input array</span>    HANDLE threads<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create the threads for each of the input array elements</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span><span class="token function">_beginthread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>routine<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Process these threads</span>    <span class="token function">WaitForMultipleObjects</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> threads<span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span> INFINITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Driver program to test above functions</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Doesn't work for negative numbers</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleepSort</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h6><p>1)此算法不适用于负数，因为线程无法在负时间内休眠。</p><p>2)由于该算法依赖于输入元素，因此输入数组中的大量数字导致该算法急剧减速(因为与该数字相关联的线程必须长时间休眠)。因此，即使输入数组元素仅包含2个元素，例如 -{1,100000000}，我们也必须等待更长的持续时间才能进行排序。</p><p>3)该算法每次都不产生正确的排序输出。这通常发生在输入数组中非常大的数字左边有一个非常小的数字时。<br>例如 - {34,23,1,12253,9}。<br>睡眠排序后的输出为{9,1,23,34,1223}</p><p>当输入数组最初反向排序时，也会出现错误的输出，例如 - {10,9,8,7,6,5}。</p><p>这种意外输出的原因是因为扫描每个元素以及一些其他OS操作(例如将每个线程插入优先级队列中进行调度)之间需要花费一些时间。我们不能简单地忽略这些事情所花费的时间。</p><p>我们使用下面的例子来描述这种情况，假设(为方便起见)我们的计算机速度需要3秒才能完成对所有元素的排序：</p><pre><code>INPUT: 10 9 8 7 6 53s: sleep 106s: sleep 99s: sleep 812s: sleep 713s: &quot;10&quot; (10 wakes up so print it)15s: sleep 615s: &quot;9&quot; (9 wakes up so print it)17s: &quot;8&quot; (8 wakes up so print it)18s: sleep 519s: &quot;7&quot; (7 wakes up so print it)21s: &quot;6&quot; (6 wakes up so print it)23s: &quot;5&quot; (5 wakes up so print it)OUTPUT: 10 9 8 7 6 5</code></pre><p>以上输出只是一个例子。<br>显然，现代计算机计算机并不是那么慢(需要3秒才能扫描每个元素)。<br>实际上，上面的输入在现代计算机上运行睡眠排序会产生输出 - {9,5,7,10,8,6}</p><h5 id="如何解决这个问题？"><a href="#如何解决这个问题？" class="headerlink" title="如何解决这个问题？"></a>如何解决这个问题？</h5><p>1)我们可以通过对新输出重复进行睡眠排序来解决此问题，直到输出变为排序。每次它都会更准确地对元素进行排序。</p><p>2)由于其他操作系统工作所花费的时间和扫描每个元素所发生的错误输出。</p><p>在我们的程序中，我们使用了函数<code>Sleep(arr[i])</code>，这意味着与数组元素相关联的每个线程都会休眠<code>arr[i]</code>毫秒。由于毫秒是一个非常小的数量，其他OS任务可能比<code>arr[i]</code>毫秒花费更多的时间，这最终可能导致睡眠排序错误。将睡眠时间增加10倍就可以提供排序输出，因为OS任务将在这么多睡眠之间完成所有任务，因此不会产生任何错误。</p><p>如果我们使用<code>Sleep(10 * arr[i])</code>而不是<code>Sleep(arr[i])</code>那么我们肯定会获得比后者更精确的输出。例如，输入数组 - {10,9,8,7,6,5}将给出正确的排序输出 - {5,6,7,8,9,10}如果我们使用<code>Sleep(10 * arr[i])</code>而不仅仅是睡眠<code>(arr[i])</code>秒。</p><p>但是，对于某些测试用例，<code>Sleep(10 * arr[i])</code>仍然可能会给出错误的结果。为了使它更精确，增加睡眠时间，比如<code>Slepp(20 * arr[i])</code>。</p><p>因此，结论就是睡眠时间越长，结果越准确。(听起来很有趣，嗯？)。但同样会增加此算法的运行时间。</p><h5 id="时间复杂性"><a href="#时间复杂性" class="headerlink" title="时间复杂性"></a>时间复杂性</h5><p>尽管关于睡眠排序的时间复杂性存在许多不同的观点，但我们可以使用以下推理来估计时间复杂度</p><p>由于<code>Sleep()</code>函数和创建多个线程是由OS在内部使用优先级队列(用于调度目的)完成的。因此，在优先级队列中插入所有数组元素需要 $O(Nlog N)$ 的时间。此外，只有在处理完所有线程时才获得输出，即当所有元素都被唤醒时。因为它需要 $O(arr[i])$ 时间来唤醒第i个数组元素的线程。因此，唤醒阵列的最大元素需要最多 $O(max(输入))$ 。因此，总时间复杂度可以假设为 $O(NlogN + max(输入))$ ，<br>其中，N =输入数组中元素的数量，输入=输入数组元素</p><h5 id="辅助空间"><a href="#辅助空间" class="headerlink" title="辅助空间"></a>辅助空间</h5><p>所有操作都由OS的内部优先级队列完成。因此可以忽略辅助空间。</p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>睡眠排序与操作系统的关系比任何其他排序算法都要多。这种排序算法是OS完成的多线程和调度的完美演示。</p><h5 id="java-implementation"><a href="#java-implementation" class="headerlink" title="java implementation"></a>java implementation</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SleepSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        SleepSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>nums<span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d   "</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        Sleeper<span class="token punctuation">.</span>idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        Sleeper<span class="token punctuation">.</span>output<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//[1]</span>            <span class="token keyword">new</span> <span class="token class-name">Sleeper</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//[2]</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Sleeper<span class="token punctuation">.</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sleeper</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> idx<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sleep_time<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Sleeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sleep_time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Sleeper</span><span class="token punctuation">(</span><span class="token keyword">int</span> sleep_time<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sleep_time<span class="token operator">=</span>sleep_time<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sleep_time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        output<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>sleep_time<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Plan &amp; Diet</title>
      <link href="/2019/04/09/the-plan-diet/"/>
      <url>/2019/04/09/the-plan-diet/</url>
      
        <content type="html"><![CDATA[<p>数据：</p><table><thead><tr><th>体重</th><th>身高</th><th>体脂</th><th><a href="https://www.calculator.net/carbohydrate-calculator.html" target="_blank" rel="noopener">建议碳水</a></th></tr></thead><tbody><tr><td>67kg</td><td>175cm</td><td></td><td>276g-335g-379g</td></tr></tbody></table><p>训练表：</p><table><thead><tr><th>日期</th><th align="center">训练内容</th><th>饮食</th></tr></thead><tbody><tr><td>Day1</td><td align="center">顺风旗 60 + 举腿 120</td><td>Normal</td></tr><tr><td>Day2</td><td align="center">倒立20+倒立撑120</td><td>Normal</td></tr><tr><td>Day3</td><td align="center">击掌双力臂 20 + 负重双力臂 20 +  引体向上 65</td><td>Energy</td></tr><tr><td>Day4</td><td align="center">单杠臂屈伸 12*10 +爆发俯卧撑 30</td><td>Energy</td></tr><tr><td>Day5</td><td align="center">Burpee 200 + 慢跑</td><td>Normal</td></tr><tr><td>Day6</td><td align="center">引体向上 12*10 + 反手12*1 + 挺身引体12*1</td><td>Energy</td></tr><tr><td>Day7</td><td align="center">单杠臂屈伸 12 *10 + 窄距 12*2</td><td>Energy</td></tr></tbody></table><p>饮食表：</p><table><thead><tr><th>类别</th><th>早餐</th><th>午餐</th><th>晚餐</th><th>碳水统计</th><th>蛋白统计</th></tr></thead><tbody><tr><td>Normal</td><td>鸡胸肉100g + 黑麦面包100g（一把面条）</td><td>鸡胸肉100g + 164g面条</td><td>鸡胸肉100g + 164g面条</td><td>50g + 115g + 115g = 280g</td><td>30.7g×3+20g=112.1</td></tr><tr><td>Energy</td><td>鸡胸肉100g + 黑麦面包100g</td><td>鸡胸肉100g + 200g面条</td><td>鸡胸肉100g + 200g面条</td><td>50g + 140g + 140g + 15g = 350g</td><td>30.7g×3+24g=116.1</td></tr><tr><td>Normal</td><td>鸡胸肉100g + 燕麦90g（一把面条）</td><td>鸡胸肉100g + 205燕麦</td><td>鸡胸肉100g + 205g燕麦</td><td>50g + 115g + 115g = 280g</td><td>30.7g×3+20g=112.1</td></tr><tr><td>Energy</td><td>鸡胸肉100g + 燕麦90g</td><td>鸡胸肉100g + 250g面条</td><td>鸡胸肉100g + 250g面条</td><td>50g + 140g + 140g + 15g = 350g</td><td>30.7g×3+24g=116.1</td></tr><tr><td>Whatever</td><td>whatever</td><td>whatever</td><td>whatever</td><td></td><td></td></tr></tbody></table><p>食物碳水表：</p><table><thead><tr><th>名称</th><th>碳水/100g</th></tr></thead><tbody><tr><td>面条</td><td>70g</td></tr><tr><td>黑麦面包</td><td>50g</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Workout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Calisthenics </tag>
            
            <tag> Diet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代编译原理-C语言描述》（4）- 抽象语法</title>
      <link href="/2019/04/09/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-4/"/>
      <url>/2019/04/09/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-4/</url>
      
        <content type="html"><![CDATA[<h3 id="第四章-抽象语法"><a href="#第四章-抽象语法" class="headerlink" title="第四章 抽象语法"></a>第四章 抽象语法</h3><blockquote><p>抽象的(ab-stract):从所有具体实例中提取出来的。<br>—-韦氏词典</p></blockquote><h4 id="语义动作"><a href="#语义动作" class="headerlink" title="语义动作"></a>语义动作</h4><p>语法分析器中的语义动作（semantic action），可以作用于正在分析的短语。</p><ul><li>对于递归下降分析器来说，语义动作是分散在实现语法分析的控制流中</li><li>对于遵循Yacc说明的语法分析器，语义动作是附带在文法产生式之后的c程序代码</li></ul><h5 id="递归下降"><a href="#递归下降" class="headerlink" title="递归下降"></a>递归下降</h5><p>对于递归下降语法分析器，语义动作是语法分析函数的返回值，或是语法分析函数的副作用，抑或是兼而有之。</p><p>每个非终结符和终结符（type）都关联一种语义值，语义值代表了由这个符号导出的短语。</p><p>对于消除左递归的情况，我们通过将左操作数作为参数传递给下一个语法分析函数的方法来解决。</p><p>也就是说我们为了消除左递归，必须要引入新的符号，但是新引入的符号的产生式不一定符合运算符的操作规范，于是我们必须要将上一层分析中的左操作数传递到下一层并返回。</p><h5 id="Yacc生成的分析器"><a href="#Yacc生成的分析器" class="headerlink" title="Yacc生成的分析器"></a>Yacc生成的分析器</h5><p>对于遵循Yacc说明的语法分析器,语法动作是附加在产生式之后的一段c代码。当Yacc利用，某一条规则进行归约时，就会执行其后的语义动作。例如文法3-13Yacc语法分析器：</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span> declarations of yylex and yyerror <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num<span class="token punctuation">;</span> string id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>num<span class="token operator">></span> INT<span class="token operator">%</span>token <span class="token operator">&lt;</span>id<span class="token operator">></span> ID<span class="token operator">%</span>type <span class="token operator">&lt;</span>num<span class="token operator">></span> exp<span class="token operator">%</span>start exp<span class="token operator">%</span>left PLUS MINUS<span class="token operator">%</span>left TIMES<span class="token operator">%</span>left UMINUS<span class="token operator">%</span><span class="token operator">%</span>exp <span class="token punctuation">:</span> INT             <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> exp PLUS exp    <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">+</span> $<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> exp MINUS exp   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">-</span> $<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> exp TIMES exp   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">*</span> $<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> MINUS exp   <span class="token operator">%</span>prec UMINUS <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token operator">-</span> $<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Yacc中语义动作的使用是用<code>$i</code>来引用第i个右部符号的语义值，它为左部非终结符产生的值可以赋给<code>$$</code>。<code>%union</code>说明了各种可能携带的语义值类型，每个非终结符通过<code>&lt;variant&gt;</code>，注释指明该非终结符应该使用哪一个<code>%union</code>声明中的形式。</p><p>遵循Yacc说明的语法分析器会维护一个 <strong><em>状态栈</em></strong> 和一个 <strong><em>语义值栈</em></strong> 来实现对语义值的操作，在原来简单分析栈的基础上增添了一个与分析栈符号一一对应的语义值栈。在语法分析器执行一个归约动作时，它会从一个简单栈中弹出k个字符，并将归约得到的非终结符压栈，对于语义值栈的操作也是如此，从语义值栈弹出k个语义值，并将执行语义动作c代码返回的语义值重新压栈。</p><p>如下图：</p><p>终结符携带的语义值是无意义的占位符。</p><h5 id="语义动作的解释器"><a href="#语义动作的解释器" class="headerlink" title="语义动作的解释器"></a>语义动作的解释器</h5><p>上面的程序设计语言的例子中，并没有语义动作能够影响全局的副作用，所以右部符号的求值顺序并不能影响最终的结果。</p><p>但是我们可以知道，LR分析是自底向上，从左至右的遍历语法分析树，即后序遍历的方式来执行归约和语义动作。利用这一特性，我们可以编写出带有全局副作用的语义动作，并且可以明确了解副作用的发生顺序。</p><p>下面的例子是绪论中直线式程序设计的解释器。通过使用一个符号表的全局变量：</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> table <span class="token operator">*</span>Table_<span class="token punctuation">;</span>Table_ <span class="token punctuation">{</span>string id<span class="token punctuation">;</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span> Table_ tail<span class="token punctuation">}</span><span class="token punctuation">;</span>Table_ <span class="token function">Table</span><span class="token punctuation">(</span>string id<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">struct</span> table <span class="token operator">*</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>Table_ table<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lookup</span><span class="token punctuation">(</span>Table_ table<span class="token punctuation">,</span> string id<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">assert</span><span class="token punctuation">(</span>table<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">==</span>table<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> table<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">lookup</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tail<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Table_ <span class="token operator">*</span>tabptr<span class="token punctuation">,</span>string id<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span>tabptr <span class="token operator">=</span> <span class="token function">Table</span><span class="token punctuation">(</span>id <span class="token punctuation">,</span>value<span class="token punctuation">,</span> <span class="token operator">*</span>tabptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num<span class="token punctuation">;</span>string id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>num<span class="token operator">></span> INT<span class="token punctuation">;</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>id<span class="token operator">></span> Id<span class="token operator">%</span>token ASSIGN PRINT LPAREN RPAREN<span class="token operator">%</span>type <span class="token operator">&lt;</span>num<span class="token operator">></span> exp<span class="token operator">%</span>right SEMICOLON<span class="token operator">%</span>left PLUS MINUS<span class="token operator">%</span>left TIMES DIV<span class="token operator">%</span>start prog<span class="token operator">%</span><span class="token operator">%</span>prog<span class="token punctuation">:</span> stmstm<span class="token punctuation">:</span> stm SEMICOLON stmstm<span class="token punctuation">:</span> ID ASSIGN exp            <span class="token punctuation">{</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">,</span>ID<span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>stm<span class="token punctuation">:</span> PRINT LPAREN exps RPAREN <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exps<span class="token punctuation">:</span> exp                     <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exps<span class="token punctuation">:</span> exps COMMA exp          <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> $<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> INT                      <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> ID                       <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">lookup</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> exp PLUS exp             <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">1</span><span class="token operator">+</span>$<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> exp MINUS exp            <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">1</span><span class="token operator">-</span>$<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> exp TIMES exp            <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">1</span><span class="token operator">*</span>$<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> exp DIV exp              <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">1</span><span class="token operator">/</span>$<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> stm COMMA exp            <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp<span class="token punctuation">:</span> LPAREN exp RPAREN        <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="抽象语法分析树"><a href="#抽象语法分析树" class="headerlink" title="抽象语法分析树"></a>抽象语法分析树</h4><p>使用上述的方法实现一个编译器的语法分析器完全可行，但是为了方便维护，建议将语法分析和语义动作（类型检查和翻译成机器代码）分开处理。所以我们使用语法分析器生成语法分析树，编译器在较后的阶段对其进行遍历。这样的一颗语法分析树称为具体分析树（concrete parse tree），表示源语言的具体语法（concrete syntax）。</p><p>语法树的结构对文法的依赖程度很高，在消除二义性等过程中引入的新产生式，都因该限制在语法分析阶段。</p><p><strong><em>抽象语法abstract syntax</em></strong> 建立了一个接口，这样语义分析阶段就不受文法二义性的困扰，因为我们提经有了一个语法树</p><p>直线式程序设计语言的抽象语法构造器</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"absyn.h"</span></span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num<span class="token punctuation">;</span> string id<span class="token punctuation">;</span> A_stm stm<span class="token punctuation">;</span> A_exp exp<span class="token punctuation">;</span>A_expList expList<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>num<span class="token operator">></span> INT<span class="token operator">%</span>token <span class="token operator">&lt;</span>id<span class="token operator">></span> ID<span class="token operator">%</span>token ASSIGN PRINT LPAREN RPAREN<span class="token operator">%</span>type <span class="token operator">&lt;</span>stm<span class="token operator">></span> stm prog<span class="token operator">%</span>type <span class="token operator">&lt;</span>exp<span class="token operator">></span> exp<span class="token operator">%</span>type <span class="token operator">&lt;</span>expList<span class="token operator">></span> exps<span class="token operator">%</span>left SEMICOLON<span class="token operator">%</span>left PLUS MINUS<span class="token operator">%</span>left TIMES DIV<span class="token operator">%</span>start prog<span class="token operator">%</span><span class="token operator">%</span>prog<span class="token punctuation">:</span> stm <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>stm <span class="token punctuation">:</span> stm SEMICOLON stm <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_CompoundStm</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>stm <span class="token punctuation">:</span> ID ASSIGN exp <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_AssignStm</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>stm <span class="token punctuation">:</span> PRINT LPAREN exps RPAREN  <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_PrintStm</span><span class="token punctuation">(</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exps<span class="token punctuation">:</span> exp <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_ExpList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exps<span class="token punctuation">:</span> exp COMMA exps <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_ExpList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> INT <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_NumExp</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> ID <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> exp PLUS exp <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_OpExp</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>A_plus<span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> exp MINUS exp <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_OpExp</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>A_minus<span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> exp TIMES exp <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_OpExp</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>A_times<span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> exp DIV exp <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_OpExp</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>A_div<span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> stm COMMA exp <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_EsepExp</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> LPAREN exp RPAREN <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h5><p>在一个只有一次pass的编译器中，词法分析，语法分析和语义分析，都是同时进行的。词法分析器会保存有一个表示当前位置的全局变量。</p><p>但是在使用抽象语法树的编译器中，在语义分析开始的时候，词法分析就已经到达文件尾，所以应当记住抽象语法树的每个节点在源文件中的位置，以防这个节点发生语义错误。</p><p>所以抽象语法结构上都带有pos域，pos域指明了导出抽象语法树的字符在源程序中对应的位置。Bison语法分析器可以做到这一点</p><h5 id="Tiger的抽象语法"><a href="#Tiger的抽象语法" class="headerlink" title="Tiger的抽象语法"></a>Tiger的抽象语法</h5><p>Tiger的抽象语法:</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * absyn.h - Abstract Syntax Header (Chapter 4) * * All types and functions declared in this header file begin with "A_" * Linked list types end with "..list" */</span><span class="token comment" spellcheck="true">/* Type Definitions */</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> A_pos<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_var_ <span class="token operator">*</span>A_var<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_exp_ <span class="token operator">*</span>A_exp<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_dec_ <span class="token operator">*</span>A_dec<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_ty_ <span class="token operator">*</span>A_ty<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_decList_ <span class="token operator">*</span>A_decList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_expList_ <span class="token operator">*</span>A_expList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_field_ <span class="token operator">*</span>A_field<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_fieldList_ <span class="token operator">*</span>A_fieldList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_fundec_ <span class="token operator">*</span>A_fundec<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_fundecList_ <span class="token operator">*</span>A_fundecList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_namety_ <span class="token operator">*</span>A_namety<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_nametyList_ <span class="token operator">*</span>A_nametyList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_efield_ <span class="token operator">*</span>A_efield<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_efieldList_ <span class="token operator">*</span>A_efieldList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>A_plusOp<span class="token punctuation">,</span> A_minusOp<span class="token punctuation">,</span> A_timesOp<span class="token punctuation">,</span> A_divideOp<span class="token punctuation">,</span>         A_eqOp<span class="token punctuation">,</span> A_neqOp<span class="token punctuation">,</span> A_ltOp<span class="token punctuation">,</span> A_leOp<span class="token punctuation">,</span> A_gtOp<span class="token punctuation">,</span> A_geOp<span class="token punctuation">}</span> A_oper<span class="token punctuation">;</span><span class="token keyword">struct</span> A_var_       <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>A_simpleVar<span class="token punctuation">,</span> A_fieldVar<span class="token punctuation">,</span> A_subscriptVar<span class="token punctuation">}</span> kind<span class="token punctuation">;</span>        A_pos pos<span class="token punctuation">;</span>    <span class="token keyword">union</span> <span class="token punctuation">{</span>S_symbol simple<span class="token punctuation">;</span>           <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_var var<span class="token punctuation">;</span>               S_symbol sym<span class="token punctuation">;</span><span class="token punctuation">}</span> field<span class="token punctuation">;</span>           <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_var var<span class="token punctuation">;</span>               A_exp exp<span class="token punctuation">;</span><span class="token punctuation">}</span> subscript<span class="token punctuation">;</span>         <span class="token punctuation">}</span> u<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_exp_      <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>A_varExp<span class="token punctuation">,</span> A_nilExp<span class="token punctuation">,</span> A_intExp<span class="token punctuation">,</span> A_stringExp<span class="token punctuation">,</span> A_callExp<span class="token punctuation">,</span>           A_opExp<span class="token punctuation">,</span> A_recordExp<span class="token punctuation">,</span> A_seqExp<span class="token punctuation">,</span> A_assignExp<span class="token punctuation">,</span> A_ifExp<span class="token punctuation">,</span>           A_whileExp<span class="token punctuation">,</span> A_forExp<span class="token punctuation">,</span> A_breakExp<span class="token punctuation">,</span> A_letExp<span class="token punctuation">,</span> A_arrayExp<span class="token punctuation">}</span> kind<span class="token punctuation">;</span>       A_pos pos<span class="token punctuation">;</span>       <span class="token keyword">union</span> <span class="token punctuation">{</span>A_var var<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* nil; - needs only the pos */</span>          <span class="token keyword">int</span> intt<span class="token punctuation">;</span>          string stringg<span class="token punctuation">;</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>S_symbol func<span class="token punctuation">;</span> A_expList args<span class="token punctuation">;</span><span class="token punctuation">}</span> call<span class="token punctuation">;</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_oper oper<span class="token punctuation">;</span> A_exp left<span class="token punctuation">;</span> A_exp right<span class="token punctuation">;</span><span class="token punctuation">}</span> op<span class="token punctuation">;</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>S_symbol typ<span class="token punctuation">;</span> A_efieldList fields<span class="token punctuation">;</span><span class="token punctuation">}</span> record<span class="token punctuation">;</span>          A_expList seq<span class="token punctuation">;</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_var var<span class="token punctuation">;</span> A_exp exp<span class="token punctuation">;</span><span class="token punctuation">}</span> assign<span class="token punctuation">;</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_exp test<span class="token punctuation">,</span> then<span class="token punctuation">,</span> elsee<span class="token punctuation">;</span><span class="token punctuation">}</span> iff<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* elsee is optional */</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_exp test<span class="token punctuation">,</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span> whilee<span class="token punctuation">;</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>S_symbol var<span class="token punctuation">;</span> A_exp lo<span class="token punctuation">,</span>hi<span class="token punctuation">,</span>body<span class="token punctuation">;</span> bool escape<span class="token punctuation">;</span><span class="token punctuation">}</span> forr<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* breakk; - need only the pos */</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_decList decs<span class="token punctuation">;</span> A_exp body<span class="token punctuation">;</span><span class="token punctuation">}</span> let<span class="token punctuation">;</span>          <span class="token keyword">struct</span> <span class="token punctuation">{</span>S_symbol typ<span class="token punctuation">;</span> A_exp size<span class="token punctuation">,</span> init<span class="token punctuation">;</span><span class="token punctuation">}</span> array<span class="token punctuation">;</span>        <span class="token punctuation">}</span> u<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_dec_    <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>A_functionDec<span class="token punctuation">,</span> A_varDec<span class="token punctuation">,</span> A_typeDec<span class="token punctuation">}</span> kind<span class="token punctuation">;</span>     A_pos pos<span class="token punctuation">;</span>     <span class="token keyword">union</span> <span class="token punctuation">{</span>A_fundecList function<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* escape may change after the initial declaration */</span>        <span class="token keyword">struct</span> <span class="token punctuation">{</span>S_symbol var<span class="token punctuation">;</span> S_symbol typ<span class="token punctuation">;</span> A_exp init<span class="token punctuation">;</span> bool escape<span class="token punctuation">;</span><span class="token punctuation">}</span> var<span class="token punctuation">;</span>        A_nametyList type<span class="token punctuation">;</span>      <span class="token punctuation">}</span> u<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_ty_ <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>A_nameTy<span class="token punctuation">,</span> A_recordTy<span class="token punctuation">,</span> A_arrayTy<span class="token punctuation">}</span> kind<span class="token punctuation">;</span>          A_pos pos<span class="token punctuation">;</span>          <span class="token keyword">union</span> <span class="token punctuation">{</span>S_symbol name<span class="token punctuation">;</span>             A_fieldList record<span class="token punctuation">;</span>             S_symbol array<span class="token punctuation">;</span>           <span class="token punctuation">}</span> u<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Linked lists and nodes of lists */</span><span class="token keyword">struct</span> A_field_ <span class="token punctuation">{</span>S_symbol name<span class="token punctuation">,</span> typ<span class="token punctuation">;</span> A_pos pos<span class="token punctuation">;</span> bool escape<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_fieldList_ <span class="token punctuation">{</span>A_field head<span class="token punctuation">;</span> A_fieldList tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_expList_ <span class="token punctuation">{</span>A_exp head<span class="token punctuation">;</span> A_expList tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_fundec_ <span class="token punctuation">{</span>A_pos pos<span class="token punctuation">;</span>                 S_symbol name<span class="token punctuation">;</span> A_fieldList params<span class="token punctuation">;</span>         S_symbol result<span class="token punctuation">;</span> A_exp body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_fundecList_ <span class="token punctuation">{</span>A_fundec head<span class="token punctuation">;</span> A_fundecList tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_decList_ <span class="token punctuation">{</span>A_dec head<span class="token punctuation">;</span> A_decList tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_namety_ <span class="token punctuation">{</span>S_symbol name<span class="token punctuation">;</span> A_ty ty<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_nametyList_ <span class="token punctuation">{</span>A_namety head<span class="token punctuation">;</span> A_nametyList tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_efield_ <span class="token punctuation">{</span>S_symbol name<span class="token punctuation">;</span> A_exp exp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A_efieldList_ <span class="token punctuation">{</span>A_efield head<span class="token punctuation">;</span> A_efieldList tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Function Prototypes */</span>A_var <span class="token function">A_SimpleVar</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol sym<span class="token punctuation">)</span><span class="token punctuation">;</span>A_var <span class="token function">A_FieldVar</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_var var<span class="token punctuation">,</span> S_symbol sym<span class="token punctuation">)</span><span class="token punctuation">;</span>A_var <span class="token function">A_SubscriptVar</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_var var<span class="token punctuation">,</span> A_exp exp<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_VarExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_var var<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_NilExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_IntExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_StringExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> string s<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_CallExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol func<span class="token punctuation">,</span> A_expList args<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_OpExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_oper oper<span class="token punctuation">,</span> A_exp left<span class="token punctuation">,</span> A_exp right<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_RecordExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol typ<span class="token punctuation">,</span> A_efieldList fields<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_SeqExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_expList seq<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_AssignExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_var var<span class="token punctuation">,</span> A_exp exp<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_IfExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_exp test<span class="token punctuation">,</span> A_exp then<span class="token punctuation">,</span> A_exp elsee<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_WhileExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_exp test<span class="token punctuation">,</span> A_exp body<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_ForExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol var<span class="token punctuation">,</span> A_exp lo<span class="token punctuation">,</span> A_exp hi<span class="token punctuation">,</span> A_exp body<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_BreakExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_LetExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_decList decs<span class="token punctuation">,</span> A_exp body<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_ArrayExp</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol typ<span class="token punctuation">,</span> A_exp size<span class="token punctuation">,</span> A_exp init<span class="token punctuation">)</span><span class="token punctuation">;</span>A_dec <span class="token function">A_FunctionDec</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_fundecList function<span class="token punctuation">)</span><span class="token punctuation">;</span>A_dec <span class="token function">A_VarDec</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol var<span class="token punctuation">,</span> S_symbol typ<span class="token punctuation">,</span> A_exp init<span class="token punctuation">)</span><span class="token punctuation">;</span>A_dec <span class="token function">A_TypeDec</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_nametyList type<span class="token punctuation">)</span><span class="token punctuation">;</span>A_ty <span class="token function">A_NameTy</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol name<span class="token punctuation">)</span><span class="token punctuation">;</span>A_ty <span class="token function">A_RecordTy</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> A_fieldList record<span class="token punctuation">)</span><span class="token punctuation">;</span>A_ty <span class="token function">A_ArrayTy</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol array<span class="token punctuation">)</span><span class="token punctuation">;</span>A_field <span class="token function">A_Field</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol name<span class="token punctuation">,</span> S_symbol typ<span class="token punctuation">)</span><span class="token punctuation">;</span>A_fieldList <span class="token function">A_FieldList</span><span class="token punctuation">(</span>A_field head<span class="token punctuation">,</span> A_fieldList tail<span class="token punctuation">)</span><span class="token punctuation">;</span>A_expList <span class="token function">A_ExpList</span><span class="token punctuation">(</span>A_exp head<span class="token punctuation">,</span> A_expList tail<span class="token punctuation">)</span><span class="token punctuation">;</span>A_fundec <span class="token function">A_Fundec</span><span class="token punctuation">(</span>A_pos pos<span class="token punctuation">,</span> S_symbol name<span class="token punctuation">,</span> A_fieldList params<span class="token punctuation">,</span> S_symbol result<span class="token punctuation">,</span>          A_exp body<span class="token punctuation">)</span><span class="token punctuation">;</span>A_fundecList <span class="token function">A_FundecList</span><span class="token punctuation">(</span>A_fundec head<span class="token punctuation">,</span> A_fundecList tail<span class="token punctuation">)</span><span class="token punctuation">;</span>A_decList <span class="token function">A_DecList</span><span class="token punctuation">(</span>A_dec head<span class="token punctuation">,</span> A_decList tail<span class="token punctuation">)</span><span class="token punctuation">;</span>A_namety <span class="token function">A_Namety</span><span class="token punctuation">(</span>S_symbol name<span class="token punctuation">,</span> A_ty ty<span class="token punctuation">)</span><span class="token punctuation">;</span>A_nametyList <span class="token function">A_NametyList</span><span class="token punctuation">(</span>A_namety head<span class="token punctuation">,</span> A_nametyList tail<span class="token punctuation">)</span><span class="token punctuation">;</span>A_efield <span class="token function">A_Efield</span><span class="token punctuation">(</span>S_symbol name<span class="token punctuation">,</span> A_exp exp<span class="token punctuation">)</span><span class="token punctuation">;</span>A_efieldList <span class="token function">A_EfieldList</span><span class="token punctuation">(</span>A_efield head<span class="token punctuation">,</span> A_efieldList tail<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里需要注意的几点是：</p><ul><li>夹杂在其中的关于位置的表示是用源代码的字符计数来表示的。</li><li>Tiger语言将相邻的函数生命看成是（可能会）相互递归的。</li><li>没有关于表达式&amp;和|的抽象语法，用if else来表示</li><li>词法分析器返回的ID单词携带string类型的值，而抽象语法要求标识符具有symbol值。<h4 id="程序设计：抽象语法"><a href="#程序设计：抽象语法" class="headerlink" title="程序设计：抽象语法"></a>程序设计：抽象语法</h4>这次的程序设计，是在上一章作业的基础上添加语义动作。</li></ul><p>文件：</p><pre class=" language-c"><code class="language-c">absyn<span class="token punctuation">.</span>c <span class="token comment" spellcheck="true">//Tiger的抽象语法声明</span>lex<span class="token punctuation">.</span>yy<span class="token punctuation">.</span>c <span class="token comment" spellcheck="true">//替代的词法分析器，可以使用自己的</span>parse<span class="token punctuation">.</span>c <span class="token comment" spellcheck="true">//驱动程序，分析Tiger程序</span>prabsyn<span class="token punctuation">.</span>c <span class="token comment" spellcheck="true">//抽象语法树输出程序</span>symbol<span class="token punctuation">.</span>c <span class="token comment" spellcheck="true">//字符串转化尾字符</span>table<span class="token punctuation">.</span>c <span class="token comment" spellcheck="true">//函数声明表支持</span>tiger<span class="token punctuation">.</span>grm <span class="token comment" spellcheck="true">//需要编写的grm文件</span>absyn<span class="token punctuation">.</span>hmakefileparse<span class="token punctuation">.</span>hprabsyn<span class="token punctuation">.</span>hsymbol<span class="token punctuation">.</span>htable<span class="token punctuation">.</span>h</code></pre><p>通过前面我们知道添加语义动作有两种方式。一种是直接添加语义动作，另一种是通过抽象语法的方式来添加，这里vim一下<code>tiger.grm</code>文件我们可以发现作者的意思应该是通过抽象语法来完成这次的设计。这里就在第三章设计的基础上来完成语法抽象。</p><p>首先将第四章内缺省的一些文件补全,并将第三章内的<code>tiger.grm</code>复制来</p><pre class=" language-bash"><code class="language-bash">~/chap3$ <span class="token function">cp</span> -f parsetest.c util.h util.c tiger.grm ~/chap4</code></pre><p>然后为其增加语义动作</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"errormsg.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"symbol.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"absyn.h"</span></span><span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* function prototype */</span>A_exp absyn_root<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">EM_error</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token keyword">union</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>    <span class="token keyword">int</span> ival<span class="token punctuation">;</span>    string sval<span class="token punctuation">;</span>        A_exp exp<span class="token punctuation">;</span>        A_expList explist<span class="token punctuation">;</span>        A_var var<span class="token punctuation">;</span>        A_decList declist<span class="token punctuation">;</span>        A_dec  dec<span class="token punctuation">;</span>        A_efieldList efieldlist<span class="token punctuation">;</span>        A_efield  efield<span class="token punctuation">;</span>        A_namety namety<span class="token punctuation">;</span>        A_nametyList nametylist<span class="token punctuation">;</span>        A_fieldList fieldlist<span class="token punctuation">;</span>        A_field field<span class="token punctuation">;</span>        A_fundecList fundeclist<span class="token punctuation">;</span>        A_fundec fundec<span class="token punctuation">;</span>        A_ty ty<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>sval<span class="token operator">></span> ID STRING<span class="token operator">%</span>token <span class="token operator">&lt;</span>ival<span class="token operator">></span> INT<span class="token operator">%</span>token  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK  LBRACE RBRACE DOT  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE  AND OR ASSIGN  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF  BREAK NIL  FUNCTION VAR TYPE<span class="token operator">%</span>type <span class="token operator">&lt;</span>exp<span class="token operator">></span> exp_em exp expseq<span class="token operator">%</span>type <span class="token operator">&lt;</span>explist<span class="token operator">></span> actuals  nonemptyactuals sequencing  sequencing_exps<span class="token operator">%</span>type <span class="token operator">&lt;</span>var<span class="token operator">></span>  lvalue one oneormore<span class="token operator">%</span>type <span class="token operator">&lt;</span>declist<span class="token operator">></span> decs decs_nonempty<span class="token operator">%</span>type <span class="token operator">&lt;</span>dec<span class="token operator">></span>  decs_nonempty_s vardec<span class="token operator">%</span>type <span class="token operator">&lt;</span>efieldlist<span class="token operator">></span> rec rec_nonempty<span class="token operator">%</span>type <span class="token operator">&lt;</span>efield<span class="token operator">></span> rec_one<span class="token operator">%</span>type <span class="token operator">&lt;</span>nametylist<span class="token operator">></span> tydec<span class="token operator">%</span>type <span class="token operator">&lt;</span>namety<span class="token operator">></span>  tydec_one<span class="token operator">%</span>type <span class="token operator">&lt;</span>fieldlist<span class="token operator">></span> tyfields tyfields_nonempty<span class="token operator">%</span>type <span class="token operator">&lt;</span>ty<span class="token operator">></span> ty<span class="token operator">%</span>type <span class="token operator">&lt;</span>fundeclist<span class="token operator">></span> fundec<span class="token operator">%</span>type <span class="token operator">&lt;</span>fundec<span class="token operator">></span> fundec_one<span class="token operator">%</span>left SEMICOLON<span class="token operator">%</span>nonassoc DO<span class="token operator">%</span>nonassoc LOWER<span class="token operator">%</span>nonassoc TYPE<span class="token operator">%</span>nonassoc FUNCTION<span class="token operator">%</span>nonassoc OF<span class="token operator">%</span>nonassoc LOW<span class="token operator">%</span>nonassoc  ELSE<span class="token operator">%</span>right ASSIGN<span class="token operator">%</span>left OR<span class="token operator">%</span>left AND<span class="token operator">%</span>nonassoc EQ NEQ LT LE GT GE<span class="token operator">%</span>left PLUS MINUS<span class="token operator">%</span>left TIMES DIVIDE<span class="token operator">%</span>nonassoc UMINUS<span class="token operator">%</span>left DOT LBRACK<span class="token operator">%</span>start program<span class="token operator">%</span><span class="token operator">%</span>program    <span class="token punctuation">:</span>    exp_em  <span class="token punctuation">{</span>absyn_root <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exp_em    <span class="token punctuation">:</span> exp  <span class="token punctuation">{</span>$$<span class="token operator">=</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>exp    <span class="token punctuation">:</span> INT      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_IntExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> STRING   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_StringExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> lvalue   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_VarExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> NIL      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_NilExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> LPAREN sequencing RPAREN  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_SeqExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> exp PLUS exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_plusOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp MINUS exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_minusOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp TIMES exp   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_timesOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp DIVIDE exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_divideOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp EQ exp      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_eqOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp NEQ exp     <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_neqOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp LT exp      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_ltOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp LE exp      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_leOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp GT exp      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_gtOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp GE exp      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_geOp<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp AND exp     <span class="token punctuation">{</span>$$ <span class="token operator">=</span><span class="token function">A_IfExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">,</span><span class="token function">A_IntExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>exp OR exp      <span class="token punctuation">{</span>$$ <span class="token operator">=</span><span class="token function">A_IfExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token function">A_IntExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>MINUS exp <span class="token operator">%</span>prec UMINUS <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">A_OpExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>A_minusOp<span class="token punctuation">,</span><span class="token function">A_IntExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>LPAREN exp_em RPAREN    <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>ID LPAREN actuals RPAREN  <span class="token punctuation">{</span>$$ <span class="token operator">=</span><span class="token function">A_CallExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>lvalue ASSIGN exp         <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_AssignExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>IF exp THEN exp  <span class="token operator">%</span>prec LOW  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_IfExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>IF exp THEN exp ELSE exp   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_IfExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">,</span>$<span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>WHILE exp DO exp            <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_WhileExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>FOR ID ASSIGN exp TO exp DO exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ForExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">,</span>$<span class="token number">6</span><span class="token punctuation">,</span>$<span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>BREAK                            <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_BreakExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>LET decs IN expseq END           <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_LetExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>ID LBRACE rec  RBRACE            <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_RecordExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>ID LBRACK exp RBRACK OF exp      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ArrayExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">,</span>$<span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>lvalue    <span class="token punctuation">:</span> ID    <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_SimpleVar</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> oneormore  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>oneormore    <span class="token punctuation">:</span> one       <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>oneormore DOT ID   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_FieldVar</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>oneormore LBRACK exp RBRACK   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_SubscriptVar</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>one <span class="token punctuation">:</span> ID DOT ID  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_FieldVar</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">A_SimpleVar</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> ID LBRACK exp RBRACK  <span class="token operator">%</span>prec LOWER  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_SubscriptVar</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">A_SimpleVar</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>rec <span class="token punctuation">:</span>  rec_nonempty  <span class="token punctuation">{</span>$$ <span class="token operator">=</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>rec_nonempty    <span class="token punctuation">:</span> rec_one <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_EfieldList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> rec_one COMMA rec_nonempty  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_EfieldList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>rec_one    <span class="token punctuation">:</span>  ID EQ exp   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_Efield</span><span class="token punctuation">(</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>sequencing    <span class="token punctuation">:</span> exp SEMICOLON sequencing_exps  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ExpList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>sequencing_exps    <span class="token punctuation">:</span>  exp          <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ExpList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> exp SEMICOLON sequencing_exps  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ExpList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>actuals    <span class="token punctuation">:</span> nonemptyactuals   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>nonemptyactuals    <span class="token punctuation">:</span> exp     <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ExpList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> exp COMMA nonemptyactuals <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ExpList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>expseq    <span class="token punctuation">:</span> sequencing_exps  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_SeqExp</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>decs    <span class="token punctuation">:</span>  decs_nonempty  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>decs_nonempty    <span class="token punctuation">:</span> decs_nonempty_s  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_DecList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> decs_nonempty_s decs_nonempty   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_DecList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>decs_nonempty_s    <span class="token punctuation">:</span> tydec  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_TypeDec</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>vardec  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>fundec  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_FunctionDec</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>tydec    <span class="token punctuation">:</span> tydec_one  <span class="token operator">%</span>prec LOWER  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_NametyList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> tydec_one tydec      <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_NametyList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>tydec_one    <span class="token punctuation">:</span> TYPE ID EQ ty    <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_Namety</span><span class="token punctuation">(</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>ty  <span class="token punctuation">:</span>   ID    <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_NameTy</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> LBRACE tyfields RBRACE  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_RecordTy</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> ARRAY OF ID <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_ArrayTy</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>tyfields    <span class="token punctuation">:</span> tyfields_nonempty  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>   <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>tyfields_nonempty    <span class="token punctuation">:</span> ID COLON ID  <span class="token punctuation">{</span>$$ <span class="token operator">=</span><span class="token function">A_FieldList</span><span class="token punctuation">(</span><span class="token function">A_Field</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> ID COLON ID COMMA tyfields_nonempty  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_FieldList</span><span class="token punctuation">(</span><span class="token function">A_Field</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>vardec    <span class="token punctuation">:</span> VAR ID ASSIGN exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_VarDec</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> VAR ID COLON ID ASSIGN exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_VarDec</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>fundec    <span class="token punctuation">:</span>   fundec_one  <span class="token operator">%</span>prec LOWER <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_FundecList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>   fundec_one fundec    <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_FundecList</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span>fundec_one    <span class="token punctuation">:</span> FUNCTION ID LPAREN tyfields RPAREN EQ exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_Fundec</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  <span class="token punctuation">{</span>$$ <span class="token operator">=</span> <span class="token function">A_Fundec</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">4</span><span class="token punctuation">,</span><span class="token function">S_Symbol</span><span class="token punctuation">(</span>$<span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$<span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">;</span></code></pre><h4 id="几种yacc错误情况的分析"><a href="#几种yacc错误情况的分析" class="headerlink" title="几种yacc错误情况的分析"></a>几种yacc错误情况的分析</h4><ul><li><p>no delacre type</p><p>首先检查是否在yacc文件的第二部分中声明了该类型，如果没有声明，补充；<br>而是检查yacc文件第三部分的$后的数字是否对应了正确的字段</p></li></ul><blockquote><p>Perhaps you are thinking that only symbols with values are counted. That’s not the case; $n refers to the value of the symbol n in the right-hand side, and is therefore an errorbif that symbol doesn’t have a value.</p></blockquote><blockquote><p>Note that yacc/bison can’t really tell whether or not a particular terminal has a value or not; all it knows is whether you have told it what the type of that value is.</p></blockquote><ul><li>error: ‘YYSTYPE {aka union YYSTYPE}’ has no member named ‘explist’; did you mean ‘expList’</li></ul><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><p>1.<a href="https://www.ibm.com/developerworks/cn/linux/l-flexbison.html" target="_blank" rel="noopener">使用 Flex 和 Bison 更好地进行错误处理</a></p><p>2.<a href="https://segmentfault.com/a/1190000000396608" target="_blank" rel="noopener">如何使用Lex/YACC</a></p><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 虎书 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(4)-Linux磁盘与文件系统管理</title>
      <link href="/2019/04/04/niao-ge-de-linux-si-fang-cai-4-linux-ci-pan-yu-wen-jian-xi-tong-guan-li/"/>
      <url>/2019/04/04/niao-ge-de-linux-si-fang-cai-4-linux-ci-pan-yu-wen-jian-xi-tong-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="认识Linux文件系统"><a href="#认识Linux文件系统" class="headerlink" title="认识Linux文件系统"></a>认识Linux文件系统</h3><p>Linux 文件系统最“正统”的是 <strong><em>ext2</em></strong> ,文件系统的建立和磁盘的物理结构是紧密相关的，现在我们有TB级的磁盘阵列，也有读写速度极快的ssd，如何根据自己的要求和期望的性能，文件系统的选择至关重要。</p><h4 id="磁盘组成与分区的复习"><a href="#磁盘组成与分区的复习" class="headerlink" title="磁盘组成与分区的复习"></a>磁盘组成与分区的复习</h4><p> 虽然ssd的出现在一般的计算机上已经普及，但是对于文件的安全性来说，相比于ssd几年的寿命和有限的读写次数，传统机械硬盘是我们保存数据的一个不可替代的选择，所以我们先从机械硬盘的结构说起：</p><ul><li><p>碟片（记录数据）</p></li><li><p>机械手臂，磁头（擦写碟片上的数据）</p></li><li><p>主轴马达：转动磁盘使磁头可以读写碟片上的数据</p><p>也就是说，<strong>数据的储存和擦写主要集中在碟片上</strong> ，而碟片的物理组成为：</p></li><li><p>扇区（Sector）为最小的物理储存单位，根据磁盘设计的不同有 <strong>512B</strong> 和 <strong>4KB</strong>两种</p></li><li><p>将扇区组成一个圆，即为 *<em>柱面（Cylinder） *</em></p></li><li><p>每个扇区都有自己的编号</p></li><li><p>磁盘分区表主要有 <strong>MBR</strong>和 <strong>GPT</strong>两种</p><ul><li>MBR分区表中第一扇区中储存 <strong>主引导记录（Master boot record，MBR）446B</strong> 及 <strong>分区表（partition table）64B</strong>，</li><li>GPT分区表除了分区数量扩充较多，支持的磁盘容量有超过2TB</li></ul><p>物理磁盘的文件名已经模拟成<code>/dev/sd[a-p]</code>的格式，第一块磁盘分区的文件名为<code>/dev/sda[1-128]</code>,虚拟机的磁盘通常是<code>/dev/vd[a-p]</code>,如果使用软件磁盘阵列使用的文件名是<code>/dev/md[a-p]</code>。</p></li></ul><h4 id="文件系统特性"><a href="#文件系统特性" class="headerlink" title="文件系统特性"></a>文件系统特性</h4><p> 操作系统拥有不同的的文件属性/权限，为了存放数据，就要对磁盘进行格式化，成为操作系统所能利用的文件系统。</p><p> LVM与软件磁盘阵列（software raid）技术可以使一个分区拥有不同的文件系统，也可以将多个分区合成一个文件系统。所以我们称呼 <strong>一个可以被挂载的数据为一个文件系统而不是一个分区</strong>。</p><p> 之前对于文件权限的学习中，我们了解到Linux文件系统中的文件有权限和属性的记录， <strong>文件系统会将文件的权限与属性放在inode中，而实际数据在放在数据区块中</strong>，此外还会有一个超级区块来存放文件系统的整体信息，也就是inode与数据区块的总量使用量和剩余量。</p><pre class=" language-c"><code class="language-c"> 每个文件文件占有一个inode<span class="token operator">--</span><span class="token operator">-></span><span class="token operator">|</span>                           <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>inode内有文件实际数据所在的区块号码 每个inode和数据区块都有编号<span class="token operator">-></span><span class="token operator">|</span></code></pre><p> 也就是我们只要找到inode就能知道文件的存放位置，这样大大提高了读写效率。这种方式称为 <strong>索引式文件系统</strong>，这样我们可以一口气读出文件所有区块的位置编号，而FAT文件系统需要先读取一个区块才能知道下一个区块的位置编号。考虑这种情况<code>1-&gt;7-&gt;4-&gt;20-&gt;13</code>,索引式文件系统可以在一圈内读出所有数据，而FAT则需要几圈。这也就是<strong>碎片整理</strong>的由来，弱国文件写入的区块太过于离散，文件的读取性能就会很差。</p><h4 id="Linux的ext2文件系统（inode）"><a href="#Linux的ext2文件系统（inode）" class="headerlink" title="Linux的ext2文件系统（inode）"></a>Linux的ext2文件系统（inode）</h4><p> 文件系统一开就将inode和数据区块规划好了，除非重新格式化，或使用<code>resize2fs</code>命令修改。否则inode和数据区块就是固定的。</p><p> ext2文件系统的格式化时是分为多个区块群组（block group）</p><pre class=" language-c"><code class="language-c"> <span class="token operator">|</span>Boot Sector<span class="token operator">|</span>Block Group1<span class="token operator">|</span>Block Group2<span class="token operator">|</span>Block Group3<span class="token operator">|</span>Block Group4<span class="token operator">|</span>                <span class="token operator">|</span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-></span><span class="token operator">|</span> <span class="token operator">|</span>Superblock<span class="token operator">|</span>文件系统描述<span class="token operator">|</span>区块对应表<span class="token operator">|</span>inode对应表<span class="token operator">|</span>inode Table<span class="token operator">|</span>Date Block<span class="token operator">|</span></code></pre><p>文件系统最前方拥有一个启动扇区Boot Sector来存放不同文件系统的引导程序，这样就能实现多重引导，而不用覆盖每个MBR表。</p><p>每个区块群组有6个部分：</p><ul><li><p>Superblock</p><ul><li>数据区块与inode的总量;</li><li>未使用与已使用的inode与数据区块 数量;</li><li>数据区块与inode的大小（block为1,2,4k，inode为128B或256B）;</li><li>文件系统的挂载时间，最近一次写入数据的时间，最近一次检验（fsck）的时间</li><li>一个有效位值，已被挂载为0,否则为1;</li></ul><p>一般 <strong>除了第一个区块群组含有超级区块，剩下的不会有，有也是为了备份</strong>。</p></li><li><p>文件系统描述Filesystem Description</p></li></ul><p>描述区块群组开始与结束的区块，以及每个区块的6个部分分别介于哪个区块之间，可以使用命令<code>dumpe2fs</code>来查看</p><ul><li>区块对应表（block bitmap）</li></ul><p>记录区块是否使用</p><ul><li>inode对应表（inode bitmap）</li></ul><p>记录inode是否使用</p><ul><li><p>inode Table</p><ul><li>文件的读写属性rwx</li><li>文件的拥有者与用户组</li><li>文件的大小</li><li>文件的建立或状态改变的时间ctime</li><li>文件的最后一次读取的时间atime</li><li>文件的最后一次修改时间mtime</li><li>文件特性的标识，SUID，SGID，SBIT等</li><li>文件真正内容的指向pointer</li><li>inode的大小为128B，ext4和xfs可以设为256B</li><li>每个文件只会占用一个inode</li><li>所以文件系统能够建立的文件数量和inode的数量有关</li><li>系统读取文件时会先经过inode</li></ul><p>inode记录区块号码的区域定义为12个直接，一个间接，一个双间接和一个三间接<br>，假设一个区块为1K，。每个记录使用4B，也就是一个区块可以有256条记录</p><pre class=" language-c"><code class="language-c"><span class="token operator">|</span>文件权限<span class="token operator">/</span>属性记录区域<span class="token operator">|</span><span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       直接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>block号码（<span class="token number">1</span>条记录）<span class="token operator">|</span>       间接       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>256block区块<span class="token operator">--</span><span class="token operator">-></span><span class="token number">256</span>×1K<span class="token operator">=</span>256K<span class="token operator">|</span>       双间接     <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>256block区块<span class="token operator">--</span><span class="token operator">-></span><span class="token number">256</span>×<span class="token number">256</span>个区块<span class="token operator">--</span><span class="token operator">-></span><span class="token number">256</span><span class="token operator">^</span>2K<span class="token operator">|</span>       三间接     <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-></span>256block区块<span class="token operator">--</span><span class="token operator">-></span><span class="token number">256</span>×<span class="token number">256</span>个区块<span class="token operator">--</span><span class="token operator">-></span><span class="token number">256</span>×<span class="token number">256</span>×<span class="token number">256</span>个区块<span class="token operator">--</span><span class="token operator">-></span><span class="token number">256</span><span class="token operator">^</span>3K<span class="token operator">=</span>16GB</code></pre></li><li><p>Data Block</p><ul><li><p>原则上，区块划分完成以后就不能再次修改</p></li><li><p>每个区块内只能放置一个文件</p></li><li><p>如果文件大于区块的大小，则会占用多个区块</p></li><li><p>文件小于区块大小，则区块剩下的容量就会浪费</p></li></ul></li></ul><table><thead><tr><th>Block大小</th><th>1KB</th><th>2KB</th><th>4KB</th></tr></thead><tbody><tr><td>最大单一文件限制</td><td>16GB</td><td>256GB</td><td>2TB</td></tr><tr><td>最大文件系统的容量</td><td>2TB</td><td>8TB</td><td>16TB</td></tr></tbody></table><h5 id="dumpe2fs命令"><a href="#dumpe2fs命令" class="headerlink" title="dumpe2fs命令"></a>dumpe2fs命令</h5><pre class=" language-bash"><code class="language-bash">$ dumpe2fs <span class="token punctuation">[</span>-bh<span class="token punctuation">]</span> 设备文件名选项与参数：-b：列出保留为坏道的部分-h：仅列出superblock的内容$ blkid <span class="token comment" spellcheck="true">#显示出目前系统被格式化的设备</span>/dev/loop0: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/loop1: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/loop2: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/loop3: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/loop4: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/loop5: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/loop6: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/loop7: TYPE<span class="token operator">=</span><span class="token string">"squashfs"</span>/dev/nvme0n1p1: LABEL<span class="token operator">=</span><span class="token string">"SYSTEM"</span> UUID<span class="token operator">=</span><span class="token string">"C6A3-B7DE"</span> TYPE<span class="token operator">=</span><span class="token string">"vfat"</span> PARTLABEL<span class="token operator">=</span><span class="token string">"EFI system partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"3e25bbec-3e10-4901-8c33-ceeadbc12d69"</span>/dev/nvme0n1p3: LABEL<span class="token operator">=</span><span class="token string">"Windows"</span> UUID<span class="token operator">=</span><span class="token string">"B438A7FA38A7BA2E"</span> TYPE<span class="token operator">=</span><span class="token string">"ntfs"</span> PARTLABEL<span class="token operator">=</span><span class="token string">"Basic data partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"f6d4beeb-a0dc-48ed-827b-b63cf7cd1084"</span>/dev/nvme0n1p4: LABEL<span class="token operator">=</span><span class="token string">"WinRE_DRV"</span> UUID<span class="token operator">=</span><span class="token string">"E60CA85F0CA82C8D"</span> TYPE<span class="token operator">=</span><span class="token string">"ntfs"</span> PARTLABEL<span class="token operator">=</span><span class="token string">"Basic data partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"58abc9c9-e11e-4dd8-9a3f-2dab172fa72c"</span>/dev/nvme0n1p5: UUID<span class="token operator">=</span><span class="token string">"2f6b6a4f-29e2-4a7e-a790-523499851033"</span> TYPE<span class="token operator">=</span><span class="token string">"ext4"</span> PARTUUID<span class="token operator">=</span><span class="token string">"150f0697-4ae7-4957-830f-a91e40d03577"</span> <span class="token comment" spellcheck="true">#ext4文件系统</span>$ dumpe2fs -h /dev/nvme0n1p5dumpe2fs 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>Filesystem volume name:   <span class="token operator">&lt;</span>none<span class="token operator">></span>Last mounted on:          /Filesystem UUID:          2f6b6a4f-29e2-4a7e-a790-523499851033Filesystem magic number:  0xEF53Filesystem revision <span class="token comment" spellcheck="true">#:    1 (dynamic)</span>Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csumFilesystem flags:         signed_directory_hashDefault <span class="token function">mount</span> options:    user_xattr aclFilesystem state:         cleanErrors behavior:          ContinueFilesystem OS type:       LinuxInode count:              6225920Block count:              24903680Reserved block count:     1245184Free blocks:              5501844Free inodes:              5360200First block:              0Block size:               4096Fragment size:            4096Group descriptor size:    64Reserved GDT blocks:      1024Blocks per group:         32768Fragments per group:      32768Inodes per group:         8192Inode blocks per group:   512Flex block group size:    16Filesystem created:       Sat Aug 25 09:19:21 2018Last <span class="token function">mount</span> time:          Thu Apr 11 08:37:34 2019Last <span class="token function">write</span> time:          Thu Apr 11 08:37:34 2019Mount count:              676Maximum <span class="token function">mount</span> count:      -1Last checked:             Sat Aug 25 09:19:21 2018Check interval:           0 <span class="token punctuation">(</span><span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token punctuation">)</span>Lifetime writes:          2040 GBReserved blocks uid:      0 <span class="token punctuation">(</span>user root<span class="token punctuation">)</span>Reserved blocks gid:      0 <span class="token punctuation">(</span>group root<span class="token punctuation">)</span>First inode:              11Inode size:              256Required extra isize:     32Desired extra isize:      32Journal inode:            8First orphan inode:       3408086Default directory hash:   half_md4Directory Hash Seed:      b1992519-4a57-44b1-a21c-5a97eaff4950Journal backup:           inode blocksChecksum type:            crc32cChecksum:                 0xc872187fJournal features:         journal_incompat_revoke journal_64bit journal_checksum_v3Journal size:             512MJournal length:           131072Journal sequence:         0x001fb5bdJournal start:            1Journal checksum type:    crc32cJournal checksum:         0x3e35097a</code></pre><h4 id="与目录树的关系"><a href="#与目录树的关系" class="headerlink" title="与目录树的关系"></a>与目录树的关系</h4><ul><li>目录</li></ul><p>当我们在Linux下建立一个目录时， <strong>文件系统会分配一个inode与至少一个区块给该目录</strong>， inode记录目录的权限和属性，而区块记录目录下的文件名和文件名占用的inode号码。这也体现了 <strong>Linux下一切都是文件</strong>的本质，回忆，、之前的bolg中我们讨论过如果只拥有目录的r权限就可以用ls列出所有的文件内容，其实目录就是一个文件只要有r权限就可以阅读，w权限只能修改或删除该目录下的文件，而x执行权限才能执行并通过目录树访问该目录下的其他文件。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ls</span> -li <span class="token comment" spellcheck="true">#-i选项可以观察inode号码</span>total 125379387 drwxr-xr-x 3 root root 4096 8月  26  2018 Android5244055 drwxr-xr-x 3 root root 4096 8月  26  2018 AndroidStudioProjects5259883 drwxr-xr-x 3 root root 4096 11月 10 10:09 PycharmProjects$ ll -d / /boot /usr/sbin /proc /sysdrwxr-xr-x  27 root root  4096 4月   7 11:41 // <span class="token comment" spellcheck="true">#一个4k区块</span>drwxr-xr-x   4 root root  4096 4月   7 11:41 /boot/dr-xr-xr-x 326 root root     0 4月  11 08:37 /proc/ <span class="token comment" spellcheck="true">#内存数据，不占磁盘容量</span>dr-xr-xr-x  13 root root     0 4月  11 08:37 /sys/drwxr-xr-x   2 root root 12288 3月  22 09:16 /usr/sbin/ <span class="token comment" spellcheck="true">#3个4K区块</span></code></pre><ul><li>文件</li></ul><p>文件系统会分配一个inode与正好的区块给新建文件。</p><ul><li>目录树读取</li></ul><pre class=" language-c"><code class="language-c">inode<span class="token operator">--</span><span class="token operator">></span>目录文件区块<span class="token operator">--</span><span class="token operator">></span>inode号码<span class="token operator">--</span><span class="token operator">></span>目录文件区块<span class="token operator">--</span><span class="token operator">-></span>……<span class="token operator">--</span><span class="token operator">-></span>inode号码<span class="token operator">--</span><span class="token operator">-></span>文件区块</code></pre><ul><li>文件系统大小与磁盘读取性能</li></ul><p>文件写入通常是离散的，如果离散的程度较大，即使我们使用索引式文件系统，也还是会造成文件读取效率下降的问题。</p><h4 id="ext2-ext3-ext4文件的存取与日志式文件系统的功能"><a href="#ext2-ext3-ext4文件的存取与日志式文件系统的功能" class="headerlink" title="ext2/ext3/ext4文件的存取与日志式文件系统的功能"></a>ext2/ext3/ext4文件的存取与日志式文件系统的功能</h4><p>在我们想要新增一个文件时，，文件系统的操作是：</p><ul><li>1.确定用户是否对目录有w或x的权限</li><li>2.根据inode对照表找出没有使用的inode号码，并写入权限/文件</li><li>3.根据区块对照表找到没有使用的区块号码，将数据写入区块中，并更新inode的区块指向数据</li><li>4.将刚刚写入的inode区块与区块数据同步更新inode对照表和区块对照表，并更新超级区块的内容</li></ul><p>数据的不一致状态（Inconsistent）状态，如果在某些计算条件下，比如机房突然断电，系统内核发生错误的情况，文件系统只写入了inode对照表与数据区块，最后一个同步更新元数据的步骤还未完成。面对这种情况，早期ext2我们要对整个文件系统进行检查使用<code>e2fsck</code>命令，这样消耗大量的时间也就催生了后来的日志式文件系统（Journaling filesystem）。</p><p>日志式文件系统记录一个文件时，：</p><ul><li>首先在日志记录区块中记录某个文件准备要写入的信息</li><li>世界写入更新metadata的数据</li><li>完成更新后，在日志记录区块中完成该文件的记录</li></ul><p>在日志式文件系统中，我们只要检查日志文件区块就可以知道那个文件发生了问题</p><h4 id="Linux文件系统的运行"><a href="#Linux文件系统的运行" class="headerlink" title="Linux文件系统的运行"></a>Linux文件系统的运行</h4><p>Linux 通过异步处理(asynchronously)的方式来解决磁盘读写的效率问题。当系统加载一个文件到内存后，如果文件爱你未被修改 则状态为 <strong><em>Clean</em></strong> ，如果被修改过了，则状态为<strong><em>Dirty</em></strong>，此时操作都在内存中执行，并没有写入到磁盘中。</p><ul><li>系统会将常用文件放入磁盘中，来加速文件的读写操作</li><li>sync命令可以将内存中dirty文件写入磁盘</li><li>正常关机是会调用sync</li><li>不正常关机可能会造成文件系统的损坏<h4 id="挂载点的意义（mount-point）"><a href="#挂载点的意义（mount-point）" class="headerlink" title="挂载点的意义（mount point）"></a>挂载点的意义（mount point）</h4></li></ul><p><strong><em>挂载点一定是目录，该目录为进入该文件系统的入口</em></strong>，所谓挂载就是文件系统与目录树的结合。文件系统必须挂载之后才能使用。</p><p><strong><em>同一个文件系统的某个inode只会对应到一个文件</em></strong></p><h4 id="其他Linux支持的文件系统与VFS"><a href="#其他Linux支持的文件系统与VFS" class="headerlink" title="其他Linux支持的文件系统与VFS"></a>其他Linux支持的文件系统与VFS</h4><p>每种文件系统都有自己不同的特性，比如xfs支持大容量大文件，Reiserfs支持更小型文件，一般Linux支持的系统有：</p><ul><li>传统文件系统： ext2，minix，FAT，iso9660（光盘）等</li><li>日志式文件系统：ext3,ext4,ReiserFS。Windows’NTFS，IBM’sJFS,SGI’sXFS,ZFS</li><li>网络文件系统：NFS，SMBFS</li></ul><p>Linux VFS(Virtual Filesystem Switch),这个内核功能管理整个Linux 的文件系统。我们不需要自己来指定文件系统的类型，VFS会自动提我们识别。</p><h4 id="XFS文件系统简介"><a href="#XFS文件系统简介" class="headerlink" title="XFS文件系统简介"></a>XFS文件系统简介</h4><p>ext文件系统的一个软肋是格式化的速度超慢。由于虚拟化技术的应用，性能上xfs会更站优势。</p><pre class=" language-c"><code class="language-c"><span class="token operator">|</span>数据区data section<span class="token operator">|</span>文件系统活动登录区log section<span class="token operator">|</span>实时运行区realtime section<span class="token operator">|</span><span class="token operator">|</span>i<span class="token operator">|</span>b<span class="token operator">|</span>iT<span class="token operator">|</span>bT<span class="token operator">|</span>SB<span class="token operator">|</span>dec <span class="token operator">|</span>记录文件变化可以指定为外部磁盘 <span class="token operator">|</span>     extent    stripe   <span class="token operator">|</span></code></pre><p>可以通过命令<code>xfs_info</code>来观察。</p><h3 id="文件系统的简单操作"><a href="#文件系统的简单操作" class="headerlink" title="文件系统的简单操作"></a>文件系统的简单操作</h3><h4 id="磁盘与目录的容量"><a href="#磁盘与目录的容量" class="headerlink" title="磁盘与目录的容量"></a>磁盘与目录的容量</h4><h6 id="df：列出文件系统的整体磁盘使用量"><a href="#df：列出文件系统的整体磁盘使用量" class="headerlink" title="df：列出文件系统的整体磁盘使用量"></a>df：列出文件系统的整体磁盘使用量</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token punctuation">[</span>-ahikHTm<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录或文件名<span class="token punctuation">]</span>选项与参数： -a :列出所有的文件系统，包括系统特有的/proc等文件系统 -k :以KBytes的容量显示各文件系统 -m :以MBytes的容量显示各文件系统*-h :以人们较易接受的GBytes等格式自行显示 -H :以M<span class="token operator">=</span>1000k替换M<span class="token operator">=</span>1024k的进位 -T :连同该硬盘分区的文件系统格式也一起列出*-i :不用磁盘容量，而以inode的数量来显示$ <span class="token function">df</span>Filesystem     1K-blocks     Used Available Use% Mounted onudev             8053080        0   8053080   0% /devtmpfs            1616676     2164   1614512   1% /run/dev/nvme0n1p5  97527092 74703772  17826200  81% /tmpfs            8083376     1908   8081468   1% /dev/shmtmpfs               5120        4      5116   1% /run/locktmpfs            8083376        0   8083376   0% /sys/fs/cgroup*Filessystem <span class="token keyword">:</span> 代表该文件系统是在哪个磁盘分区，所以列出设备名称*1K-blocks   <span class="token keyword">:</span> 说明下面的数字单位是1kb，可利用 -h或 -m来改变容量*Used        <span class="token keyword">:</span> 使用掉的磁盘空间*Available   <span class="token keyword">:</span> 剩余磁盘空间大小*Use%        <span class="token keyword">:</span> 磁盘使用率*Mounted on  <span class="token keyword">:</span> 挂载点</code></pre><p>其中的<code>/dev/shm/</code>目录是利用内存虚拟出来的磁盘空间。</p><h6 id="du：查看文件系统的磁盘使用量（查看目录所占磁盘空间）"><a href="#du：查看文件系统的磁盘使用量（查看目录所占磁盘空间）" class="headerlink" title="du：查看文件系统的磁盘使用量（查看目录所占磁盘空间）"></a>du：查看文件系统的磁盘使用量（查看目录所占磁盘空间）</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">du</span> <span class="token punctuation">[</span>-ahskm<span class="token punctuation">]</span> 文件或目录名称选项与参数： -a <span class="token keyword">:</span> 列出所有的文件与目录容量，因为默认仅统计目录下面的文件量 -h <span class="token keyword">:</span> 以易读方式显示*-s <span class="token keyword">:</span> 仅列出总量，而不是每个别的目录的占用量 -S <span class="token keyword">:</span> 不包括子目录下的总计 -k <span class="token keyword">:</span> 以KBytes -m <span class="token keyword">:</span> 以MBytes</code></pre><h4 id="硬链接与符号链接：ln"><a href="#硬链接与符号链接：ln" class="headerlink" title="硬链接与符号链接：ln"></a>硬链接与符号链接：ln</h4><p>Linux下链接文件为两种：</p><ul><li>符号链接 类似快捷方式</li><li>硬链接 文件系统通过inode来新建的文件名</li></ul><h5 id="硬链接-Hard-Link-（实际链接）"><a href="#硬链接-Hard-Link-（实际链接）" class="headerlink" title="硬链接 Hard Link （实际链接）"></a>硬链接 Hard Link （实际链接）</h5><p>每个文件占用一个inode，读取文件必须经过目录的文件名指向到正确的inode号码。<strong><em>硬链接只是在某个目录下新增一条文件名链接到某inode号码的关联记录而已。</em></strong><br><img src="https://s2.ax1x.com/2019/04/16/AxKOvn.png" alt="AxKOvn.png"></p><p>这样建立硬链接的一好处是安全，如图，当我们删除掉block1的对应目录时，真正的inode与文件内容实际上仍然存在，这样不会删除真正的文件。但是硬链接也是有限制的：</p><ul><li>不能跨文件系统（这个显而易见）</li><li>不能链接目录 如果要建立一个目录的硬链接，不仅仅是要为目录名建立硬链接，还要为目录下的每一个文件都建立硬链接，这样会造成非常大的环境复杂度，所以目前还不支持目录建立硬链接。</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ln</span> <span class="token operator">&lt;</span>源文件<span class="token operator">></span> <span class="token operator">&lt;</span>目标文件目录<span class="token operator">></span></code></pre><h5 id="符号链接-Symbolic-Link-（快捷方式）"><a href="#符号链接-Symbolic-Link-（快捷方式）" class="headerlink" title="符号链接 Symbolic Link （快捷方式）"></a>符号链接 Symbolic Link （快捷方式）</h5><p>符号链接就是建立一个独立的文件，这个文件会让数据的读取指向它链接的文件的文件名。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ln</span> -s <span class="token operator">&lt;</span>源文件<span class="token operator">></span> <span class="token operator">&lt;</span>目标文件目录<span class="token operator">></span></code></pre><p><a href="https://imgchr.com/i/AxQKe0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/16/AxQKe0.png" alt="AxQKe0.png"></a></p><h3 id="磁盘的分区，格式化，检验与挂载"><a href="#磁盘的分区，格式化，检验与挂载" class="headerlink" title="磁盘的分区，格式化，检验与挂载"></a>磁盘的分区，格式化，检验与挂载</h3><p>新增磁盘的操作：</p><ul><li>对磁盘进行划分</li><li>对磁盘进行格式化，建立西欧他那个可用的文件系统</li><li>建立挂载点，将文件系统挂载上来</li></ul><h4 id="观察磁盘分区状态"><a href="#观察磁盘分区状态" class="headerlink" title="观察磁盘分区状态"></a>观察磁盘分区状态</h4><h6 id="lsblk（list-block-device）"><a href="#lsblk（list-block-device）" class="headerlink" title="lsblk（list block device）"></a>lsblk（list block device）</h6><pre class=" language-bash"><code class="language-bash">$ lsblk <span class="token punctuation">[</span>-dfimpt<span class="token punctuation">]</span> <span class="token punctuation">[</span>device<span class="token punctuation">]</span>选项与参数： -d <span class="token keyword">:</span> 仅列出磁盘本身，不列出磁盘的分区数据×-f <span class="token keyword">:</span> 列出磁盘内的文件系统名称 -i <span class="token keyword">:</span> 使用ASCII字符输出 -m <span class="token keyword">:</span> 输出设备的权限信息 -p <span class="token keyword">:</span> 列出完整文件名 -t <span class="token keyword">:</span> 列出磁盘设备的详细文件数据，包括磁盘阵列信息等NAME <span class="token keyword">:</span> 设备文件名MAJ:MIN <span class="token keyword">:</span> 内核识别的设备就是通过这两个代码来区分，主要与次要设备代码RM <span class="token keyword">:</span> 是否为可卸载设备SIZE <span class="token keyword">:</span> 容量RO <span class="token keyword">:</span> 是否为只读设备TYPE <span class="token keyword">:</span> 是磁盘，分区，还是制度存储器romMOUNTPOINT <span class="token keyword">:</span> 挂载点</code></pre><h6 id="blkid-列出设备的UUID等参数"><a href="#blkid-列出设备的UUID等参数" class="headerlink" title="blkid 列出设备的UUID等参数"></a>blkid 列出设备的UUID等参数</h6><p>UUID：universally unique identifier 全局唯一标识符</p><h6 id="parted-列出磁盘的分区表类型和分区信息"><a href="#parted-列出磁盘的分区表类型和分区信息" class="headerlink" title="parted 列出磁盘的分区表类型和分区信息"></a>parted 列出磁盘的分区表类型和分区信息</h6><pre class=" language-bash"><code class="language-bash">$ parted 设备名 print$ parted /dev/nvme0n1 printModel: INTEL SSDPEKKF256G8L <span class="token punctuation">(</span>nvme<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 制造厂商 模块名称</span>Disk /dev/nvme0n1: 256GB            <span class="token comment" spellcheck="true"># 磁盘容量</span>Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B <span class="token comment" spellcheck="true"># 磁盘的每个逻辑/物理扇区容量</span>Partition Table: gpt                <span class="token comment" spellcheck="true"># 分区表格式</span>Disk Flags:Number  Start   End    Size    File system  Name                          Flags 1      1049kB  274MB  273MB   fat32        EFI system partition          boot, hidden, esp 2      274MB   290MB  16.8MB               Microsoft reserved partition  msftres 3      290MB   153GB  153GB   ntfs         Basic data partition          msftdata 5      153GB   255GB  102GB   ext4 4      255GB   256GB  1049MB  ntfs         Basic data partition          hidden, diag</code></pre><h4 id="磁盘分区：gdisk-fdisk"><a href="#磁盘分区：gdisk-fdisk" class="headerlink" title="磁盘分区：gdisk/fdisk"></a>磁盘分区：gdisk/fdisk</h4><p><strong><em>MBR分区表使用fdisk分区，GPT使用gdisk分区</em></strong></p><h6 id="gdisk"><a href="#gdisk" class="headerlink" title="gdisk"></a>gdisk</h6><pre class=" language-bash"><code class="language-bash">$ gdisk /dev/nvme0n1GPT <span class="token function">fdisk</span> <span class="token punctuation">(</span>gdisk<span class="token punctuation">)</span> version 1.0.3Partition table scan:  MBR: protective  BSD: not present  APM: not present  GPT: presentFound valid GPT with protective MBR<span class="token punctuation">;</span> using GPT.Command <span class="token punctuation">(</span>? <span class="token keyword">for</span> help<span class="token punctuation">)</span>: ?b    back up GPT data to a <span class="token function">file</span>c    change a partition<span class="token string">'s named    delete a partition  #删除一个分区i    show detailed information on a partitionl    list known partition typesn    add a new partition   #新建一个分区o    create a new empty GUID partition table (GPT)p    print the partition table  #打印分区表q    quit without saving changes #不保存分区直接离开gdiskr    recovery and transformation options (experts only)s    sort partitionst    change a partition'</span>s <span class="token function">type</span> code<span class="token function">v</span>    verify diskw    <span class="token function">write</span> table to disk and <span class="token keyword">exit</span>  <span class="token comment" spellcheck="true">#保存分区后离开gdisk'</span>x    extra functionality <span class="token punctuation">(</span>experts only<span class="token punctuation">)</span>?    print this menu</code></pre><p>磁盘分区是针对整个磁盘而不是只是一个分区所以不要在设备文件后附带数字。</p><h6 id="gdisk新增分区"><a href="#gdisk新增分区" class="headerlink" title="gdisk新增分区"></a>gdisk新增分区</h6><pre class=" language-bash"><code class="language-bash">$ gdisk /dev/nvme0n1GPT <span class="token function">fdisk</span> <span class="token punctuation">(</span>gdisk<span class="token punctuation">)</span> version 1.0.3Partition table scan:  MBR: protective  BSD: not present  APM: not present  GPT: presentFound valid GPT with protective MBR<span class="token punctuation">;</span> using GPT.Command <span class="token punctuation">(</span>? <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/nvme0n1: 500118192 sectors, 238.5 GiBModel: INTEL SSDPEKKF256G8LSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512/512 bytesDisk identifier <span class="token punctuation">(</span>GUID<span class="token punctuation">)</span>: 7D95F9F1-8D34-4BA7-B555-9C68C5D996D6Partition table holds up to 128 entriesMain partition table begins at sector 2 and ends at sector 33First usable sector is 34, last usable sector is 500118158Partitions will be aligned on 2048-sector boundariesTotal <span class="token function">free</span> space is 4717 sectors <span class="token punctuation">(</span>2.3 MiB<span class="token punctuation">)</span>Number  Start <span class="token punctuation">(</span>sector<span class="token punctuation">)</span>    End <span class="token punctuation">(</span>sector<span class="token punctuation">)</span>  Size       Code  Name   1            2048          534527   260.0 MiB   EF00  EFI system partition   2          534528          567295   16.0 MiB    0C01  Microsoft reserved <span class="token punctuation">..</span>.   3          567296       277868543   132.2 GiB   0700  Basic data partition   4       277868544       298838015   10.0 GiB    0700  Basic data partition   5       298840064       498069503   95.0 GiB    8300   6       498069504       500117503   1000.0 MiB  2700  Basic data partitionCommand <span class="token punctuation">(</span>? <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition number <span class="token punctuation">(</span>7-128, default 7<span class="token punctuation">)</span>: 7First sector <span class="token punctuation">(</span>34-500118158, default <span class="token operator">=</span> 298838016<span class="token punctuation">)</span> or <span class="token punctuation">{</span>+-<span class="token punctuation">}</span>size<span class="token punctuation">{</span>KMGTP<span class="token punctuation">}</span>: 298838016Last sector <span class="token punctuation">(</span>298838016-298840063, default <span class="token operator">=</span> 298840063<span class="token punctuation">)</span> or <span class="token punctuation">{</span>+-<span class="token punctuation">}</span>size<span class="token punctuation">{</span>KMGTP<span class="token punctuation">}</span>: +1GLast sector <span class="token punctuation">(</span>298838016-298840063, default <span class="token operator">=</span> 298840063<span class="token punctuation">)</span> or <span class="token punctuation">{</span>+-<span class="token punctuation">}</span>size<span class="token punctuation">{</span>KMGTP<span class="token punctuation">}</span>: 298838017Current <span class="token function">type</span> is <span class="token string">'Linux filesystem'</span>Hex code or GUID <span class="token punctuation">(</span>L to show codes, Enter <span class="token operator">=</span> 8300<span class="token punctuation">)</span>:Changed <span class="token function">type</span> of partition to <span class="token string">'Linux filesystem'</span>Command <span class="token punctuation">(</span>? <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/nvme0n1: 500118192 sectors, 238.5 GiBModel: INTEL SSDPEKKF256G8LSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512/512 bytesDisk identifier <span class="token punctuation">(</span>GUID<span class="token punctuation">)</span>: 7D95F9F1-8D34-4BA7-B555-9C68C5D996D6Partition table holds up to 128 entriesMain partition table begins at sector 2 and ends at sector 33First usable sector is 34, last usable sector is 500118158Partitions will be aligned on 2048-sector boundariesTotal <span class="token function">free</span> space is 4715 sectors <span class="token punctuation">(</span>2.3 MiB<span class="token punctuation">)</span>Number  Start <span class="token punctuation">(</span>sector<span class="token punctuation">)</span>    End <span class="token punctuation">(</span>sector<span class="token punctuation">)</span>  Size       Code  Name   1            2048          534527   260.0 MiB   EF00  EFI system partition   2          534528          567295   16.0 MiB    0C01  Microsoft reserved <span class="token punctuation">..</span>.   3          567296       277868543   132.2 GiB   0700  Basic data partition   4       277868544       298838015   10.0 GiB    0700  Basic data partition   5       298840064       498069503   95.0 GiB    8300   6       498069504       500117503   1000.0 MiB  2700  Basic data partition   7       298838016       298838017   1024 bytes  8300  Linux filesystem</code></pre><h6 id="partprobe更新Linux内核的分区表信息"><a href="#partprobe更新Linux内核的分区表信息" class="headerlink" title="partprobe更新Linux内核的分区表信息"></a>partprobe更新Linux内核的分区表信息</h6><pre class=" language-bash"><code class="language-bash">$ partprobe <span class="token punctuation">[</span>-s<span class="token punctuation">]</span>$ lsblk /dev/nvme0n1 <span class="token comment" spellcheck="true"># 实际的磁盘分区状态</span>$ <span class="token function">cat</span> /proc/partitions <span class="token comment" spellcheck="true">#内核的分区记录</span></code></pre><h4 id="磁盘格式化，创建文件系统"><a href="#磁盘格式化，创建文件系统" class="headerlink" title="磁盘格式化，创建文件系统"></a>磁盘格式化，创建文件系统</h4><p>分区完毕以后就要进行磁盘的格式化，这样才能得到可以使用文件系统。就是使用make filesystem，mkfs指令。</p><p>首先键入<code>mkfs</code>，点击两下[Tab]，就出现了mkfs大家族。</p><pre class=" language-bash"><code class="language-bash">mkfs         mkfs.ext2    mkfs.fat     mkfs.ntfsmkfs.bfs     mkfs.ext3    mkfs.minix   mkfs.vfatmkfs.cramfs  mkfs.ext4    mkfs.msdos$ mkfs.ext4 <span class="token punctuation">[</span>-b size<span class="token punctuation">]</span> <span class="token punctuation">[</span>-L label<span class="token punctuation">]</span> 设备名称$ mkfs.ext4 /dev/nvme0n1p4 <span class="token comment" spellcheck="true">#格式化为ext4文件系统</span>mke2fs 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>/dev/nvme0n1p4 contains a ntfs <span class="token function">file</span> system labelled <span class="token string">'New Volume'</span>Proceed anyway? <span class="token punctuation">(</span>y,N<span class="token punctuation">)</span> yDiscarding device blocks: <span class="token keyword">done</span>Creating filesystem with 2621184 4k blocks and 655360 inodesFilesystem UUID: 38cdd582-dff7-4be3-8e55-0cb51fea7c4aSuperblock backups stored on blocks:    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Allocating group tables: <span class="token keyword">done</span>Writing inode tables: <span class="token keyword">done</span>Creating journal <span class="token punctuation">(</span>16384 blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>Writing superblocks and filesystem accounting information: <span class="token keyword">done</span></code></pre><h4 id="文件系统检验"><a href="#文件系统检验" class="headerlink" title="文件系统检验"></a>文件系统检验</h4><h6 id="xfs-repair处理XFS文件系统"><a href="#xfs-repair处理XFS文件系统" class="headerlink" title="xfs_repair处理XFS文件系统"></a>xfs_repair处理XFS文件系统</h6><pre class=" language-bash"><code class="language-bash">$ xfs_repair <span class="token punctuation">[</span>-fnd<span class="token punctuation">]</span> 设备名称选项与参数：-f ： 后面的设备其实是个文件而不是实体设备-n ： 单纯检查而不修改文件系统的任何数据-d ： 单人维护模式下，针对根目录的修复，很危险</code></pre><p>需要注意的是文件系统修复时不能被挂载。</p><ul><li>fsck.ext4处理ext4文件系统</li></ul><pre class=" language-bash"><code class="language-bash">$ fsck.ext4 <span class="token punctuation">[</span>-pf<span class="token punctuation">]</span> <span class="token punctuation">[</span>-b 超级区块<span class="token punctuation">]</span> 设备名称选项与参数：-p ： 当文件系统修复时如果有需要回复y的动作，直接回复y-f ： 强制检查，一般来说fsck弱国没有发现unclean的标识不会检查-D ： 针对文件系统下的目录进行最优化配置-b ： 后接超级区块的位置$ dumpe2fs -h /dev/nvme0n1p4 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'Blocks per group'</span>dumpe2fs 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>Blocks per group:         32768$  fsck.ext4 -b 32768 /dev/nvme0n1p4e2fsck 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>/dev/nvme0n1p4 was not cleanly unmounted, check forced.Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary informationBlock bitmap differences:  +<span class="token punctuation">(</span>32768--33794<span class="token punctuation">)</span> +<span class="token punctuation">(</span>98304--99330<span class="token punctuation">)</span> +<span class="token punctuation">(</span>163840--164866<span class="token punctuation">)</span> +<span class="token punctuation">(</span>229376--230402<span class="token punctuation">)</span> +<span class="token punctuation">(</span>294912--295938<span class="token punctuation">)</span> +<span class="token punctuation">(</span>819200--820226<span class="token punctuation">)</span> +<span class="token punctuation">(</span>884736--885762<span class="token punctuation">)</span> +<span class="token punctuation">(</span>1605632--1606658<span class="token punctuation">)</span>Fix<span class="token operator">&lt;</span>y<span class="token operator">></span>? <span class="token function">yes</span>Inode bitmap differences: Group 1 inode bitmap does not match checksum.FIXED./dev/nvme0n1p4: ***** FILE SYSTEM WAS MODIFIED *****/dev/nvme0n1p4: 11/655360 files <span class="token punctuation">(</span>0.0% non-contiguous<span class="token punctuation">)</span>, 66753/2621184 blocks$ fsck.ext4 /dev/nvme0n1p4e2fsck 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>/dev/nvme0n1p4: clean, 11/655360 files, 66753/2621184 blocks$  fsck.ext4 -f /dev/nvme0n1p4e2fsck 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/nvme0n1p4: 11/655360 files <span class="token punctuation">(</span>0.0% non-contiguous<span class="token punctuation">)</span>, 66753/2621184 blocks</code></pre><h4 id="文件系统挂载与卸载mount"><a href="#文件系统挂载与卸载mount" class="headerlink" title="文件系统挂载与卸载mount"></a>文件系统挂载与卸载mount</h4><ul><li>单一文件系统不应该被重复挂载在不同的挂载点中</li><li>单一目录不应该重复挂载多个文件系统</li><li>作为挂载点的目录。理论上都应该是空目录</li></ul><p>假设挂载点目录并不为空那么挂载了文件系统之后，<strong><em>目录下的问家你会暂时消失</em></strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mount</span> -a$ <span class="token function">mount</span> <span class="token punctuation">[</span>-l<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token punctuation">[</span>-t 文件系统<span class="token punctuation">]</span> LABEL<span class="token operator">=</span><span class="token string">''</span> 挂载点$ <span class="token function">mount</span> <span class="token punctuation">[</span>-t 文件系统<span class="token punctuation">]</span> UUID<span class="token operator">=</span><span class="token string">''</span> 挂载点$ <span class="token function">mount</span> <span class="token punctuation">[</span>-t 文件系统<span class="token punctuation">]</span> 设备文件名 挂载点选项与参数：-a ：依照配置文件/etc/fstab的数据将所有未挂载的磁盘都挂在上来-l ：显示label信息-t ：加制定的文件系统种类-n ：不将数据写入/etc/mtab中-o ：加参数</code></pre><p>Linux通过：</p><ul><li><code>/etc/filesystem</code>：系统制定的测试挂载文件系统的优先级</li><li><code>/proc/filesystem</code>：Linux系统已经加载的文件系统类型<br>```bash<br>$ unmount [-fn] 设备文件名或挂载点<br>选项与参数：</li></ul><p>-f : 强制卸载，可用在类似网络文件系统NFS无法读取到的前提下<br>-l : 立刻卸载文件系统<br>-n : 不更新/etc/mtab</p><pre><code>#### 磁盘文件系统参数自定义###### mknodLinux下一切都是文件，那么文件如何代表设备，***是通过major和minor这两个数值来替代***。```bash$ mknod 设备文件名 [bcp] [Major] [Minor]选项与参数：设备种类：b ： 设置设备名称为一个外接储存设备文件c ： 设置设备名称为一个外接输入设备文件f ： 设置设备名称为一个FIFO文件</code></pre><h6 id="xfs-admin修改UUID与Label-name"><a href="#xfs-admin修改UUID与Label-name" class="headerlink" title="xfs_admin修改UUID与Label name"></a>xfs_admin修改UUID与Label name</h6><pre class=" language-bash"><code class="language-bash">$ xfs_admin <span class="token punctuation">[</span>-lu<span class="token punctuation">]</span> <span class="token punctuation">[</span>-L label<span class="token punctuation">]</span> <span class="token punctuation">[</span>-U UUID<span class="token punctuation">]</span> 设备文件名选项与参数：-l <span class="token keyword">:</span> 列出设备的label name-u <span class="token keyword">:</span> 列出设备的UUID-L <span class="token keyword">:</span> 设置设备的label name-U <span class="token keyword">:</span> 设置设备的UUID$ uuidgen <span class="token comment" spellcheck="true">#产生一个UUID</span></code></pre><h6 id="tune2fs修改ext4的label-name-与UUID"><a href="#tune2fs修改ext4的label-name-与UUID" class="headerlink" title="tune2fs修改ext4的label name 与UUID"></a>tune2fs修改ext4的label name 与UUID</h6><pre class=" language-bash"><code class="language-bash">$ tune2fs <span class="token punctuation">[</span>-l<span class="token punctuation">]</span> <span class="token punctuation">[</span>-L label<span class="token punctuation">]</span> <span class="token punctuation">[</span>-U UUID<span class="token punctuation">]</span> 设备文件名选项与参数：-l <span class="token keyword">:</span> 类似于dump2fs的功能，将superblock内的数据读出-L <span class="token keyword">:</span> 设置设备的label name-U <span class="token keyword">:</span> 设置设备的UUID</code></pre><h3 id="设置启动挂载"><a href="#设置启动挂载" class="headerlink" title="设置启动挂载"></a>设置启动挂载</h3><p>一个很自然的诉求，就是我们希望系统在开机时自己主动挂载磁盘，否则每次都要mount操作一通实在是有些麻烦。</p><h4 id="启动挂载-etc-fstab及-etc-mtab"><a href="#启动挂载-etc-fstab及-etc-mtab" class="headerlink" title="启动挂载/etc/fstab及/etc/mtab"></a>启动挂载/etc/fstab及/etc/mtab</h4><p>系统挂载的限制：</p><ul><li><strong><em>根目录是必须挂载的而且要先于其他任何挂载点</em></strong></li><li><strong><em>其他挂载点必须为已经建立的目录，遵循FHS</em></strong></li><li><strong><em>所有挂载点在同一时间之内，只能挂载一次</em></strong></li><li><strong><em>所有硬盘分区在统一时间之内，只能挂载一下</em></strong></li><li><strong><em>如果卸载，必须先将工作目录移动到挂载点之外</em></strong></li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/fstab<span class="token comment" spellcheck="true"># /etc/fstab: static file system information.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Use 'blkid' to print the universally unique identifier for a</span><span class="token comment" spellcheck="true"># device; this may be used with UUID= as a more robust way to name devices</span><span class="token comment" spellcheck="true"># that works even if disks are added and removed. See fstab(5).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># &lt;file system> &lt;mount point>   &lt;type>  &lt;options>       &lt;dump>  &lt;pass></span><span class="token comment" spellcheck="true"># / was on /dev/nvme0n1p5 during installation</span>UUID<span class="token operator">=</span>2f6b6a4f-29e2-4a7e-a790-523499851033 /               ext4    errors<span class="token operator">=</span>remount-ro 0       1<span class="token comment" spellcheck="true"># /boot/efi was on /dev/nvme0n1p1 during installation</span>UUID<span class="token operator">=</span>C6A3-B7DE  /boot/efi       vfat    umask<span class="token operator">=</span>0077      0       1/swapfile                                 none            swap    sw              0       0</code></pre><p><code>/etc/fstab</code>存储的就像我们利用mount命令挂载时所有参数和选项都写入的一个文件。还多余一个dump备份命令，和启动时是否使用fsck系统欧冠你检验有关。</p><p>这六个字段的内容 <strong><em>十分重要！</em></strong></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>file system<span class="token operator">></span> <span class="token operator">&lt;</span>mount point<span class="token operator">></span>   <span class="token operator">&lt;</span>type<span class="token operator">></span>      <span class="token operator">&lt;</span>options<span class="token operator">></span>       <span class="token operator">&lt;</span>dump<span class="token operator">></span>  <span class="token operator">&lt;</span>pass<span class="token operator">></span><span class="token operator">&lt;</span> 设备/UUID等<span class="token operator">></span> <span class="token operator">&lt;</span>  挂 载 点  <span class="token operator">></span>   <span class="token operator">&lt;</span>文件系统<span class="token operator">></span>  <span class="token operator">&lt;</span>文件系统参数<span class="token operator">></span>      <span class="token operator">&lt;</span>dump<span class="token operator">></span>  <span class="token operator">&lt;</span>pass<span class="token operator">></span></code></pre><ul><li>第一栏：磁盘设备文件名/UUID/LABEL name</li></ul><p>这里的三个参数，填写任意一个都可以，建议使用blkid命令查询uuid来填写。</p><ul><li>第二栏：挂载点（mount name）</li></ul><p><strong><em>一定是目录</em></strong></p><ul><li>第三栏：磁盘分区的文件系统</li></ul><p>磁盘分区的文件系统，手动挂载时，系统可以自动检测，但是刚开机时系统并不能分析磁盘的文件系统格式，所以必须要手动写入。</p><ul><li>第四栏：文件系统参数</li></ul><table><thead><tr><th>参数</th><th>内容意义</th></tr></thead><tbody><tr><td>async/sync  异步/同步</td><td>设置磁盘是否以是否以异步方式运行，默认为async（性能较佳）</td></tr><tr><td>auto/noauto  自动/非自动</td><td>当执行mount -a时，此文件系统是否会被主动的检测挂载，默认为auto</td></tr><tr><td>rw/ro 可擦写/只读</td><td>设置ro后，不论是否设置w权限，都无法写入数据</td></tr><tr><td>exec/noexec 可执行/不可执行</td><td>限制文件系统是否可以[执行]的操作，不要随便使用</td></tr><tr><td>user/nouser 允许/不允许用户挂载</td><td>是否希望一般身份的用户是用moount命令挂载，</td></tr><tr><td>suid/nosuid 具有/不具有suid权限</td><td>是否允许SUID的存在</td></tr><tr><td>defaults</td><td>是否使用默认参数配置</td></tr></tbody></table><ul><li>第五栏：能否被dump备份命令作用</li><li>第六栏：是否检查过</li></ul><p>所以设置自动挂载只要将磁盘的信息写入<code>/etc/fstab</code>文件即可</p><pre class=" language-bash"><code class="language-bash">$ blkid/dev/nvme0n1: PTUUID<span class="token operator">=</span><span class="token string">"7d95f9f1-8d34-4ba7-b555-9c68c5d996d6"</span> PTTYPE<span class="token operator">=</span><span class="token string">"gpt"</span>/dev/nvme0n1p1: LABEL<span class="token operator">=</span><span class="token string">"SYSTEM"</span> UUID<span class="token operator">=</span><span class="token string">"C6A3-B7DE"</span> TYPE<span class="token operator">=</span><span class="token string">"vfat"</span> PARTLABEL<span class="token operator">=</span><span class="token string">"EFI system partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"3e25bbec-3e10-4901-8c33-ceeadbc12d69"</span>/dev/nvme0n1p2: PARTLABEL<span class="token operator">=</span><span class="token string">"Microsoft reserved partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"6396a370-a595-4cd8-80a4-3931e3d3df28"</span>/dev/nvme0n1p3: LABEL<span class="token operator">=</span><span class="token string">"Windows"</span> UUID<span class="token operator">=</span><span class="token string">"B438A7FA38A7BA2E"</span> TYPE<span class="token operator">=</span><span class="token string">"ntfs"</span> PARTLABEL<span class="token operator">=</span><span class="token string">"Basic data partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"f6d4beeb-a0dc-48ed-827b-b63cf7cd1084"</span>/dev/nvme0n1p4: UUID<span class="token operator">=</span><span class="token string">"38cdd582-dff7-4be3-8e55-0cb51fea7c4a"</span> TYPE<span class="token operator">=</span><span class="token string">"ext4"</span> PARTLABEL<span class="token operator">=</span><span class="token string">"Basic data partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"57487810-e2b8-47ff-a2f3-531981effd18"</span>/dev/nvme0n1p5: UUID<span class="token operator">=</span><span class="token string">"2f6b6a4f-29e2-4a7e-a790-523499851033"</span> TYPE<span class="token operator">=</span><span class="token string">"ext4"</span> PARTUUID<span class="token operator">=</span><span class="token string">"150f0697-4ae7-4957-830f-a91e40d03577"</span>/dev/nvme0n1p6: LABEL<span class="token operator">=</span><span class="token string">"WinRE_DRV"</span> UUID<span class="token operator">=</span><span class="token string">"E60CA85F0CA82C8D"</span> TYPE<span class="token operator">=</span><span class="token string">"ntfs"</span> PARTLABEL<span class="token operator">=</span><span class="token string">"Basic data partition"</span> PARTUUID<span class="token operator">=</span><span class="token string">"58abc9c9-e11e-4dd8-9a3f-2dab172fa72c"</span>$ <span class="token function">nano</span> /etc/fstab <span class="token comment" spellcheck="true">#可以自己修改一下文件排版</span>UUID<span class="token operator">=</span><span class="token string">"38cdd582-dff7-4be3-8e55-0cb51fea7c4a"</span> /home/jason/Device ext4 defaults 0 1$ <span class="token function">df</span> <span class="token comment" spellcheck="true">#观察一下磁盘是否已经挂载</span>Filesystem     1K-blocks     Used Available Use% Mounted onudev             8053080        0   8053080   0% /devtmpfs            1616676     2196   1614480   1% /run/dev/nvme0n1p5  97527092 75489768  17040204  82% /tmpfs            8083376     2156   8081220   1% /dev/shmtmpfs               5120        4      5116   1% /run/locktmpfs            8083376        0   8083376   0% /sys/fs/cgrouptmpfs            1616672       12   1616660   1% /run/user/121tmpfs            1616672       36   1616636   1% /run/user/1000/dev/sda1       15666400 11506912   4159488  74% /media/jason/E86B-1D06tmpfs            1616672        0   1616672   0% /run/user/0<span class="token comment" spellcheck="true"># 并没有被挂载</span>$ <span class="token function">umount</span> 磁盘 <span class="token comment" spellcheck="true">#如果被挂载，先卸载</span>$ <span class="token function">mount</span> -a <span class="token comment" spellcheck="true">#测试我们文件力度语法是否有错误，因为如果写错了，Linux可能无法启动</span>$ <span class="token function">df</span> /home/jason/Device <span class="token comment" spellcheck="true">#挂载成功</span>Filesystem     1K-blocks  Used Available Use% Mounted on/dev/nvme0n1p4  10254612    36888   9677104   1% /home/jason/Device</code></pre><p><code>/etc/fstab</code>是启动事配置文件，实际文件系统的挂载是记录到<code>/etc/mtab</code>和<code>/proc/mounts</code>中的，如果你的配置文件有问题，无法顺利启动进入担任模式中，<code>/etc/fstab</code>文件是只读模式时：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mount</span> -n -o remount,rw /</code></pre><p>即可。</p><p>重启df查看，发现设备已经自动挂载</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">reboot</span>$ <span class="token function">df</span>Filesystem     1K-blocks     Used Available Use% Mounted onudev             8053080        0   8053080   0% /devtmpfs            1616676     2164   1614512   1% /run/dev/nvme0n1p5  97527092 75506300  17023672  82% /tmpfs            8083376      648   8082728   1% /dev/shmtmpfs               5120        4      5116   1% /run/locktmpfs            8083376        0   8083376   0% /sys/fs/cgroup/dev/loop0         15104    15104         0 100% /snap/gnome-characters/206/dev/nvme0n1p4  10254612    36888   9677104   1% /home/jason/Devicetmpfs            1616672       12   1616660   1% /run/user/121tmpfs            1616672       32   1616640   1% /run/user/1000/dev/sda1       15666400 11506912   4159488  74% /media/jason/E86B-1D06tmpfs            1616672        0   1616672   0% /run/user/0</code></pre><h4 id="特殊设备loop挂载"><a href="#特殊设备loop挂载" class="headerlink" title="特殊设备loop挂载"></a>特殊设备loop挂载</h4><p>如果有光盘镜像文件，过着使用文件作为磁盘的方式时，就要用特别的方法挂在起来，不需要刻录。</p><ul><li>挂载CD/DVD镜像文件</li></ul><p>挂载镜像文件</p><pre class=" language-bash"><code class="language-bash">$ ll -h CentOS-7-x86_64-DVD-1810.iso-rw-rw-r-- 1 jason jason 4.3G 12月  5 23:22 CentOS-7-x86_64-DVD-1810.iso$ <span class="token function">mkdir</span> ./centos_dvd$ <span class="token function">mount</span> -o loop ./CentOS-7-x86_64-DVD-1810.iso ./centos_dvdmount: /home/jason/Downloads/google/centos_dvd: WARNING: device write-protected, mounted read-only.$ <span class="token function">df</span> ./centos_dvdFilesystem     1K-blocks    Used Available Use% Mounted on/dev/loop29      4480476 4480476         0 100% /home/jason/Downloads/google/centos_dvd$ ll ./centos_dvdtotal 693drwxrwxr-x 8 root  root    2048 11月 26 07:53 ./drwxrwxr-x 9 jason jason   4096 4月  18 09:57 <span class="token punctuation">..</span>/-rw-rw-r-- 1 root  root      14 11月 26 00:01 CentOS_BuildTag-rw-r--r-- 1 root  root      29 11月 26 00:16 .discinfodrwxr-xr-x 3 root  root    2048 11月 26 00:20 EFI/-rw-rw-r-- 1 root  root     227 8月  30  2017 EULA-rw-rw-r-- 1 root  root   18009 12月 10  2015 GPLdrwxr-xr-x 3 root  root    2048 11月 26 00:21 images/drwxr-xr-x 2 root  root    2048 11月 26 00:20 isolinux/drwxr-xr-x 2 root  root    2048 11月 26 00:20 LiveOS/drwxrwxr-x 2 root  root  663552 11月 26 07:52 Packages/drwxrwxr-x 2 root  root    4096 11月 26 07:53 repodata/-rw-rw-r-- 1 root  root    1690 12月 10  2015 RPM-GPG-KEY-CentOS-7-rw-rw-r-- 1 root  root    1690 12月 10  2015 RPM-GPG-KEY-CentOS-Testing-7-r--r--r-- 1 root  root    2883 11月 26 07:54 TRANS.TBL-rw-r--r-- 1 root  root     354 11月 26 00:21 .treeinfo$ unmount ./centos_dvd <span class="token comment" spellcheck="true">#测试完成记得卸载</span></code></pre><p>MD5验证码可以确保设备内部文件的验证。</p><ul><li>建立大文件以制作loop设备文件</li></ul><p>比如分配系统的时候，犯懒只设置了一个根目录，这样就无法机型额外的分区了，我们可以话分出一个打文件，然后将这个文件loop挂载，这样感觉上就多了一个分区。</p><p>Linux下我们可以通过dd命令来建立一个空文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/srv/loopdev bs<span class="token operator">=</span>1M count<span class="token operator">=</span>512512+0 records <span class="token keyword">in</span>512+0 records out536870912 bytes <span class="token punctuation">(</span>537 MB, 512 MiB<span class="token punctuation">)</span> copied, 0.479746 s, 1.1 GB/s<span class="token comment" spellcheck="true"># 命令解释</span><span class="token comment" spellcheck="true"># if input file 输入文件，/dev/zero是一直输出0的设备文件</span><span class="token comment" spellcheck="true"># of output file 输出文件</span><span class="token comment" spellcheck="true"># bs 每个block的大小</span><span class="token comment" spellcheck="true"># count 总共几个bs</span>$ ll -h /srv/loopdev-rw-r--r-- 1 root root 512M 4月  18 10:28 /srv/loopdev$ mkfs.ext4  /srv/loopdev <span class="token comment" spellcheck="true">#对文件进行格式化</span>mke2fs 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>Discarding device blocks: <span class="token keyword">done</span>Creating filesystem with 131072 4k blocks and 32768 inodesFilesystem UUID: 908d7f09-4ab2-4704-a509-d4721e3e4dccSuperblock backups stored on blocks:    32768, 98304Allocating group tables: <span class="token keyword">done</span>Writing inode tables: <span class="token keyword">done</span>Creating journal <span class="token punctuation">(</span>4096 blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>Writing superblocks and filesystem accounting information: <span class="token keyword">done</span>$ blkid /srv/loopdev/srv/loopdev: UUID<span class="token operator">=</span><span class="token string">"908d7f09-4ab2-4704-a509-d4721e3e4dcc"</span> TYPE<span class="token operator">=</span><span class="token string">"ext4"</span><span class="token comment" spellcheck="true"># 挂载</span>$ <span class="token function">mount</span> -o loop UUID<span class="token operator">=</span><span class="token string">"908d7f09-4ab2-4704-a509-d4721e3e4dcc"</span> /mnt$ <span class="token function">df</span> /mntFilesystem     1K-blocks  Used Available Use% Mounted on/dev/loop29       499656   780    462180   1% /mnt</code></pre><p>通过这个方法可以在不改变原来的环境的情况下，进行分区操作，其实Linux下的虚拟机软件也是基于这个原理来进行的。</p><p>下面将这个文件永久的挂载起来</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">nano</span> /etc/fstab/srv/loopdev /media/jason/file ext4 defaults 0 1$ <span class="token function">umount</span> /mnt$ <span class="token function">mkdir</span> /media/jason/file$ <span class="token function">mount</span> -a$ <span class="token function">df</span> /media/jason/fileFilesystem     1K-blocks  Used Available Use% Mounted on/dev/loop29       499656   780    462180   1% /media/jason/file</code></pre><h3 id="内存交换分区swap之创建"><a href="#内存交换分区swap之创建" class="headerlink" title="内存交换分区swap之创建"></a>内存交换分区swap之创建</h3><p><code>/swap</code>是在物理内存不够时，用来临时存放内粗你数据的地方，现在个人pc的内存基本上都是足够的，但是到了服务器的场景下就不一定了，所以还是预留好<code>/swap</code>分区以备不时之需。</p><ul><li>设置一个内存交换分区</li><li>建立一个虚拟内存文件<h4 id="使用物理分区创建内存交换分区"><a href="#使用物理分区创建内存交换分区" class="headerlink" title="使用物理分区创建内存交换分区"></a>使用物理分区创建内存交换分区</h4></li><li>1.分区：使用gdisk在磁盘中划分一个分区作为内存交换分区</li><li>2.格式化：利用建立内存交换分区的格式的mkswap格式化为内存交换分区格式</li><li>3.使用：swapon</li><li>4.观察：free和swapon -s观察内存使用量</li></ul><pre class=" language-bash"><code class="language-bash">$ gdisk /dev/nvme0n1GPT <span class="token function">fdisk</span> <span class="token punctuation">(</span>gdisk<span class="token punctuation">)</span> version 1.0.3Partition table scan:  MBR: not present  BSD: not present  APM: not present  GPT: not presentCreating new GPT entries.Command <span class="token punctuation">(</span>? <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition number <span class="token punctuation">(</span>1-128, default 1<span class="token punctuation">)</span>:First sector <span class="token punctuation">(</span>34-20969438, default <span class="token operator">=</span> 2048<span class="token punctuation">)</span> or <span class="token punctuation">{</span>+-<span class="token punctuation">}</span>size<span class="token punctuation">{</span>KMGTP<span class="token punctuation">}</span>:Last sector <span class="token punctuation">(</span>2048-20969438, default <span class="token operator">=</span> 20969438<span class="token punctuation">)</span> or <span class="token punctuation">{</span>+-<span class="token punctuation">}</span>size<span class="token punctuation">{</span>KMGTP<span class="token punctuation">}</span>: +512MCurrent <span class="token function">type</span> is <span class="token string">'Linux filesystem'</span>Hex code or GUID <span class="token punctuation">(</span>L to show codes, Enter <span class="token operator">=</span> 8300<span class="token punctuation">)</span>: 8200Changed <span class="token function">type</span> of partition to <span class="token string">'Linux swap'</span>Command <span class="token punctuation">(</span>? <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/nvme0n1p4: 20969472 sectors, 10.0 GiBSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512/512 bytesDisk identifier <span class="token punctuation">(</span>GUID<span class="token punctuation">)</span>: 2A01F71D-7DD6-446D-B3E6-65A6FDF8C79BPartition table holds up to 128 entriesMain partition table begins at sector 2 and ends at sector 33First usable sector is 34, last usable sector is 20969438Partitions will be aligned on 2048-sector boundariesTotal <span class="token function">free</span> space is 19920829 sectors <span class="token punctuation">(</span>9.5 GiB<span class="token punctuation">)</span>Number  Start <span class="token punctuation">(</span>sector<span class="token punctuation">)</span>    End <span class="token punctuation">(</span>sector<span class="token punctuation">)</span>  Size       Code  Name   1            2048         1050623   512.0 MiB   8200  Linux swapCommand <span class="token punctuation">(</span>? <span class="token keyword">for</span> help<span class="token punctuation">)</span>: wFinal checks complete. About to <span class="token function">write</span> GPT data. THIS WILL OVERWRITE EXISTINGPARTITIONS<span class="token operator">!</span><span class="token operator">!</span>Do you want to proceed? <span class="token punctuation">(</span>Y/N<span class="token punctuation">)</span>: yOK<span class="token punctuation">;</span> writing new GUID partition table <span class="token punctuation">(</span>GPT<span class="token punctuation">)</span> to /dev/nvme0n1p4.Warning: The kernel is still using the old partition table.The new table will be used at the next <span class="token function">reboot</span> or after yourun partprobe<span class="token punctuation">(</span>8<span class="token punctuation">)</span> or kpartx<span class="token punctuation">(</span>8<span class="token punctuation">)</span>The operation has completed successfully.$ mkswap /dev/nvme0n1p6$ blkid /dev/nvme0n1p6$ <span class="token function">free</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:       16166752     1845564    11269080      848860     3052108    13156136 <span class="token comment" spellcheck="true">#物理内存</span>Swap:       2097148           0     2097148                                     <span class="token comment" spellcheck="true">#swap相关</span>$ swapon /dev/nvme0n1p6$ <span class="token function">free</span>total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:       16166752     1845564    11269080      848860     3052108    13156136 <span class="token comment" spellcheck="true">#物理内存</span>Swap:       2597148           0     2597148                                     <span class="token comment" spellcheck="true">#swap相关</span>$ swapon -s$ <span class="token function">nano</span> /etc/fstabUUID<span class="token operator">=</span><span class="token string">"38cdd582-dff7-4be3-8e55-0cb51fea7c4a"</span> swap swap defaults 0 1</code></pre><h4 id="使用文件创建文件交换分区"><a href="#使用文件创建文件交换分区" class="headerlink" title="使用文件创建文件交换分区"></a>使用文件创建文件交换分区</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/tmp/swap bs<span class="token operator">=</span>1M count<span class="token operator">=</span>128128+0 records <span class="token keyword">in</span>128+0 records out134217728 bytes <span class="token punctuation">(</span>134 MB, 128 MiB<span class="token punctuation">)</span> copied, 0.183657 s, 731 MB/s$ ll -h /tmp/swap-rw-r--r-- 1 root root 128M 4月  18 11:21 /tmp/swap$ mkswap /tmp/swapmkswap: /tmp/swap: insecure permissions 0644, 0600 suggested.Setting up swapspace version 1, size <span class="token operator">=</span> 128 MiB <span class="token punctuation">(</span>134213632 bytes<span class="token punctuation">)</span>no label, UUID<span class="token operator">=</span>8237d888-982a-46d2-b753-bc38b2d6d588$ swapon /tmp/swapswapon: /tmp/swap: insecure permissions 0644, 0600 suggested.$ swapon -sFilename                Type        Size    Used    Priority/swapfile                                  <span class="token function">file</span>        2097148    0    -2/tmp/swap                                  <span class="token function">file</span>        131068    0    -3$ <span class="token function">nano</span> /etc/fstab/tmp/swap                                   swap                 swap   defaults            0       1<span class="token comment" spellcheck="true"># 这里不使用UIUD，因为系统仅会查询区块设备文件，不会查询文件</span>$ swapoff /tmp/swap$ swapon -sFilename                Type        Size    Used    Priority/swapfile                                  <span class="token function">file</span>        2097148    0    -2$ swapon -a$ swapon -s</code></pre><h3 id="文件系统的特殊观察与操作"><a href="#文件系统的特殊观察与操作" class="headerlink" title="文件系统的特殊观察与操作"></a>文件系统的特殊观察与操作</h3><h4 id="磁盘空间之浪费问题"><a href="#磁盘空间之浪费问题" class="headerlink" title="磁盘空间之浪费问题"></a>磁盘空间之浪费问题</h4><p>其实整个文件系统中的超级区块，inode对照表等其他中介数据都会浪费容量，</p><pre class=" language-bash"><code class="language-bash">$ ll -shtotal 204K4.0K drwx------ 26 root  root  4.0K 4月  15 16:52 ./4.0K drwxr-xr-x 27 root  root  4.0K 4月  15 09:53 <span class="token punctuation">..</span>/4.0K drwxr-xr-x  3 root  root  4.0K 8月  26  2018 .android/4.0K drwxr-xr-x  3 root  root  4.0K 8月  26  2018 Android/4.0K drwxr-xr-x  4 root  root  4.0K 8月  26  2018 .AndroidStudio3.1/4.0K drwxr-xr-x  3 root  root  4.0K 8月  26  2018 AndroidStudioProjects/4.0K -rw-r--r--  1 root  root   113 9月   6  2018 .apport-ignore.xml <span class="token operator">&lt;</span>--这个文件只有113b，去占用了一个4k的区块 40K -rw-------  1 root  root   34K 4月  18 10:23 .bash_history4.0K -rwxrwxrwx  1 root  root  3.3K 3月  29 14:17 .bashrc*4.0K drwx------  8 root  root  4.0K 4月  15 16:52 .cache/4.0K drwx------ 10 root  root  4.0K 4月  15 16:52 .config/4.0K drwx------  3 root  root  4.0K 8月  26  2018 .dbus/4.0K drwx------  2 root  root  4.0K 4月   8 08:29 .gconf/4.0K -rw-r--r--  1 root  root    55 11月 29 20:56 .gitconfig<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h4 id="利用GNU的parted进行分区操作"><a href="#利用GNU的parted进行分区操作" class="headerlink" title="利用GNU的parted进行分区操作"></a>利用GNU的parted进行分区操作</h4><pre class=" language-bash"><code class="language-bash">$ parted <span class="token punctuation">[</span>设备<span class="token punctuation">]</span> <span class="token punctuation">[</span>命令<span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">]</span>选项与参数：命令功能：      新增分区： mkpart <span class="token punctuation">[</span>primary<span class="token operator">|</span>logical<span class="token operator">|</span>Extended<span class="token punctuation">]</span> <span class="token punctuation">[</span>ext4<span class="token operator">|</span>vfat<span class="token operator">|</span>xfs<span class="token punctuation">]</span> 开始 结束      显示分区： print      删除分区： <span class="token function">rm</span> <span class="token punctuation">[</span>partition<span class="token punctuation">]</span>$ parted /dev/nvme0n1 print <span class="token comment" spellcheck="true">#列出本机分区表</span>Model: INTEL SSDPEKKF256G8L <span class="token punctuation">(</span>nvme<span class="token punctuation">)</span>Disk /dev/nvme0n1: 256GBSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512BPartition Table: gptDisk Flags:Number  Start   End    Size    File system  Name                          Flags 1      1049kB  274MB  273MB   fat32        EFI system partition          boot, hidden, esp 2      274MB   290MB  16.8MB               Microsoft reserved partition  msftres 3      290MB   142GB  142GB   ntfs         Basic data partition          msftdata 4      142GB   153GB  10.7GB  ext4         Basic data partition          msftdata 5      153GB   255GB  102GB   ext4 6      255GB   256GB  1049MB  ntfs         Basic data partition          hidden, diag$ parted /dev/nvme0n1p5 mklabel mbr <span class="token comment" spellcheck="true">#改变分区表格式，这样会损坏整个文件系统</span>$ parted /dev/nvme0n1p5 mkpart primary fat32 36.0G 36.5G <span class="token comment" spellcheck="true">#建立新的分区</span></code></pre><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>压缩指令为透过一些运算方法去将原本的文件进行压缩,以减少文件所占用的磁盘容量。 压缩前与压缩后<br>的文件所占用的磁盘容量比值, 就可以被称为是『压缩比』</li><li>压缩的好处是可以减少磁盘容量的浪费,在 WWW 网站也可以利用文件压缩的技术来进行数据的传送,好<br>让网站带宽的可利用率上升喔</li><li>压缩文件案的扩展名大多是:『*.gz, *.bz2, *.xz, *.tar, *.tar.gz, *.tar.bz2, *.tar.xz』</li><li>常见的压缩指令有 gzip, bzip2, xz。压缩率最佳的是 xz,若可以不计时间成本,建议使用 xz 进行压缩。</li><li>tar 可以用来进行文件打包,并可支持 gzip, bzip2, xz 的压缩。</li><li>压缩:tar -Jcv -f filename.tar.xz 要被压缩的文件或目录名称</li><li>查询:tar -Jtv -f filename.tar.xz</li><li>解压缩:tar -Jxv -f filename.tar.xz -C 欲解压缩的目录</li><li>xfsdump 指令可备份文件系统或单一目录</li><li>xfsdump 的备份若针对文件系统时,可进行 0-9 的 level 差异备份!其中 level 0 为完整备份;</li><li>xfsrestore 指令可还原被 xfsdump 建置的备份档;</li><li>要建立光盘刻录数据时,可透过 mkisofs 指令来建置;<br>= 可透过 wodim 来写入 CD 或 DVD 刻录机</li><li>dd 可备份完整的 partition 或 disk ,因为 dd 可读取磁盘的 sector 表面数据</li><li>cpio 为相当优秀的备份指令,不过必须要搭配类似 find 指令来读入欲备份的文件名数据,方可进行备份动作。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代编译原理-C语言描述》（3）- 语法分析</title>
      <link href="/2019/04/01/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-3/"/>
      <url>/2019/04/01/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-3/</url>
      
        <content type="html"><![CDATA[<h3 id="第三章-语法分析"><a href="#第三章-语法分析" class="headerlink" title="第三章 语法分析"></a>第三章 语法分析</h3><blockquote><p>语法(syn-tax):组合单词以形成词组,从句或句子的方法。<br>—-韦氏词典</p></blockquote><p><strong>* 一个状态数为N的自动机无法记忆嵌套深度大于N的括号 *</strong>,因为状态数为N的自动机一定会到达终态，并无法继续读入。词法分析器Lex实现上一章中的<code>digits</code>时，只要简单的用<code>digits</code>右部的式子<code>[0-9]+</code>来替换就可以了。但是这种方式对于下面给出的三个正则表达式却行不通：</p><pre><code>digits=[0-9]+sum=expr&quot;+&quot;exprexpr=&quot;(&quot;sum&quot;)&quot;|digits</code></pre><p>我们可以尝试一下将expr中的sum替换掉<code>expr=&quot;(&quot;expr&quot;+&quot;expr&quot;)&quot;|digits</code>,但是如果继续用expr替换自身，右部依然会出现expr，并且数量会越来越多。</p><p>所以这种形式的缩写并不能增强正则表达式的语言描述能力（它并没有定义额外的语言），除非这种缩写形式是递归的。但是这种递归带来的额外的表达能力正是语法分析所需要的，一旦有了递归的缩写形式，则出来在表达式的顶层之外，可以不再需要可选操作。克林闭包也不再是必须的。</p><p>这样我们就得到了一种简单的表示法，称为上下文无关文法（context-free grammer）。事实上文法也可以用来描述词法单词的结构。但是我们需要比DFA更强大的方法来分析文法所描述的语言。</p><h4 id="上下文无关文法"><a href="#上下文无关文法" class="headerlink" title="上下文无关文法"></a>上下文无关文法</h4><p>对于语法分析而言：</p><pre><code>字符串---源程序符号---词法单词字母表---词法分析器返回的单词类型集合</code></pre><p>每一个符号或是终结符（terminal）（老子字母表中的单词），非终结符（nonterminal）（绝不会出现在产生式的左部）。还有一个开始符号。</p><p>文法3-1直线式程序的语法：<br><img src="https://s2.ax1x.com/2019/04/01/AyCHo9.png" alt="AyCHo9.png"></p><pre><code>终结符：id print num + ,（ ） := ；非终结符：S E L</code></pre><p>由3-1写成的源程序</p><pre><code>a := 7;b := c + (d := 5+ 6, d)</code></pre><p>其中名字<code>a，b，c，d</code>和数字是与其中一些单词相关联的语义值（semantic value）。</p><h5 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h5><p>derivation，从开始符号，对右部的每一个非终结符都用此非终结符对应的产生式中的一个右部来替换。<br><a href="https://imgchr.com/i/AyPaTJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AyPaTJ.png" alt="AyPaTJ.png"></a><br>这里很容易想到一个句子可以存在多种不同的推导，其中有两种推导：</p><ul><li>最左推导（leftmost derivation）：是一种总是扩展最左边非终结符的推导</li><li>最右推导（rightmost derivation）：是一种总是扩展最右边非终结符的推导</li></ul><p>3-1既不是最左推导也不是最右推导</p><h5 id="语法分析树"><a href="#语法分析树" class="headerlink" title="语法分析树"></a>语法分析树</h5><p>parse tree，将推导中的各符号连接从他推导出来的符号<br><a href="https://imgchr.com/i/AyiY9I" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AyiY9I.png" alt="AyiY9I.png"></a><br>如上图，两种不同的推导可以有相同的语法树。</p><h5 id="二义性语法"><a href="#二义性语法" class="headerlink" title="二义性语法"></a>二义性语法</h5><p>如果一个文法能够推导出两种不同语法树的句子，则该文法有二义性（ambiguous），句子有两颗语法分析树<br><a href="https://imgchr.com/i/AyiOKK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AyiOKK.png" alt="AyiOKK.png"></a><br>二义性文法会给编译带来问题，通常我们希望文法是无二义性的。二义性的文法通常也可以转换称无二义性的文法。</p><p>例如，文法3-2是一种而二义性的文法：<br><a href="https://imgchr.com/i/AyiOKK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AyiOKK.png" alt="AyiOKK.png"></a><br>我们假定<code>*</code>比<code>+</code>具有更紧密的约束，换言之，<code>*</code>具有较高的优先级。其次，假定每一种操作符都是左结合的，通过引入一个新的非终结符得到无二义性的文法3-3：<br><a href="https://imgchr.com/i/AyFaGR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AyFaGR.png" alt="AyFaGR.png"></a></p><pre><code>E---表达式expressionT---项termF---因子factor</code></pre><p>如果我们想让<code>*</code>是右结合的，只要将表达式改写为$T \rightarrow F*T$即可。</p><p>这种方法可以消除一些语言的二义性，但是一些语言只有有二义性的文法。</p><h5 id="文件结束符"><a href="#文件结束符" class="headerlink" title="文件结束符"></a>文件结束符</h5><p>语法分析器不仅会读入终结符，也会读入文件结束标志我们用<code>$</code>来表示。为了指明<code>$</code>必须出现在一个完整的S词组之后，需要引入一个新的开始符号$ S’ $ 以及一个新的产生式$ S’ \rightarrow S＄$<br>例如文法3-4：<br><a href="https://imgchr.com/i/AykKTe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AykKTe.png" alt="AykKTe.png"></a></p><h4 id="预测分析"><a href="#预测分析" class="headerlink" title="预测分析"></a>预测分析</h4><p>有一些文法使用一种称为递归下降（recursive descent）的简单算法就很容易进行分析，这种方法的本质是将文法产生式传唤为递归函数中的一个字句。下面为文法3-5写一个递归下降文法分析器。文法3-5：<br><img src="https://s2.ax1x.com/2019/04/01/AyEqFe.png" alt="AyEqFe.png"><br>这个语言的递归下降语法分析器对每一个非终结符有一个函数，非终结符的每个产生式对应一个字句：</p><pre><code>enum token{IF,THEN,ELSE,PRINT,BEGIN,END,NUM,EQ,SEMI};extern enum token getToken(void);enum token tok;void advance() {tok=getToken();}void eat(enum token t){if(tok==t) advance();else error();}void S(void){    switch(tok){        case IF: eat(IF);E();eat(THEN);S();                             eat(ELSE); S(); break;        case BEGIN:eat(BEGIN); S(); L(); break;        case PRINT:eat(PRINT); E(); break;        default: error();    }}void L(void){    switch(tok){        case END: eat(END); break;        case SEMI: eat(SEMI); S(); L(); break;        default: error();    }}voidE(void){    eat(NUM); eat(EQ); eat(NUM);}</code></pre><p>对于文法3-4：</p><pre><code>void S(void){ E(); eat(EOF);}void E(void){    switch(tok){        case ?:E(); eat(PLUS); T(); break;        case ?:E(); eat(MINUS); T(); break;        case ?:T(); break;        default: error();    }}void T(void){    switch(tok){        case ?:T();eat(TIMES);F();break;        case ?:T();eat(DIV); F(); break;        case ?:F();break;        default:error();    }}</code></pre><p>这事产生了一个冲突，函数E的前两个字句E并不知道该使用哪一个。</p><p>递归下降分析也称为预测（predictIve）分析，只适合于每个子表达式的第一个终结符号能够为产生式的选择提供足够信息的文法。</p><p>有时候使用分析器生成器并不方便，预测分析器的优点就在于我们可以使用它手工构造分析器。</p><h5 id="FIRST集合和FOLLOW集合"><a href="#FIRST集合和FOLLOW集合" class="headerlink" title="FIRST集合和FOLLOW集合"></a>FIRST集合和FOLLOW集合</h5><p>为了便于理解，下面我们形式化FIRST的概念，然后用一个简单的算法导出无冲突的递归下降语法分析器。</p><p>给定一个由终结符和非终结符组成的字符串 $\gamma$ ,FIRST( $\gamma$ ), 是可以从 $\gamma$中推导出的由终结符组成的字符串都必定以<code>id,num,(</code>开始。 因此有<br>$$<br>FIRST(T*F)={id,num,(}<br>$$<br>但是如果两个不同的产生式 $X \rightarrow \gamma_1$和 $X \rightarrow \gamma_2$具有相同的左部符号(X),并且它们的右部有重合的FIRST集合,则这个文法不能使用预测分析法来分析。</p><p>下面对文法3-6进行分析，文法3-6：<br><a href="https://imgchr.com/i/A6qDQH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/02/A6qDQH.md.png" alt="A6qDQH.md.png"></a><br>对一个特定的文法，当给定由终结符和非终结符组成的字符串 $\gamma$时下列论述成立：</p><ul><li>若X可以导出空串，那么nullable（X）为真。</li><li>FIRST（$\gamma$）是可从$\gamma$推导出的字符串的开头终结符的集合。</li><li>FOLLOW（X）是可以直接跟随于X之后的终结符集合。也就是说<ul><li>如果存在着任意一推导包含 Xt，则$t \in FOLLOW(X)$<ul><li>当推导包含XYZt，其中Y和Z都推导出 $\epsilon$时，也有$t \in FOLLOW(X)$。</li></ul></li></ul></li></ul><p>下面我们就可以给出计算字符串FIRST，FOLLOW，nullable集合的算法<br>    <img src="https://s2.ax1x.com/2019/04/02/A6LK0I.png" alt="A6LK0I.png"><br>计算这三个关系式时可不必同时计算，例如对于文法3-6，我们初始有：</p><table><thead><tr><th></th><th>nullable</th><th>FIRST</th><th>FOLLOW</th></tr></thead><tbody><tr><td>X</td><td>no</td><td></td><td></td></tr><tr><td>Y</td><td>no</td><td></td><td></td></tr><tr><td>Z</td><td>no</td><td></td><td></td></tr></tbody></table><p>在第一次迭代中，我们可以发现关系产生了变化</p><table><thead><tr><th></th><th>nullable</th><th>FIRST</th><th>FOLLOW</th></tr></thead><tbody><tr><td>X</td><td>no</td><td>a</td><td>c d</td></tr><tr><td>Y</td><td>yes</td><td>c</td><td>d</td></tr><tr><td>Z</td><td>no</td><td>d</td><td></td></tr></tbody></table><p>在第二次迭代中我们可以发现X也是可以为空的。因此</p><table><thead><tr><th></th><th>nullable</th><th>FIRST</th><th>FOLLOW</th></tr></thead><tbody><tr><td>X</td><td>yes</td><td>a c</td><td>a c d</td></tr><tr><td>Y</td><td>yes</td><td>c</td><td>a c d</td></tr><tr><td>Z</td><td>no</td><td>a c d</td><td></td></tr></tbody></table><p>在第三次迭代中，没有新的信息，于是算法中止。</p><p>也可以将FIRST关系推广到符号串中：<br>$$<br>\begin{align}<br>&amp;FIRST(X\gamma)=FIRST[X] \qquad \qquad \qquad \qquad  若！nullable[X]\\<br>&amp;FIRST(X\gamma)=FIRST[X] \cup FIRST(\gamma) \qquad 若nullable[X]\\<br>\end{align}<br>$$</p><h5 id="构造预测分析器"><a href="#构造预测分析器" class="headerlink" title="构造预测分析器"></a>构造预测分析器</h5><p>下面来介绍一种较为简单的方法。可以让我们手工构造预测分析器。假设我们有一个递归下降分析器，如果能为每一个 $(X,T)$ ,选择正确的产生式.我们所需要的所有信息都可以由一张二维表表示，即预测分析表（predicative parsing table）。<br><img src="https://s2.ax1x.com/2019/04/07/AhXPDf.png" alt="AhXPDf.png"><br>上图的文法具有二义性,会导致预测分析器有多重定义的项，这样无法得到一个程序设计语言。</p><p>若文法不含多重定义的项，则称其为 $LL（1）$ 型文法， $LL（1）$ 代表 <strong><em>从左到右分析，最左推导和超前查看一个符号（Left-to-right parse,Leftmost-derivation，1-symbol lookhead）</em></strong> 。推广 $ FIRST $ 集合的概念，对于任何k，不存在任何有二义性的文法是<br>$ LL（k）$ 型文法，但是这样会预测分析表过于庞大，很少会采用这种方法，但有时在手工编写递归下降分析器时会遇到这样的情况。</p><h5 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h5><p>$$<br>\begin{align}<br>&amp; E \rightarrow E + T \\<br>&amp; E \rightarrow T<br>\end{align}<br>$$<br>会导致左递归（left recursion），具有左递归的文法不是 $LL（1）$ 型文法。为了消除左递归，我们可以用右递归来重写产生式，引入一个新的非终结符 $E’$ ,并将产生式重写为：</p><p>$$<br>\begin{align}<br>&amp; E \rightarrow T E’ \\<br>&amp; E \rightarrow +T E’ \\<br>&amp; E’ \rightarrow<br>\end{align}<br>$$</p><p>这样就获得了一个没有左递归的文法</p><h5 id="提取左因子"><a href="#提取左因子" class="headerlink" title="提取左因子"></a>提取左因子</h5><p>同左递归一样，<strong><em>当一个非终结符的的两个产生式以相同的符号开始时</em></strong> 会发生类似的问题，如：<br>$$<br>\begin{align}<br>&amp; S \rightarrow if\quad E \quad then\quad S \quad else\quad S \\<br>&amp; S \rightarrow if\quad E \quad then\quad S<br>\end{align}<br>$$<br>对文法提取左因子，取出非公共的尾部：<br>$$<br>\begin{align}<br>&amp; S \rightarrow if\quad E \quad then\quad S \quad X \\<br>&amp; S \rightarrow \\<br>&amp; S \rightarrow else \quad S<br>\end{align}<br>$$</p><h5 id="错误恢复"><a href="#错误恢复" class="headerlink" title="错误恢复"></a>错误恢复</h5><p>文法3-7的代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>tok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> ID<span class="token punctuation">:</span>        <span class="token keyword">case</span> NUM<span class="token punctuation">:</span>        <span class="token keyword">case</span> LPAREN<span class="token punctuation">:</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tprime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> error<span class="token operator">!</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Tprime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>tok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> PLUS<span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> TIMES<span class="token punctuation">:</span> <span class="token function">eat</span><span class="token punctuation">(</span>TIMES<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tprime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> RPAREN<span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> error<span class="token operator">!</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>错误处理的较好方式是：输出一条信息，然后尝试 <strong><em>恢复</em></strong> 错误，并继续后继处理，从而可以发现更多错误。</p><ul><li>插入单词<br>插入单词来进行错误恢复是一种危险的做法，可能插入会进一步导致其他错误，陷入死循环。插入法不必对实际的输入调整，假装存在某个单词，输出错误信息，然后返回即可<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>tok<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> ID<span class="token punctuation">:</span>      <span class="token keyword">case</span> NUM<span class="token punctuation">:</span>      <span class="token keyword">case</span> LPAREN<span class="token punctuation">:</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tprime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"expected id,num, or left-paren"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>删除单词<br>跳过若干个单词直至达到一个属于 FOLLOW 集合的单词为止.<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> TPrime_follow <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>PLUS <span class="token punctuation">,</span>RPAREN<span class="token punctuation">,</span><span class="token constant">EOF</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Tprime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>tok<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> PLUS<span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> TIMES<span class="token punctuation">:</span> <span class="token function">eat</span><span class="token punctuation">(</span>TIMES<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tprime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> RPAREN<span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token constant">EOF</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"expected +,*,right-paren, or end-of-file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">skipto</span><span class="token punctuation">(</span>TPrime_follow<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>递归下降分析器的错误恢复必须具有调整机制。尝试-出错-再尝试。<h4 id="LR分析"><a href="#LR分析" class="headerlink" title="LR分析"></a>LR分析</h4>LL(k)技术在看到等式右部的前k个单词就必须预测要使用的是哪一个产生式，另一种技术LR（k）分析，LR分析使用栈，这样可以在输入整个右部以后再做判断。LR（k）代表 <strong><em>从左到右分析,最右推导，超前查看k个单词（Left-to-right parse，Rightmost-derivation，k-tocken lookhead）</em></strong>。</li></ul><p>LR（k）分析有一个 <strong><em>栈</em></strong> 和一个 <strong><em>输入</em></strong>，输入中的前k个单词为超前查看的单词。根据栈和超前查看的单词，分析器执行两种动作</p><ul><li>移进：压栈，最后移进文件爱你结束符的动作称为接收（accepting）</li><li>归约：选择文法，弹出文法表达式的单词，移进等式左部。</li></ul><p><img src="https://s2.ax1x.com/2019/04/08/A4oijS.png" alt="A4oijS.png"></p><h5 id="LR分析引擎"><a href="#LR分析引擎" class="headerlink" title="LR分析引擎"></a>LR分析引擎</h5><p>又是Kunth真神开发的。ORZ</p><p>LR通过作用于栈的DFA来判断应该采取的策略，DFA的边是由非终结符和终结符来标记的。<br><a href="https://imgchr.com/i/A4okng" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/08/A4okng.png" alt="A4okng.png"></a><br>转换表中的元素有四种动作：</p><ul><li>sn 移进到状态n</li><li>gn 转换到状态n</li><li>rk 根据规则k归约</li><li>a 接受</li><li>错误</li></ul><p>对于每一个单词，分析器不是重新扫描栈，而是记住没一个栈元素到达的状态<br><a href="https://imgchr.com/i/A4oABQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/08/A4oABQ.png" alt="A4oABQ.png"></a></p><h5 id="LR（0）分析器生成器"><a href="#LR（0）分析器生成器" class="headerlink" title="LR（0）分析器生成器"></a>LR（0）分析器生成器</h5><p>上表说明了当k等于1时，当k=2时，这个表的每个序列是又两个单词组成的序列，实际编译器并不使用k&gt;1的表。我们使用文法3-8来构造一个LR（0）分析器，<br>文法3-8</p><p>最开始的状态是1</p><p>其中圆点代表分析器当前的位置，，文法规则与指出其右部位置的圆点组合称为项</p><ul><li>移进动作（shift action）<br>根据文法3-8可能会出现两个状态</li><li>转换动作（goto action）位移圆点，当某个文法被归约时，弹出所有右部符号</li><li>归约 动作（reduce action）</li></ul><p>可以得到DFA<br><a href="https://imgchr.com/i/A4TF8x" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/08/A4TF8x.png" alt="A4TF8x.png"></a></p><p>然后根据DFA可以构造出分析表<br><img src="https://s2.ax1x.com/2019/04/08/A4TlGt.png" alt="A4TlGt.png"></p><h5 id="SLR分析器的生成"><a href="#SLR分析器的生成" class="headerlink" title="SLR分析器的生成"></a>SLR分析器的生成</h5><p>比LR(0)更好的一种技术是SLR即Simple LR的简称，SLR和LR（0）的构造方法近乎相同，但是SLR只在FOLLOW集合制定的地方放置归约动作。</p><p>回忆LR(0)分析表的构造过程</p><ul><li>对于任意一条边 $I \xrightarrow{X} J$<ul><li>若X为终结符，则在表中 $(I,X)$ 加移进J(sJ)<ul><li>若X为非终结符，则在表中 $(I,X)$加转换J(gJ)</li></ul></li></ul></li><li>对于包含项 $S’ \rightarrow S.＄$ 的每个状态I我们在位置 $(I,＄)$ 放置接收动作（a）</li><li>对于包含项 $A \rightarrow \gamma$ 的状态，对每一个单词Y，放置归约n（rn）于 $(I,Y)$ 中。</li></ul><p>得到LR（0）的分析表以后我们判断是否rn的这个单词属于FOLLOW(A)，如果不属于则删除。</p><h5 id="LR（1）项和LR（1）分析表"><a href="#LR（1）项和LR（1）分析表" class="headerlink" title="LR（1）项和LR（1）分析表"></a>LR（1）项和LR（1）分析表</h5><p>LR（1）比SLR更为强大，相对于LR(0)分析，LR(1)分析表项的概念更见复杂，由三个要素构成：</p><ul><li>一个文法产生式</li><li>一个右部位置（圆点表示）</li><li>一个超前查看的符号</li></ul><p>即项 $(A \rightarrow \alpha,\beta,x)$ 指出：序列 $\alpha$ 在栈顶，且输入中开头的死可以从 $\beta x$ 中导出的符号串。</p><p>例如一个不是SLR的文法3-10有这样的DFA<br><a href="https://imgchr.com/i/A4vYLt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/08/A4vYLt.png" alt="A4vYLt.png"></a></p><p>只要产生式的结尾有圆点，那么在LR(1)分析表中，行为状态号，列为超前查看符的地方就存在一个归约动作。<br><img src="https://s2.ax1x.com/2019/04/08/A4vISJ.png" alt="A4vISJ.png"></p><h5 id="LALR（1）分析表"><a href="#LALR（1）分析表" class="headerlink" title="LALR（1）分析表"></a>LALR（1）分析表</h5><p>LALR(1)表即（Look-head LR(1)），观察DFA我们可以发许多状态都是重复的，为了节省空间，我们可以吧除了超前插卡符号，其他状态都相同的状态合并，这样就可以得到一个储存空间的较小的表，但是对于某些文法，LALR(1)含有归约-归约冲突，但是使劲应用中，这种影响非常小。</p><h5 id="各类文法的层次"><a href="#各类文法的层次" class="headerlink" title="各类文法的层次"></a>各类文法的层次</h5><p>所有的SLR型文法都是LALR(1)文法，但反之不成立。<br><a href="https://imgchr.com/i/A4x3kT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/08/A4x3kT.png" alt="A4x3kT.png"></a></p><p>LALR(1)文法已经变成程序设计语言和自动语法分析器的生成器的标准。</p><h5 id="二义性文法的LR分析"><a href="#二义性文法的LR分析" class="headerlink" title="二义性文法的LR分析"></a>二义性文法的LR分析</h5><p>许多文法含有二义性，这里我们采取最近匹配的原则，或者引入两个非终结符来重写语法。但是最好的方法还是消除二义性。</p><h4 id="使用分析器的生成器"><a href="#使用分析器的生成器" class="headerlink" title="使用分析器的生成器"></a>使用分析器的生成器</h4><p>Yacc(Yet another complier-complier)的规范分为三部分：</p><pre><code>parse declaration //终结符，非终结符组成的表%%grammer rules //产生式like  exp： exp PLUS exp { semantic action}%%programs  //原始C代码</code></pre><h5 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h5><p>Yacc可以指出两种冲突并自动解决</p><ul><li>移进-归约：优先移进</li><li>归约-归约：优先文法中靠前的规则</li></ul><h5 id="优先级指导"><a href="#优先级指导" class="headerlink" title="优先级指导"></a>优先级指导</h5><p>之前我们解决优先级的方法是引入两个辅助符号，但是还有一种方法是先构造出二义性文法的LR(1)分析表，然后修改表中的填入的内容来设定优先级的顺序。</p><p>Yacc有一种指明这类移进-归约冲突的 <strong>优先级指导命令</strong> ，like：</p><pre><code>%nonassoc EQ NEQ%left PLUS MINUS%left TIMES DIV%right EXP</code></pre><p>指出+和-是左结合的且优先级相同，*和/是左结合的且优先级相同并高于+,^是右结合的且优先级最高，=和！=是非结合的，且优先级低于+。当比较一个单词和一个规则的优先级时，规则的优先级有规则最右部的单词的优先级给出当单词和规则的优先级相同时，用%left指明的偏向于归约，而%right指明的偏向于移进。</p><p>我们也可以使用命令%prec来指明明确的优先级，可以解决这类问题，如一元负运算问题</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span> declarations of yylex and yyerror <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span>token INT PLUS MINUS TIMES UMINUS<span class="token operator">%</span>start exp<span class="token operator">%</span>left PLUS MINUS<span class="token operator">%</span>left TIMES<span class="token operator">%</span>left UMINUS<span class="token operator">%</span><span class="token operator">%</span>exp <span class="token punctuation">:</span>INT    <span class="token operator">|</span>exp PLUS exp    <span class="token operator">|</span>exp MINUS exp    <span class="token operator">|</span>exp TIMES exp    <span class="token operator">|</span>MINUS exp <span class="token operator">%</span>prec UMINUS</code></pre><h5 id="语法和语义"><a href="#语法和语义" class="headerlink" title="语法和语义"></a>语法和语义</h5><p>假如一个文法中既有布尔表达式又有算数表达式，算术运算的优先级高于布尔表达式，且布尔表达式不能与算数表达式相加。可以得到文法</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span> declarations of yylex and yyerror <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span>token ID ASSIGN PLUS MINUS AND EQUAL<span class="token operator">%</span>start stm<span class="token operator">%</span>left OR<span class="token operator">%</span>left AND<span class="token operator">%</span>left PLUS<span class="token operator">%</span><span class="token operator">%</span>stm <span class="token punctuation">:</span> ID ASSIGN ae    <span class="token operator">|</span> ID ASSIGN bebe  <span class="token punctuation">:</span>    <span class="token operator">|</span>be OR be    <span class="token operator">|</span>be AND be    <span class="token operator">|</span>ae EQUAL ae    <span class="token operator">|</span>IDae  <span class="token punctuation">:</span> ae PLUS ae    <span class="token operator">|</span> ID</code></pre><p>文法存在一个移进-归约冲突。解决办法是将问题推迟到语义分析的阶段，可以修改文法使其在文法上是合法的。</p><h4 id="错误恢复-1"><a href="#错误恢复-1" class="headerlink" title="错误恢复"></a>错误恢复</h4><p>我们希望编译器能够找出所有的错误，而不是在第一个错误处就停下并报错。</p><h5 id="用error符号恢复"><a href="#用error符号恢复" class="headerlink" title="用error符号恢复"></a>用error符号恢复</h5><p>局部错误分析</p><p>他哦难过调整分析栈和错误查出点的输入以允许分析能够继续进行的来实现的。 $error$ 符号控制对错误恢复的处理， $error$ 可以匹配一串出错的输入单词。</p><p>分析器在表达式的中间遇到错误时，应该跳到下一个分号或右括号处[aka 同步单词（synchronizing token）]。可以通过增加两个错误恢复产生式，实现这一点<br>$$<br>\begin{align}<br>&amp; exp \rightarrow (error) \\<br>&amp; eps \rightarrow error;exp<br>\end{align}<br>$$</p><p>$error$被看作是一个终结符，当LR分析器遇到 $error$时采取：</p><ul><li>依次弹出栈顶的符号直至达到某个状态关于 $error$的状态是移进</li><li>移进 $error$ 单词</li><li>必要时 依次跳过输入符号直至达到一个超前查看单词，这个单词在当前状态有一个非错误的动作</li><li>重新开始分析</li></ul><p>需要注意的是Yacc的文法规则可能带有语义动作（semantic action）。可能会导致一些难以想象的语义动作</p><h5 id="全局错误分析（global-error-repair）"><a href="#全局错误分析（global-error-repair）" class="headerlink" title="全局错误分析（global error repair）"></a>全局错误分析（global error repair）</h5><p>最好的办法是在输入流出错点之前插入或删除单词。我们寻找的是可以将原先程序变为正确语法的最小的插入或删除集合，即使插入和删除的位置并不是LL或LR分分析器首先报告错误的地点。</p><ul><li>Burke-Fisher错误修复</li></ul><p>顾名思义是Burke和Fisher发明的错误分析方法啊，这是一个通过管理一个K个单词的序列和两个分析栈来实现错误修复的策略。也就是说，假设K=15，若分析器在扫描到输入的第100个单词时遇到了语法错误，那将在第85到100之间的单词尝试每一种可能的修复。，通常若一次修复能够使分析器超过错误点继续前进R=4个单词，就是一次足够好的修复。分析器要回退到K个单词之后重新开始分析，所以要管理两个栈，当前栈和老栈。每当移进一个新单词，将新单词压当前栈，，将新单词压入队列尾部，并取出队列头压老栈。</p><p>在有N个单词的序列中存在 $K+K<em>N+K</em>N$种可能性。</p><ul><li>语义动作</li></ul><p>BF错误恢复法，在当前栈并不执行语义动作，而是推迟到老栈进行。也就是说语义执行的地点会提前K+R个单词，如果语义对词法分析的行为有影响，那就很不妙。</p><ul><li>插入单词的语义值</li></ul><p>分析器需要为每个插入的单词提供一个语义值，使得语义动作的执行就像这些单词原本就来自词法分析器，Yacc提供了一个%value指导命令，允许程序员指明插入的单词的值。</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span>value <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token string">"bogus"</span><span class="token punctuation">)</span><span class="token operator">%</span>value <span class="token function">INT</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>value <span class="token function">STRING</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><ul><li>程序员制定的替代</li></ul><p>程序员可以使用%change指导命令来给出首选尝试的建议</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span>change  <span class="token operator">|</span>EQ <span class="token operator">-></span> ASSIGN <span class="token operator">|</span> ASSIGN <span class="token operator">-></span> EQSEMICOLON ELSE <span class="token operator">-></span> ELSE<span class="token operator">|</span> <span class="token operator">-></span> IN INT END</code></pre><p>插入in 0 end是非常重要的更正，成为作用域关闭器（scope closer），可以在编译器需要三个单词才能关闭作用域时，关闭作用域。</p><h4 id="程序设计：语法分析"><a href="#程序设计：语法分析" class="headerlink" title="程序设计：语法分析"></a>程序设计：语法分析</h4><p>在<code>chap03</code>目录下的文件分别是</p><pre class=" language-c"><code class="language-c">errormsg<span class="token punctuation">.</span>c   \\存放出错的数据结构，帮助产生文件名和行号的报错信息lex<span class="token punctuation">.</span>yy<span class="token punctuation">.</span>c     \\作者提供的词法分析器的输出parsetest<span class="token punctuation">.</span>c  \\驱动程序，运行分析器来分析输入文件util<span class="token punctuation">.</span>cy<span class="token punctuation">.</span>outputerrormsg<span class="token punctuation">.</span>h   \\存放出错的数据结构，帮助产生文件名和行号的报错信息makefile     \\工程创建文件tiger<span class="token punctuation">.</span>grm    \\我们需要完善的语法框架util<span class="token punctuation">.</span>h</code></pre><p>可以使用优先级指导命令，但是不要给文法附加任何语义动作。</p><p>这里我们先使用作者提供的lex输出，如果要修改为自己的词法分析器只要将makefile中的注释打开就行了</p><pre class=" language-makefile"><code class="language-makefile"><span class="token symbol">a.out</span><span class="token punctuation">:</span> parsetest.o y.tab.o lex.yy.o errormsg.o util.o    cc -g parsetest.o y.tab.o lex.yy.o errormsg.o util.o<span class="token symbol">parsetest.o</span><span class="token punctuation">:</span> parsetest.c errormsg.h util.h    cc -g -c parsetest.c<span class="token symbol">y.tab.o</span><span class="token punctuation">:</span> y.tab.c    cc -g -c y.tab.c<span class="token symbol">y.tab.c</span><span class="token punctuation">:</span> tiger.grm    yacc -dv tiger.grm<span class="token symbol">y.tab.h</span><span class="token punctuation">:</span> y.tab.c    echo <span class="token string">"y.tab.h was created at the same time as y.tab.c"</span><span class="token symbol">errormsg.o</span><span class="token punctuation">:</span> errormsg.c errormsg.h util.h    cc -g -c errormsg.c<span class="token symbol">lex.yy.o</span><span class="token punctuation">:</span> lex.yy.c y.tab.h errormsg.h util.h    cc -g -c lex.yy.c<span class="token comment" spellcheck="true">#lex.yy.c: tiger.lex</span><span class="token comment" spellcheck="true">#    lex tiger.lex</span><span class="token symbol">util.o</span><span class="token punctuation">:</span> util.c util.h    cc -g -c util.c<span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f a.out util.o parsetest.o lex.yy.o errormsg.o y.tab.c y.tab.h y.tab.o</code></pre><p>然后我们就来看一下<code>tiger.grm</code>文件</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"errormsg.h"</span></span><span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* function prototype */</span><span class="token keyword">void</span> <span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">EM_error</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token keyword">union</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>    <span class="token keyword">int</span> ival<span class="token punctuation">;</span>    string sval<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>sval<span class="token operator">></span> ID STRING<span class="token operator">%</span>token <span class="token operator">&lt;</span>ival<span class="token operator">></span> INT<span class="token operator">%</span>token  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK  LBRACE RBRACE DOT  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE  AND OR ASSIGN  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF  BREAK NIL  FUNCTION VAR TYPE<span class="token operator">%</span>start program<span class="token operator">%</span><span class="token operator">%</span>program<span class="token punctuation">:</span>    expexp<span class="token punctuation">:</span>   ID</code></pre><p>文件的前半部分已经完善，我们需要书写的是后面的grammer rules和programs部分。</p><p>要书写语法分析器，首先我们要把Tiger语言转化为一般的文法形式。Tiger语言的文法显然要比我们之前讨论的文法形式更多也更复杂，所以 我们使用更明显的的名称来书写等式左部。</p><p>首先考虑一下，在附录中我们可以知道，Tiger语言共有 种语句，26种表达式，分别是</p><p>$$<br>\begin{align}<br>&amp; program \rightarrow exp \\<br>&amp;  \\<br>&amp; exp \rightarrow INT \\<br>&amp; exp \rightarrow STRING \\<br>&amp; exp \rightarrow LValue \\<br>&amp; exp \rightarrow NIL \\<br>&amp; exp \rightarrow exp \quad exps \\<br>&amp; exp \rightarrow - INT \\<br>&amp; exp \rightarrow - ID \\<br>&amp; exp \rightarrow ( exp ) \\<br>&amp; exp \rightarrow () \\<br>&amp; exp \rightarrow Functioncall \\<br>&amp; exp \rightarrow Arithmetic \\<br>&amp; exp \rightarrow Comparison \\<br>&amp; exp \rightarrow exp \quad AND \quad exp \\<br>&amp; exp \rightarrow exp \quad OR \quad exp \\<br>&amp; exp \rightarrow RecordCreation \\<br>&amp; exp \rightarrow ArrayCreation \\<br>&amp; exp \rightarrow LValue := exp \\<br>&amp; exp \rightarrow IF \quad exp \quad THEN \quad exp \quad ELSE \quad exp \\<br>&amp; exp \rightarrow IF \quad exp \quad THEN \quad exp \\<br>&amp; exp \rightarrow WHILE \quad exp \quad DO \quad exp \\<br>&amp; exp \rightarrow FOR \quad ID \quad ASSIGN \quad exp \quad TO \quad exp \quad DO \quad exp \\<br>&amp; exp \rightarrow BREAK \\<br>&amp; exp \rightarrow LET \quad DeclarationSequence \quad IN \quad exp \quad END \\<br>&amp;  \\<br>&amp; exps \rightarrow ;exp \\<br>&amp; exps \rightarrow exps;exp \\<br>&amp;  \\<br>&amp; DeclarationSequence \rightarrow \varepsilon \\<br>&amp; DeclarationSequence \rightarrow Declaration \\<br>&amp;  \\<br>&amp; Declaration \rightarrow TypeDelarations \\<br>&amp; Declaration \rightarrow VarDeclaration \\<br>&amp; Declaration \rightarrow FunctionDeclatations \\<br>&amp;  \\<br>&amp; TypeDelarations \rightarrow TypeDelaration \\<br>&amp; TypeDelarations \rightarrow TypeDelarations \quad TypeDelaration \\<br>&amp;  \\<br>&amp; FunctionDeclatations \rightarrow FunctionDeclatation \\<br>&amp; FunctionDeclatations \rightarrow FunctionDeclatations \quad FunctionDeclatation \\<br>&amp;  \\<br>&amp; TypeDelaration \rightarrow Type \quad ID = OtherType \\<br>&amp;  \\<br>&amp; OtherType \rightarrow ID \\<br>&amp; OtherType \rightarrow {TypeFields} \\<br>&amp; OtherType \rightarrow ARRAY \quad OF \quad ID \\<br>&amp;  \\<br>&amp; TypeFields \rightarrow \varepsilon \\<br>&amp; TypeFields \rightarrow TypeKV \quad TypeKVList \\<br>&amp;  \\<br>&amp; TypeKV \rightarrow ID:ID \\<br>&amp;  \\<br>&amp; TypeKVList \rightarrow \varepsilon \\<br>&amp; TypeKVLsit \rightarrow TypeKVList\quad ,TypeKV \\<br>&amp;  \\<br>&amp; VarDeclaration \rightarrow Var \quad ID := exp \\<br>&amp; VarDeclaration \rightarrow Var \quad ID ,ID :=exp \\<br>&amp; FunctionDeclatation \rightarrow FUNCTION \quad ID (TypeFields) =exp \\<br>&amp; FunctionDeclatation \rightarrow FUNCTION \quad ID (TypeFields):ID =exp \\<br>&amp;  \\<br>&amp; LValue \rightarrow ID \quad LValue_extension \\<br>&amp;  \\<br>&amp; LValue_extension \rightarrow \varepsilon \\<br>&amp; LValue_extension \rightarrow .ID \quad LValue_extension \\<br>&amp; LValue_extension \rightarrow [exp]LValue_extension \\<br>&amp;  \\<br>&amp; Functioncall \rightarrow ID() \\<br>&amp; Functioncall \rightarrow ID(expList) \\<br>&amp;  \\<br>&amp; expList \rightarrow exp \\<br>&amp; expList \rightarrow expList,exp \\<br>&amp;  \\<br>&amp; Arithmetic \rightarrow exp + exp \\<br>&amp; Arithmetic \rightarrow exp - exp \\<br>&amp; Arithmetic \rightarrow exp \times exp \\<br>&amp; Arithmetic \rightarrow exp / exp \\<br>&amp;  \\<br>&amp; Comparison \rightarrow exp = exp \\<br>&amp; Comparison \rightarrow exp \neq  exp \\<br>&amp; Comparison \rightarrow exp \leq exp \\<br>&amp; Comparison \rightarrow exp \geq exp \\<br>&amp; Comparison \rightarrow exp &lt; exp \\<br>&amp; Comparison \rightarrow exp &gt; exp \\<br>&amp;  \\<br>&amp; RecordCreation \rightarrow ID{} \\<br>&amp; RecordCreation \rightarrow ID{FieldAssignmentList} \\<br>&amp;  \\<br>&amp; FieldAssignmentList \rightarrow FieldAssignment \\<br>&amp; FieldAssignmentList \rightarrow FieldAssignmentList,FieldAssignment \\<br>&amp;  \\<br>&amp; FieldAssignment \rightarrow ID = exp \\<br>&amp;  \\<br>&amp; ArrayCreation \rightarrow ID [exp] OF \quad exp \\<br>\end{align}<br>$$</p><p>得到了Tiger语言的文法以后我们就可以根据Yacc的规范来书写<code>tiger.grm</code>文件了。</p><p>我使用的是<code>Ubuntu 18.04</code>系统安装的是Yacc的一个较新的实现Bison</p><pre class=" language-bash"><code class="language-bash">$ yacc --versionbison <span class="token punctuation">(</span>GNU Bison<span class="token punctuation">)</span> 3.0.4Written by Robert Corbett and Richard Stallman.Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> 2015 Free Software Foundation, Inc.This is <span class="token function">free</span> software<span class="token punctuation">;</span> see the <span class="token function">source</span> <span class="token keyword">for</span> copying conditions.  There is NOwarranty<span class="token punctuation">;</span> not even <span class="token keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre><p>这里简单介绍一下Bison的基本使用，在<a href="http://www.gnu.org/software/bison/" target="_blank" rel="noopener">Bison官网</a>我们可以了解到Bison的语法和使用规则。</p><p>最终的<code>tiger.grm</code>文件如下：</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"symbol.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"errormsg.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"absyn.h"</span></span><span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* function prototype */</span>A_exp absyn_root<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">EM_error</span><span class="token punctuation">(</span>EM_tokPos<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token keyword">union</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>    <span class="token keyword">int</span> ival<span class="token punctuation">;</span>    string sval<span class="token punctuation">;</span>    A_var var<span class="token punctuation">;</span>    A_exp exp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* et cetera */</span>    A_expList    expList<span class="token punctuation">;</span>    A_decList    decList<span class="token punctuation">;</span>    A_dec dec<span class="token punctuation">;</span>    A_ty ty<span class="token punctuation">;</span>    A_namety namety<span class="token punctuation">;</span>    A_nametyList nametyList<span class="token punctuation">;</span>    A_fundec funcdec<span class="token punctuation">;</span>    A_fundecList funcdecList<span class="token punctuation">;</span>    A_field    field<span class="token punctuation">;</span>    A_fieldList fieldList<span class="token punctuation">;</span>    A_efield efield<span class="token punctuation">;</span>    A_efieldList efieldList<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>sval<span class="token operator">></span> ID STRING<span class="token operator">%</span>token <span class="token operator">&lt;</span>ival<span class="token operator">></span> INT<span class="token operator">%</span>tokenCOMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACKLBRACE RBRACE DOTPLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GEAND OR ASSIGNARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OFBREAK NILFUNCTION VAR TYPE<span class="token operator">%</span>nonassoc LOWER<span class="token operator">%</span>nonassoc OF<span class="token operator">%</span>nonassoc IF THEN WHILE DO FOR TO<span class="token operator">%</span>left ELSE<span class="token operator">%</span>nonassoc ASSIGN<span class="token operator">%</span>left OR AND<span class="token operator">%</span>nonassoc EQ NEQ GT LT GE LE<span class="token operator">%</span>left PLUS MINUS<span class="token operator">%</span>left TIMES DIVIDE<span class="token operator">%</span>nonassoc TYPE<span class="token operator">%</span>nonassoc FUNCTION<span class="token operator">%</span>start program<span class="token operator">%</span><span class="token operator">%</span>program    <span class="token punctuation">:</span> exp   <span class="token punctuation">{</span><span class="token punctuation">}</span>exp <span class="token punctuation">:</span> varExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> nilExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> intExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> stringExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> callExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> opExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> recordExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> seqExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> assignExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> ifExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> whileExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> forExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> breakExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> letExp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> arrayExp <span class="token punctuation">{</span><span class="token punctuation">}</span>varExp    <span class="token punctuation">:</span> lvalue <span class="token punctuation">{</span><span class="token punctuation">}</span>nilExp    <span class="token punctuation">:</span> NIL <span class="token punctuation">{</span><span class="token punctuation">}</span>intExp    <span class="token punctuation">:</span> INT <span class="token punctuation">{</span><span class="token punctuation">}</span>stringExp    <span class="token punctuation">:</span> STRING <span class="token punctuation">{</span><span class="token punctuation">}</span>callExp    <span class="token punctuation">:</span> ID LPAREN argList RPAREN  <span class="token punctuation">{</span><span class="token punctuation">}</span>opExp    <span class="token punctuation">:</span> exp PLUS exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp MINUS exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp TIMES exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp DIVIDE exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp EQ exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp NEQ exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp LT exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp LE exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp GT exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp GE exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> MINUS exp <span class="token punctuation">{</span><span class="token punctuation">}</span>recordExp    <span class="token punctuation">:</span> ID LBRACE efieldList RBRACE <span class="token punctuation">{</span><span class="token punctuation">}</span>seqExp    <span class="token punctuation">:</span> LPAREN seqList RPAREN <span class="token punctuation">{</span><span class="token punctuation">}</span>assignExp    <span class="token punctuation">:</span> lvalue ASSIGN exp <span class="token punctuation">{</span><span class="token punctuation">}</span>ifExp    <span class="token punctuation">:</span> IF exp THEN exp ELSE exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> IF exp THEN exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp OR exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp AND exp <span class="token punctuation">{</span><span class="token punctuation">}</span>whileExp    <span class="token punctuation">:</span> WHILE exp DO exp <span class="token punctuation">{</span><span class="token punctuation">}</span>forExp    <span class="token punctuation">:</span> FOR ID ASSIGN exp TO exp DO exp <span class="token punctuation">{</span><span class="token punctuation">}</span>breakExp    <span class="token punctuation">:</span> BREAK <span class="token punctuation">{</span><span class="token punctuation">}</span>letExp    <span class="token punctuation">:</span> LET decList IN seqList END <span class="token punctuation">{</span><span class="token punctuation">}</span>arrayExp    <span class="token punctuation">:</span> ID LBRACK exp RBRACK OF exp <span class="token punctuation">{</span><span class="token punctuation">}</span>lvalue    <span class="token punctuation">:</span> ID  <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> lvalue DOT ID <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> lvalue LBRACK exp RBRACK <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> ID LBRACK exp RBRACK <span class="token punctuation">{</span><span class="token punctuation">}</span>argList    <span class="token punctuation">:</span> <span class="token operator">%</span>empty <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp argList_ <span class="token punctuation">{</span><span class="token punctuation">}</span>argList_    <span class="token punctuation">:</span> <span class="token operator">%</span>empty <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> COMMA exp argList_ <span class="token punctuation">{</span><span class="token punctuation">}</span>efield    <span class="token punctuation">:</span> ID EQ exp <span class="token punctuation">{</span><span class="token punctuation">}</span>efieldList    <span class="token punctuation">:</span> <span class="token operator">%</span>empty <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> efield efieldList_ <span class="token punctuation">{</span><span class="token punctuation">}</span>efieldList_    <span class="token punctuation">:</span> <span class="token operator">%</span>empty <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> COMMA efield efieldList_ <span class="token punctuation">{</span><span class="token punctuation">}</span>seqList    <span class="token punctuation">:</span> <span class="token operator">%</span>empty <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> exp SEMICOLON seqList <span class="token punctuation">{</span><span class="token punctuation">}</span>decList    <span class="token punctuation">:</span> dec <span class="token operator">%</span>prec LOWER <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> dec decList <span class="token punctuation">{</span><span class="token punctuation">}</span>dec <span class="token punctuation">:</span> typeDec <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> varDec <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> funcDec <span class="token punctuation">{</span><span class="token punctuation">}</span>typeDec    <span class="token punctuation">:</span> nametyList <span class="token punctuation">{</span><span class="token punctuation">}</span>varDec    <span class="token punctuation">:</span> VAR ID ASSIGN exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> VAR ID COLON ID ASSIGN exp <span class="token punctuation">{</span><span class="token punctuation">}</span>funcDec    <span class="token punctuation">:</span> funcDecList <span class="token punctuation">{</span><span class="token punctuation">}</span>funcDecList    <span class="token punctuation">:</span> funcDec_ <span class="token operator">%</span>prec LOWER <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span>   funcDec_ funcDecList <span class="token punctuation">{</span><span class="token punctuation">}</span>funcDec_    <span class="token punctuation">:</span> FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> FUNCTION ID LPAREN fieldList RPAREN EQ exp <span class="token punctuation">{</span><span class="token punctuation">}</span>nametyList    <span class="token punctuation">:</span> namety <span class="token operator">%</span>prec LOWER <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> namety nametyList <span class="token punctuation">{</span><span class="token punctuation">}</span>namety    <span class="token punctuation">:</span> TYPE ID EQ ID <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> TYPE ID EQ LBRACE fieldList RBRACE <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> TYPE ID EQ ARRAY OF ID <span class="token punctuation">{</span><span class="token punctuation">}</span>field    <span class="token punctuation">:</span> ID COLON ID <span class="token punctuation">{</span><span class="token punctuation">}</span>fieldList    <span class="token punctuation">:</span> <span class="token operator">%</span>empty <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> field fieldList_ <span class="token punctuation">{</span><span class="token punctuation">}</span>fieldList_    <span class="token punctuation">:</span> <span class="token operator">%</span>empty <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">|</span> COMMA field fieldList_ <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>每个文法生成式之后的括号是为了后面第四章要使用到的语义分析，这里暂且先留空，第一次make的时候出现了这个问题（开玩笑的，其实make好几遍了）：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">make</span>cc  -g -c parsetest.cparsetest.c: In <span class="token keyword">function</span> main:parsetest.c:16:59: warning: implicit declaration of <span class="token keyword">function</span> <span class="token keyword">exit</span> <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc<span class="token operator">!=</span>2<span class="token punctuation">)</span> <span class="token punctuation">{</span>fprintf<span class="token punctuation">(</span>stderr,usage: a.out filename\n<span class="token punctuation">)</span><span class="token punctuation">;</span> exit<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                                                           ^~~~parsetest.c:16:59: warning: incompatible implicit declaration of built-in <span class="token keyword">function</span> <span class="token keyword">exit</span>parsetest.c:16:59: note: include ‘<span class="token operator">&lt;</span>stdlib.h<span class="token operator">></span>’ or provide a declaration of ‘exit’yacc -dv tiger.grmtiger.grm: warning: 3 shift/reduce conflicts <span class="token punctuation">[</span>-Wconflicts-sr<span class="token punctuation">]</span>cc -g -c y.tab.ccc -g -c lex.yy.cIn <span class="token function">file</span> included from lex.yy.c:1:0:lex.yy.c:20:15: error: initializer element is not constant FILE *yyin <span class="token operator">=</span> <span class="token punctuation">{</span>stdin<span class="token punctuation">}</span>, *yyout <span class="token operator">=</span> <span class="token punctuation">{</span>stdout<span class="token punctuation">}</span><span class="token punctuation">;</span>               ^lex.yy.c:20:15: note: <span class="token punctuation">(</span>near initialization <span class="token keyword">for</span> ‘yyin’<span class="token punctuation">)</span>lex.yy.c:20:33: error: initializer element is not constant FILE *yyin <span class="token operator">=</span> <span class="token punctuation">{</span>stdin<span class="token punctuation">}</span>, *yyout <span class="token operator">=</span> <span class="token punctuation">{</span>stdout<span class="token punctuation">}</span><span class="token punctuation">;</span>                                 ^lex.yy.c:20:33: note: <span class="token punctuation">(</span>near initialization <span class="token keyword">for</span> ‘yyout’<span class="token punctuation">)</span>lex.yy.c:31:10: fatal error: symbol.h: No such <span class="token function">file</span> or directory <span class="token comment" spellcheck="true">#include "symbol.h"</span>          ^~~~~~~~~~compilation terminated.makefile:20: recipe <span class="token keyword">for</span> target lex.yy.o failedmake: *** <span class="token punctuation">[</span>lex.yy.o<span class="token punctuation">]</span> Error 1</code></pre><p>作者好像没在<code>/chap3</code>这个目录下给出<code>symbol.h</code>文件，不过这些文件存放在<code>/chap4</code>目录下，在<code>/chap4</code>下执行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> symbol.c symbol.h absyn.h absyn.c <span class="token punctuation">..</span>/chap3$ <span class="token function">make</span> clean$ <span class="token function">make</span></code></pre><p>然后就可以获得<code>y.output</code>:</p><pre class=" language-c"><code class="language-c">State <span class="token number">1</span> conflicts<span class="token punctuation">:</span> <span class="token number">1</span> shift<span class="token operator">/</span>reduce<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>State <span class="token number">1</span>   <span class="token number">21</span> callExp<span class="token punctuation">:</span> ID <span class="token punctuation">.</span> LPAREN argList RPAREN   <span class="token number">33</span> recordExp<span class="token punctuation">:</span> ID <span class="token punctuation">.</span> LBRACE efieldList RBRACE   <span class="token number">44</span> arrayExp<span class="token punctuation">:</span> ID <span class="token punctuation">.</span> LBRACK exp RBRACK OF exp   <span class="token number">45</span> lvalue<span class="token punctuation">:</span> ID <span class="token punctuation">.</span>   <span class="token number">48</span>       <span class="token operator">|</span> ID <span class="token punctuation">.</span> LBRACK exp RBRACK    LPAREN  shift<span class="token punctuation">,</span> and go to state <span class="token number">30</span>    LBRACK  shift<span class="token punctuation">,</span> and go to state <span class="token number">31</span>    LBRACE  shift<span class="token punctuation">,</span> and go to state <span class="token number">32</span>    LBRACK    <span class="token punctuation">[</span>reduce using rule <span class="token function">45</span> <span class="token punctuation">(</span>lvalue<span class="token punctuation">)</span><span class="token punctuation">]</span>    $<span class="token keyword">default</span>  reduce using rule <span class="token function">45</span> <span class="token punctuation">(</span>lvalue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>这里我们有很多方法可以解决这种移进/规约冲突的问题。</p><p>在介绍方法之前，我们先来分析一下这个问题，这个语法分析器在ID这里exp遇到了两种可能性：</p><ul><li><strong><em>shift移进.</em></strong><br>exp在这里可以被移进为<code>ID [exp] OF exp</code><pre class=" language-c"><code class="language-c">ID <span class="token string">'['</span> exp <span class="token string">']'</span> OF exp        <span class="token operator">--</span><span class="token operator">></span> <span class="token function">exp</span>    <span class="token punctuation">(</span>rule <span class="token number">25</span><span class="token punctuation">)</span></code></pre></li><li><strong><em>reduce规约.</em></strong><br>exp在这里是<code>ID[exp]</code>,<pre class=" language-c"><code class="language-c">ID                           <span class="token operator">--</span><span class="token operator">></span> <span class="token function">lvalue</span> <span class="token punctuation">(</span>rule <span class="token number">34</span><span class="token punctuation">)</span>lvalue <span class="token string">'['</span> exp <span class="token string">']'</span>           <span class="token operator">--</span><span class="token operator">></span> <span class="token function">lvalue</span> <span class="token punctuation">(</span>rule <span class="token number">36</span><span class="token punctuation">)</span>lvalue                       <span class="token operator">--</span><span class="token operator">></span> <span class="token function">exp</span>    <span class="token punctuation">(</span>rule <span class="token number">2</span><span class="token punctuation">)</span></code></pre>问题是语法分析器无法在看到OF单词之前，明确的作出判断该使用哪一个生成式。</li></ul><p>这里的解决方案是避免语法分析器在此时作出判断：</p><ul><li><p>1.因为表达式只能是<code>ID [ exp ] OF</code>，所以我们可以从冲突中提出公因子ID：</p><pre class=" language-bash"><code class="language-bash">exp   <span class="token keyword">:</span> ID      <span class="token operator">|</span> lvalue_not_id      <span class="token operator">|</span> <span class="token punctuation">..</span>.lvalue: ID      <span class="token operator">|</span> lvalue_not_idlvalue_not_ID      <span class="token keyword">:</span> lvalue DOT ID      <span class="token operator">|</span> ID            LBRACK exp RBRACK      <span class="token operator">|</span> lvalue_not_ID LBRACK exp RBRACK</code></pre></li></ul><ul><li><p>2.看到文法中存在一个移进/规约冲突在State1,这是因为我们使用Apple在书中提到的使用一个冗余的表达式来解决移进/规约冲突，但是这个表达式依然会引发一个移进规约冲突，实际上，它是一个与原始语法完全相同的shift-reduce冲突。但是这一次，冲突是在两个不同的制作之间进行的lvalue，默认的移进动作是我们想要的ID接受<code>[</code>。在转换之后，lvalue生产和exp仍然可用，因此解析器在<code>]</code>之前不必作出决定。这里的移进规约冲突实际上不会影响我们的语法的判断。</p></li><li><p>3.另一个解决方案就是使用bison的<code>%glr-parser</code>指令来生成GLR解析器。GLR算法能够通过有效地同时维护两个（或更多个）不同的可能解析器堆栈来延迟减少决策。对于明确的语法，在输入的长度上仍然是O（n），但它稍慢。（此外，此选项在许多其他yacc衍生产品中不可用。）</p></li></ul><p>可以看到如果我们自己手写DFA那将是一项非常复杂的工作。然后套用我们自己的词法分析器看看是否成功，修改makefile的文件，将注释符号<code>#</code>去掉，将第二章完成的词法分析器复制到目录下：</p><pre class=" language-bash"><code class="language-bash">~/chap2 $ <span class="token function">cp</span> tiger.lex token.h <span class="token punctuation">..</span>/chap03~/chap3 $ <span class="token function">make</span> clean~/chap3 $ <span class="token function">make</span></code></pre><p>结果也是顺利生成了语法分析器。这里有个比较有意思的Bison选项是<code>--graph</code>，这个选项可以根据你的DFA生成图像，比较适合初学者理解</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> graphviz$ bison --graph tiger.grm$ dot tiger.dot -Tsvg -o tiger.svg</code></pre><p>ps：这个过程常常由于内存不够而崩溃。我这里已经跑了30mins了还没有完成做图</p><h5 id="添加error表达式"><a href="#添加error表达式" class="headerlink" title="添加error表达式"></a>添加error表达式</h5><p>下面要求添加一个error表达式，并且举例证明可以完成错误修复。由于我们没有使用语义动作，所以我们可以不用考虑语义动作对错误恢复带来的影响。</p><p>错误恢复有两种方式，一种是局部恢复技术，第二种是全局恢复技术。全局恢复技术主要针对的是语义动作的影响，而且全局回复技术并不需要error产生式的辅助，所以这里我们使用局部错误恢复的方法来重新设计文法。这一节的内容可以在<a href="https://www.gnu.org/software/bison/manual/bison.html#Error-Recovery" target="_blank" rel="noopener">Bison文档第6节Error Recovery</a></p><p>修改文法的第一步是找到同步单词synchronizing token，然后再继续分析。<br>修改后的文法如下：</p><p>$$<br>\begin{align}<br>&amp; program \rightarrow exp \\<br>&amp;  \\<br>&amp; exp \rightarrow INT \\<br>&amp; exp \rightarrow STRING \\<br>&amp; exp \rightarrow LValue \\<br>&amp; exp \rightarrow NIL \\<br>&amp; exp \rightarrow exp \quad exps \\<br>&amp; exp \rightarrow - INT \\<br>&amp; exp \rightarrow - ID \\<br>&amp; exp \rightarrow ( exp ) \\<br>&amp; exp \rightarrow () \\<br>&amp; exp \rightarrow Functioncall \\<br>&amp; exp \rightarrow Arithmetic \\<br>&amp; exp \rightarrow Comparison \\<br>&amp; exp \rightarrow exp \quad AND \quad exp \\<br>&amp; exp \rightarrow exp \quad OR \quad exp \\<br>&amp; exp \rightarrow RecordCreation \\<br>&amp; exp \rightarrow ArrayCreation \\<br>&amp; exp \rightarrow LValue := exp \\<br>&amp; exp \rightarrow IF \quad exp \quad THEN \quad exp \quad ELSE \quad exp<br>&amp; exp \rightarrow error<br>\\<br>&amp; exp \rightarrow IF \quad exp \quad THEN \quad exp \\<br>&amp; exp \rightarrow WHILE \quad exp \quad DO \quad exp \\<br>&amp; exp \rightarrow FOR \quad ID \quad ASSIGN \quad exp \quad TO \quad exp \quad DO \quad exp \\<br>&amp; exp \rightarrow BREAK \\<br>&amp; exp \rightarrow LET \quad DeclarationSequence \quad IN \quad exp \quad END \\<br>&amp;  \\<br>&amp; exps \rightarrow ;exp \\<br>&amp; exps \rightarrow exps;exp \\<br>&amp;  \\<br>&amp; DeclarationSequence \rightarrow \varepsilon \\<br>&amp; DeclarationSequence \rightarrow Declaration \\<br>&amp;  \\<br>&amp; Declaration \rightarrow TypeDelarations \\<br>&amp; Declaration \rightarrow VarDeclaration \\<br>&amp; Declaration \rightarrow FunctionDeclatations \\<br>&amp;  \\<br>&amp; TypeDelarations \rightarrow TypeDelaration \\<br>&amp; TypeDelarations \rightarrow TypeDelarations \quad TypeDelaration \\<br>&amp;  \\<br>&amp; FunctionDeclatations \rightarrow FunctionDeclatation \\<br>&amp; FunctionDeclatations \rightarrow FunctionDeclatations \quad FunctionDeclatation \\<br>&amp;  \\<br>&amp; TypeDelaration \rightarrow Type \quad ID = OtherType \\<br>&amp;  \\<br>&amp; OtherType \rightarrow ID \\<br>&amp; OtherType \rightarrow {TypeFields} \\<br>&amp; OtherType \rightarrow ARRAY \quad OF \quad ID \\<br>&amp;  \\<br>&amp; TypeFields \rightarrow \varepsilon \\<br>&amp; TypeFields \rightarrow TypeKV \quad TypeKVList \\<br>&amp;  \\<br>&amp; TypeKV \rightarrow ID:ID \\<br>&amp;  \\<br>&amp; TypeKVList \rightarrow \varepsilon \\<br>&amp; TypeKVLsit \rightarrow TypeKVList\quad ,TypeKV \\<br>&amp;  \\<br>&amp; VarDeclaration \rightarrow Var \quad ID := exp \\<br>&amp; VarDeclaration \rightarrow Var \quad ID ,ID :=exp \\<br>&amp; FunctionDeclatation \rightarrow FUNCTION \quad ID (TypeFields) =exp \\<br>&amp; FunctionDeclatation \rightarrow FUNCTION \quad ID (TypeFields):ID =exp \\<br>&amp;  \\<br>&amp; LValue \rightarrow ID \quad LValue_extension \\<br>&amp;  \\<br>&amp; LValue_extension \rightarrow \varepsilon \\<br>&amp; LValue_extension \rightarrow .ID \quad LValue_extension \\<br>&amp; LValue_extension \rightarrow [exp]LValue_extension \\<br>&amp;  \\<br>&amp; Functioncall \rightarrow ID() \\<br>&amp; Functioncall \rightarrow ID(expList) \\<br>&amp;  \\<br>&amp; expList \rightarrow exp \\<br>&amp; expList \rightarrow expList,exp \\<br>&amp;  \\<br>&amp; Arithmetic \rightarrow exp + exp \\<br>&amp; Arithmetic \rightarrow exp - exp \\<br>&amp; Arithmetic \rightarrow exp \times exp \\<br>&amp; Arithmetic \rightarrow exp / exp \\<br>&amp;  \\<br>&amp; Comparison \rightarrow exp = exp \\<br>&amp; Comparison \rightarrow exp \neq  exp \\<br>&amp; Comparison \rightarrow exp \leq exp \\<br>&amp; Comparison \rightarrow exp \geq exp \\<br>&amp; Comparison \rightarrow exp &lt; exp \\<br>&amp; Comparison \rightarrow e&amp; program \rightarrow exp \\<br>&amp;  \\<br>&amp; exp \rightarrow INT \\<br>&amp; exp \rightarrow STRING \\<br>&amp; exp \rightarrow LValue \\<br>&amp; exp \rightarrow NIL \\<br>&amp; exp \rightarrow exp \quad exps \\<br>&amp; exp \rightarrow - INT \\<br>&amp; exp \rightarrow - ID \\<br>&amp; exp \rightarrow ( exp ) \\<br>&amp; exp \rightarrow () \\<br>&amp; exp \rightarrow Functioncall \\<br>&amp; exp \rightarrow Arithmetic \\<br>&amp; exp \rightarrow Comparison \\<br>&amp; exp \rightarrow exp AND exp \\<br>&amp; exp \rightarrow exp OR exp \\<br>&amp; exp \rightarrow RecordCreation \\<br>&amp; exp \rightarrow ArrayCreation \\<br>&amp; exp \rightarrow LValue := exp \\<br>&amp; exp \rightarrow IF exp THEN exp ELSE exp \\<br>&amp; exp \rightarrow IF exp THEN exp \\<br>&amp; exp \rightarrow WHILE exp DO exp \\<br>&amp; exp \rightarrow FOR ID ASSIGN exp TO exp DO exp \\<br>&amp; exp \rightarrow BREAK \\<br>&amp; exp \rightarrow LET DeclarationSequence IN exp END \\<br>&amp;  \\<br>&amp; exps \rightarrow ;exp \\<br>&amp; exps \rightarrow exps;exp \\<br>&amp;  \\<br>&amp; DeclarationSequence \rightarrow \varepsilon \\<br>&amp; DeclarationSequence \rightarrow Declaration \\<br>&amp;  \\<br>&amp; Declaration \rightarrow TypeDelarations \\<br>&amp; Declaration \rightarrow VarDeclaration \\<br>&amp; Declaration \rightarrow FunctionDeclatations \\<br>&amp;  \\<br>&amp; TypeDelarations \rightarrow TypeDelaration \\<br>&amp; TypeDelarations \rightarrow TypeDelarations TypeDelaration \\<br>&amp;  \\<br>&amp; FunctionDeclatations \rightarrow FunctionDeclatation \\<br>&amp; FunctionDeclatations \rightarrow FunctionDeclatations FunctionDeclatation \\<br>&amp;  \\<br>&amp; TypeDelaration \rightarrow Type ID = OtherType \\<br>&amp;  \\<br>&amp; OtherType \rightarrow ID \\<br>&amp; OtherType \rightarrow {TypeFields} \\<br>&amp; OtherType \rightarrow ARRAY OF ID \\<br>&amp;  \\<br>&amp; TypeFields \rightarrow \varepsilon \\<br>&amp; TypeFields \rightarrow TypeKV TypeKVList \\<br>&amp;  \\<br>&amp; TypeKV \rightarrow ID:ID \\<br>&amp;  \\<br>&amp; TypeKVList \rightarrow \varepsilon \\<br>&amp; TypeKVLsit \rightarrow TypeKVList,TypeKV \\<br>&amp;  \\<br>&amp; VarDeclaration \rightarrow Var ID := exp \\<br>&amp; VarDeclaration \rightarrow Var ID ,ID :=exp \\<br>&amp; FunctionDeclatation \rightarrow FUNCTION ID (TypeFields) =exp \\<br>&amp; FunctionDeclatation \rightarrow FUNCTION ID (TypeFields):ID =exp \\<br>&amp;  \\<br>&amp; LValue \rightarrow ID LValue_extension \\<br>&amp;  \\<br>&amp; LValue_extension \rightarrow \varepsilon \\<br>&amp; LValue_extension \rightarrow .ID LValue_extension \\<br>&amp; LValue_extension \rightarrow [exp]LValue_extension \\<br>&amp;  \\<br>&amp; Functioncall \rightarrow ID() \\<br>&amp; Functioncall \rightarrow ID(expList) \\<br>&amp;  \\<br>&amp; expList \rightarrow exp \\<br>&amp; expList \rightarrow expList,exp \\<br>&amp;  \\<br>&amp; Arithmetic \rightarrow exp + exp \\<br>&amp; Arithmetic \rightarrow exp - exp \\<br>&amp; Arithmetic \rightarrow exp \times exp \\<br>&amp; Arithmetic \rightarrow exp / exp \\<br>&amp;  \\<br>&amp; Comparison \rightarrow exp = exp \\<br>&amp; Comparison \rightarrow exp \neq  exp \\<br>&amp; Comparison \rightarrow exp \leq exp \\<br>&amp; Comparison \rightarrow exp \geq exp \\<br>&amp; Comparison \rightarrow exp &lt; exp \\<br>&amp; Comparison \rightarrow exp &gt; exp \\<br>&amp;  \\<br>&amp; RecordCreation \rightarrow ID{} \\<br>&amp; RecordCreation \rightarrow ID{FieldAssignmentList} \\<br>&amp;  \\<br>&amp; FieldAssignmentList \rightarrow FieldAssignment \\<br>&amp; FieldAssignmentList \rightarrow FieldAssignmentList,FieldAssignment \\<br>&amp;  \\<br>&amp; FieldAssignment \rightarrow ID = exp \\<br>&amp;  \\<br>&amp; ArrayCreation \rightarrow ID [exp] OF exp \\<br>xp &gt; exp \\<br>&amp;  \\<br>&amp; RecordCreation \rightarrow ID{} \\<br>&amp; RecordCreation \rightarrow ID{FieldAssignmentList} \\<br>&amp;  \\<br>&amp; FieldAssignmentList \rightarrow FieldAssignment \\<br>&amp; FieldAssignmentList \rightarrow FieldAssignmentList,FieldAssignment \\<br>&amp;  \\<br>&amp; FieldAssignment \rightarrow ID = exp \\<br>&amp;  \\<br>&amp; ArrayCreation \rightarrow ID [exp] OF \quad exp \\<br>\end{align}<br>$$<br>error是在Bison中定义好的，所以我们不需要再次声明直接使用即可。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>1.<a href="https://www.gnu.org/software/bison/manual/bison.html" target="_blank" rel="noopener">Bison文档</a></p><p>2.<a href="https://github.com/geeeeeeeeek/tiger/tree/master/lab3/project-3" target="_blank" rel="noopener">geeeeeeeeek/tiger</a></p><p>3.<a href="https://stackoverflow.com/questions/26968665/bison-shift-reduce-conflict-tiger-compiler" target="_blank" rel="noopener">stackoverflow</a></p><p>4.<a href="https://www.gnu.org/software/bison/manual/html_node/Shift_002fReduce.html" target="_blank" rel="noopener">shift/reduce</a></p><p>5.<a href="https://www.gnu.org/software/bison/manual/html_node/Simple-GLR-Parsers.html" target="_blank" rel="noopener">Bison-Simple-GLR-Parsers</a></p><p>6.<a href="http://www.yinwang.org/blog-cn/2015/09/19/parser" target="_blank" rel="noopener">写了两周parser之后发现的一篇文章ps是垠哥写的，不要太在意</a></p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虎书 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu+LaTeX+Vim史上最强Note</title>
      <link href="/2019/03/29/ubuntu-latex-vim-shi-shang-zui-qiang-note/"/>
      <url>/2019/03/29/ubuntu-latex-vim-shi-shang-zui-qiang-note/</url>
      
        <content type="html"><![CDATA[<p>自从被种草Markdown以后，真的是大大提升了效率。但是每次碰上$ \LaTeX $还是会gg，但是看了国外的一位老哥上课$\LaTeX$比老师板书都快，真的很羡慕啊，但是也舍弃不了Spacevim的便利，这里就尝试一下，如何使用spacevim达到和<a href="https://castel.dev/post/lecture-notes-1/" target="_blank" rel="noopener">这篇文章</a>国外老哥的一样的效果。</p><ul><li>环境配置</li></ul><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="SpaceVim"><a href="#SpaceVim" class="headerlink" title="SpaceVim"></a>SpaceVim</h4><p>这里可以参考我之前 的<a href="http://jinzhnegxu.online/2019/02/11/vim%E7%9A%84%E6%96%B0%E7%94%9F-Spacevim/" target="_blank" rel="noopener">blog</a><br>简单来说只要：</p><pre class=" language-bash"><code class="language-bash">$ curl -sLf https://spacevim.org/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>就好了。</p><h4 id="Inkscape"><a href="#Inkscape" class="headerlink" title="Inkscape"></a>Inkscape</h4><p>Inkscape是一个开源项目，你可以在<a href="https://inkscape.org/" target="_blank" rel="noopener">inkscape.org</a>找到自己使用平台的安装包，在ubuntu下使用ppa就可以简单的完后安装：</p><pre class=" language-bash&#39;"><code class="language-bash&#39;">$ sudo add-apt-repository ppa:inkscape.dev/stable$ sudo apt-get update</code></pre><h4 id="Zathura"><a href="#Zathura" class="headerlink" title="Zathura"></a>Zathura</h4><p>这是一个pdf阅读器</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> zathura</code></pre><h3 id="spacevim开启插件"><a href="#spacevim开启插件" class="headerlink" title="spacevim开启插件"></a>spacevim开启插件</h3><h4 id="vimtex"><a href="#vimtex" class="headerlink" title="vimtex"></a>vimtex</h4><p>首先要开启插件<code>lang#latex</code>来使vim可以使用tex语法，<code>lang#latex</code>是基于插件<code>vimtex</code><br>打开<code>/.SpaceVim.d</code>文件夹下的<code>init.toml</code>文件插入</p><pre><code>[[layers]]  name = &quot;lang#latex&quot;</code></pre><h4 id="Markdown支持"><a href="#Markdown支持" class="headerlink" title="Markdown支持"></a>Markdown支持</h4><p>打开<code>/.SpaceVim.d</code>文件夹下的<code>init.toml</code>文件插入</p><pre><code>[[layers]]  name = &quot;lang#markdown&quot;</code></pre><p>配置完成后打开终端输入</p><pre><code>$ vim</code></pre><p>Sapcevim就会自己开始下载插件了<br><a href="https://imgchr.com/i/AB3JMj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/29/AB3JMj.md.png" alt="AB3JMj.md.png"></a></p><h3 id="片段Snippets"><a href="#片段Snippets" class="headerlink" title="片段Snippets"></a>片段Snippets</h3><p>有了这些设置，我们就来到了最关键的地方：写作LaTeX的速度和讲师在黑板上写的一样快。这就是片段发挥作用的地方。</p><h4 id="什么是片段？"><a href="#什么是片段？" class="headerlink" title="什么是片段？"></a>什么是片段？</h4><p>片段是一段可重复使用的短文本，可以由其他一些文本触发。例如，当键入sign并按下时Tab，该单词sign将扩展为签名时<br><img src="https://s2.ax1x.com/2019/03/29/AB3Sq1.gif" alt="AB3Sq1.gif" border="0"><br>片段也可以是动态的：当键入today并按下时Tab，该单词today将被当前日期替换，键入box并使用Tab，将会获得一个自动增大的框。<br><img src="https://s2.ax1x.com/2019/03/29/AB3ARe.gif" alt="AB3ARe.gif" border="0"></p><img src="https://s2.ax1x.com/2019/03/29/AB3ExH.gif" alt="AB3ExH.gif" border="0">片段也是可以嵌套使用的<img src="https://s2.ax1x.com/2019/03/29/AB3uZt.gif" alt="AB3uZt.gif" border="0"><h4 id="使用UltiSnips创建片段"><a href="#使用UltiSnips创建片段" class="headerlink" title="使用UltiSnips创建片段"></a>使用UltiSnips创建片段</h4><p>Spacevim并未提供对UltiSnips的模块支持，所以我们需要自己创建一个私有模块才能使用Ultisnips.</p><h5 id="私有模块"><a href="#私有模块" class="headerlink" title="私有模块"></a>私有模块</h5><p>这一部分简单介绍了模块的组成，更多关于新建模块的内容可以阅读 SpaceVim 的模块首页。</p><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>使用模块的方式来组织和管理插件，将相关功能的插件组织成一个模块，启用/禁用效率更加高。同时也节省了很多寻找插件和配置插件的时间。</p><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>在 SpaceVim 中，一个模块是一个单个的 Vim 文件，例如，<code>autocomplete</code> 模块存储在 <code>autoload/SpaceVim/layers/autocomplete.vim</code>，在这个文件内有以下几个公共函数：</p><p>SpaceVim#layers#autocomplete#plugins(): 返回该模块插件列表</p><p>SpaceVim#layers#autocomplete#config(): 模块相关设置</p><p>SpaceVim#layers#autocomplete#set_variable(): 模块选项设置函数<br>调试上游插件</p><p>当发现某个内置上游插件存在问题，需要修改并调试上游插件时，可以依照以下步骤操作：</p><p>禁用内置上游插件 比如，调试内置语法检查插件 neomake.vim</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">[</span>options<span class="token punctuation">]</span>    disabled_plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"neomake.vim"</span><span class="token punctuation">]</span></code></pre><p>添加自己 fork 的插件 修改配置文件 <code>init.toml</code>，加入以下部分，来添加自己 fork 的版本：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>custom_plugins<span class="token punctuation">]</span><span class="token punctuation">]</span>   name <span class="token operator">=</span> <span class="token string">'wsdjeg/neomake.vim'</span>   <span class="token macro property"># note: you need to disable merged feature</span>   merged <span class="token operator">=</span> false</code></pre><p>或者添加本地克隆版本 使用 bootstrap_before 函数来添加本地路径：</p><pre class=" language-c"><code class="language-c">function<span class="token operator">!</span> myspacevim#<span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort    set rtp<span class="token operator">+</span><span class="token operator">=</span><span class="token operator">~</span><span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>your<span class="token operator">/</span>localpluginendfunction</code></pre><h4 id="使用Inkscape生成图片"><a href="#使用Inkscape生成图片" class="headerlink" title="使用Inkscape生成图片"></a>使用Inkscape生成图片</h4><p>从菜单中：文件 - &gt;保存副本。在右下角，选择文件类型“Encapsulated PostScript（* .eps）”</p><p>在LaTeX文件中，使用“\ includegraphics {filename.eps}”。有关如何在LaTeX中使用EPS文件的教程，请搜索Google：latex导入图形。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用笔记</title>
      <link href="/2019/03/27/linux-shi-yong-bi-ji/"/>
      <url>/2019/03/27/linux-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>1.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">基本概念与帮助</a></p><p>2.<a href="http://jinzhnegxu.online/2019/03/21/鸟哥的Linux私房菜-2-文件权限与目录" target="_blank" rel="noopener">文件权限与目录</a></p><p>3.<a href="http://jinzhnegxu.online/2019/03/26/鸟哥的Linux私房菜-3-Linux文件与目录管理/" target="_blank" rel="noopener">Linux文件与目录管理</a></p><p>4.<a href="http://jinzhnegxu.online/2019/04/04/鸟哥的Linux私房菜-4-Linux磁盘与文件系统管理/" target="_blank" rel="noopener">Linux磁盘与文件系统管理</a></p><p>5.<a href="http://jinzhnegxu.online/2019/04/18/鸟哥的Linux私房菜-5-文件与文件系统的压缩/" target="_blank" rel="noopener">文件与文件系统的压缩</a></p><p>6.<a href="http://jinzhnegxu.online/2019/04/23/鸟哥的Linux私房菜-6-vim程序编辑器/" target="_blank" rel="noopener">史上最棒的编辑器–vim</a></p><p>7.<a href="http://jinzhnegxu.online/2019/05/06/鸟哥的Linux私房菜-7-认识与学习BASH/" target="_blank" rel="noopener">BASH的使用</a></p><p>8.<a href="http://jinzhnegxu.online/2019/05/19/鸟哥的Linux私房菜-8-正则表达式与文件格式化处理/" target="_blank" rel="noopener">正则表达式与文件格式化处理</a></p><p>9.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">shell scripts</a></p><p>10.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">Linux账号管理与ACL权限</a></p><p>11.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">Quota与高级文件管理系统</a></p><p>12.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">crontab</a></p><p>13.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">进程管理与SELinux</a></p><p>14.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">认识deamon</a></p><p>15.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">日志文件</a></p><p>16.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">启动流程,模块管理与Loader</a></p><p>17.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">基础备份设置与备份策略</a></p><p>18.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">软件安装:源代码与Tarball</a></p><p>19.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">RPM,SRPM与YUM</a></p><p>20.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">X Window 设置</a></p><p>21.<a href="http://jinzhnegxu.online/2019/03/18/鸟哥的Linux私房菜-1-基本概念与帮助/" target="_blank" rel="noopener">内核编译与管理</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(3)-Linux文件与目录管理</title>
      <link href="/2019/03/26/niao-ge-de-linux-si-fang-cai-3-linux-wen-jian-yu-mu-lu-guan-li/"/>
      <url>/2019/03/26/niao-ge-de-linux-si-fang-cai-3-linux-wen-jian-yu-mu-lu-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h3><h4 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h4><ul><li>相对路径:：<strong><em>安装软件</em></strong>时,每个人有不同的文件安装位置,这时使用相对路径来安排各个软件目录下的文件位置就十分方便。</li><li>绝对路径：绝对路径是绝对正确的路径（如果你自己没犯傻的话），在使用<strong><em>shell脚本</em></strong>的来管理系统的情况下，请务必使用绝对路径。</li></ul><h4 id="目录的相关操作"><a href="#目录的相关操作" class="headerlink" title="目录的相关操作"></a>目录的相关操作</h4><p>特殊的目录：</p><pre><code>.         当前目录---------------|——所有目录下都会存在的两个目录..        当前目录的上一层目录---|（根目录的这两个目录相同）~         当前目前使用者的家目录—         前一个工作目录~account  代表account账户的家目录</code></pre><p>日常处理目录的命令：</p><pre><code>cd     切换目录pwd    显示当前目录rmdir  建立一个新目录mkdir  删除一个空目录</code></pre><h6 id="cd（change-directory，切换目录）"><a href="#cd（change-directory，切换目录）" class="headerlink" title="cd（change directory，切换目录）"></a>cd（change directory，切换目录）</h6><ul><li>注意利用相对路径的写法时必须要确认当前的所在工作目录的局对路径，单独使用<code>cd</code>相当于<code>cd ~</code>，<code>cd -</code>会显示前一个工作目录</li><li>利用[Tab]键来自动补全路径<h6 id="pwd（显示目前所在的目录，Print-Working-directory）"><a href="#pwd（显示目前所在的目录，Print-Working-directory）" class="headerlink" title="pwd（显示目前所在的目录，Print Working directory）"></a>pwd（显示目前所在的目录，Print Working directory）</h6><pre><code>pwd [-P]选项与参数：-P： 显示出真正的路径，而非使用链接（Link）路径。</code></pre><h6 id="rmdir（remove-directory）"><a href="#rmdir（remove-directory）" class="headerlink" title="rmdir（remove directory）"></a>rmdir（remove directory）</h6><pre><code>rmdir [-p] 目录名称选项与参数-p：连同上层的空目录一起递归删除</code></pre>目录中必须是空的，如果有任何的文件和目录，都不能使用<code>rmdir</code>。<h6 id="mkdir（make-directory）"><a href="#mkdir（make-directory）" class="headerlink" title="mkdir（make directory）"></a>mkdir（make directory）</h6><pre><code>mkdir [-mp] 目录名称选项与参数：-m：设置文件的权限，直接设置，不使用默认权限（umask）-：对需要创建的目录（包含上层目录）递归创建</code></pre></li></ul><h4 id="执行文件路径–-PATH"><a href="#执行文件路径–-PATH" class="headerlink" title="执行文件路径–$PATH"></a>执行文件路径–$PATH</h4><p>PATH是环境变量，当我们从Terminal执行命令的时候，系统会按<strong><em>顺序</em></strong>从每个PATH的定义的目录下查找同名的可执行文件。</p><p>PATH由一堆目录组成，每个目录之间用<code>：</code>隔开。</p><pre><code>$ echo $PATH 显示当前PATH$ PATH=&quot;${PATH}:directory&quot;  临时修改PATH$ vim .bashrc 通过.bashrc永久修改文件$ source .bashrc 使文件生效</code></pre><p>为了安全起见，不要将<code>.</code>本目录加入PATH。</p><h3 id="文件与目录管理"><a href="#文件与目录管理" class="headerlink" title="文件与目录管理"></a>文件与目录管理</h3><pre><code>$ ls 查看$ cp 复制$ rm 删除$ mv 移动，重命名</code></pre><h4 id="文件与目录的查看ls"><a href="#文件与目录的查看ls" class="headerlink" title="文件与目录的查看ls"></a>文件与目录的查看ls</h4><pre><code>$ ls [-aAdfFhilnrRSt] 文件名或目录名称$ ls [--color={never,auto,always}] 文件名或目录名称$ ls [--full-time] 文件名或目录名称选项与参数：× -a：全部的文件，连同隐藏文件一起列出来  -A：全部的文件，连同隐藏文件但不包括.和..这两个目录× -d：仅列出目录本身，而不是列出目录内的问价数据  -f：直接列出结果，而不进行排序（ls会默认以文件名排序）  -F：根据文件，目录等信息，给予附加数据结构，     *:可执行文件     /:目录     =:socket文件     |:FIFO文件  -h：将文件容量以人类易读的方式列出KB，GB  -i：列出inode号码× -l：详细信息显示，包含文件的属性与权限等数据  -n：列出UID与GID而非使用而非使用者与用户组的名称  -r：将排序结果反向输出  -R：连同子目录下的文件一起列出来  -S：以文件容量大小排序  -t：依时间排序而不是用文件名  --color=never：不要依据文件特性显示颜色  --color=always：显示颜色  --color=auto：系统自动根据设置来判断是否设置颜色  --full-time：以完整的时间模式处处输出  --time={atime，ctime}：输出access时间或改变权限属性时间  ls默认只显示：非隐藏文件，以文件名排序，文件名代表的颜色</code></pre><h4 id="复制-删除与移动"><a href="#复制-删除与移动" class="headerlink" title="复制,删除与移动"></a>复制,删除与移动</h4><h6 id="cp（复制文件或目录）"><a href="#cp（复制文件或目录）" class="headerlink" title="cp（复制文件或目录）"></a>cp（复制文件或目录）</h6><pre class=" language-c"><code class="language-c">$ cp <span class="token punctuation">[</span><span class="token operator">-</span>adfilprsu<span class="token punctuation">]</span> 源文件（source） 目标文件（destination）$ cp <span class="token punctuation">[</span><span class="token operator">-</span>options<span class="token punctuation">]</span> sorce1 source2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> directory选项与参数：× <span class="token operator">-</span>a：相当于<span class="token operator">-</span>dr <span class="token operator">--</span>preserve<span class="token operator">=</span>all    <span class="token operator">-</span>d：若原文件为链接文件的属性（link file），则赋值连接文件的属性而非文件本身    <span class="token operator">-</span>f：force，若目标文件已经存在且无法开启，则删除目标文件后再尝试一次× <span class="token operator">-</span>i：若目标文件（destination）已经存在时，在覆盖时会先询问    <span class="token operator">-</span>l：进行硬链接（hard link）文件的建立，而非复制文件本身× <span class="token operator">-</span>p：连同文件的属性，一起复制过去，而非使用默认属性× <span class="token operator">-</span>r：递归复制    <span class="token operator">-</span>s：负值成为符号连接文件（srmbolic link），即快捷方式    <span class="token operator">-</span>u：目标文件比源文件旧才更新    <span class="token operator">--</span>preserve<span class="token operator">=</span>all：除了<span class="token operator">-</span>p的权限外还加入SELinux属性，links，xatter等也复制</code></pre><p>在默认的条件下，cp的源文件与目标文件是不同的，目标文件的拥有者通常是命令操作者本身。</p><h6 id="rm（删除文件或目录）"><a href="#rm（删除文件或目录）" class="headerlink" title="rm（删除文件或目录）"></a>rm（删除文件或目录）</h6><pre class=" language-c"><code class="language-c">$ rm <span class="token punctuation">[</span><span class="token operator">-</span>fir<span class="token punctuation">]</span> 文件或目录选项与参数：<span class="token operator">-</span>f：force的意思，忽略不存在的文件或目录<span class="token operator">-</span>i：交互模式，在删除前会询问使用者是否操作<span class="token operator">-</span>r：递归删除（Dangerous！！）$ rm <span class="token operator">-</span>i bashrc<span class="token operator">*</span> <span class="token comment" spellcheck="true">//通配符*可以删除目录下所有开头为bashrc的文件</span>$ \rm <span class="token operator">-</span>r <span class="token operator">/</span>tmp<span class="token operator">/</span>etc <span class="token comment" spellcheck="true">//rm命令前加上\可以忽略alias指定的选项</span>$ rm <span class="token operator">--</span> <span class="token operator">-</span>aaa<span class="token operator">-</span> <span class="token comment" spellcheck="true">//这样可以删除文件中带-的文件，放置系统误判为选择项</span></code></pre><h6 id="mv-（移动文件与目录，或重命名）"><a href="#mv-（移动文件与目录，或重命名）" class="headerlink" title="mv （移动文件与目录，或重命名）"></a>mv （移动文件与目录，或重命名）</h6><pre class=" language-c"><code class="language-c">$ mv <span class="token punctuation">[</span><span class="token operator">-</span>fiu<span class="token punctuation">]</span> source destination$ mv <span class="token punctuation">[</span>options<span class="token punctuation">]</span> source1 source2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> directory选项与参数：<span class="token operator">-</span>f：force，如果目标文件已经存在，不会询问直接覆盖<span class="token operator">-</span>i：询问是否覆盖<span class="token operator">-</span>u：若目标文件已经存在，且源文件较新，才会覆盖$ mv mvtest mvtest2  <span class="token comment" spellcheck="true">//这样就可重命名</span></code></pre><h4 id="获取路径的文件名与目录名称"><a href="#获取路径的文件名与目录名称" class="headerlink" title="获取路径的文件名与目录名称"></a>获取路径的文件名与目录名称</h4><pre><code>$ basename /etc/sysconfig/networknetwork //文件名$ dirname /etc/sysconfig/network/etc/sysconfig //目录名</code></pre><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><ul><li>cat由由第一行开始显示文件内容</li><li>tac从最后一行显示文件内容</li><li>nl显示的时候同时输出行号</li><li>more一页一页的显示文件内容</li><li>less，和more类似，可以向前翻页</li><li>head 只看前面几行</li><li>tail 只看后面几行</li><li>od以二进制方式读取文件内容</li></ul><h4 id="直接查看文件内容"><a href="#直接查看文件内容" class="headerlink" title="直接查看文件内容"></a>直接查看文件内容</h4><h6 id="cat（concatenate串联）"><a href="#cat（concatenate串联）" class="headerlink" title="cat（concatenate串联）"></a>cat（concatenate串联）</h6><pre><code>$ cat [-AbEnTv]选项与参数：    -A：相当于-vET的整合选项，可列出一些特殊字符而不是空白    -b：列出行号，空白行不做显示    -E：将结尾的换行符以$表示× -n：打印行号，空白行也有    -T：将[Tab]键以^I显示出来    -v：列出一些看不出来的特殊字符</code></pre><h6 id="tac（反向列示）"><a href="#tac（反向列示）" class="headerlink" title="tac（反向列示）"></a>tac（反向列示）</h6><h6 id="nl（添加行号）"><a href="#nl（添加行号）" class="headerlink" title="nl（添加行号）"></a>nl（添加行号）</h6><pre><code>$ nl [-bnw] 文件选项与参数：-b：指定行号指定的方式：      -b a：表示不论是否为空行，都列出行号      -b n：如果有空行，不列出行号（默认）-n：列出行号表示的方法：      -n ln：行号在屏幕的最左方显示      -n rn：行号在自己栏位的最右方显示，不加0      -n rz：行号在自己栏位的最右方显示，加0-w：行号栏位占用的字符数</code></pre><h4 id="可翻页查看"><a href="#可翻页查看" class="headerlink" title="可翻页查看"></a>可翻页查看</h4><h6 id="more（一页一页翻动）"><a href="#more（一页一页翻动）" class="headerlink" title="more（一页一页翻动）"></a>more（一页一页翻动）</h6><ul><li>空格键；向下翻页</li><li>Enter：代表向下一行</li><li>/字符串：向下查找字符串这个关键词</li><li>：f：立即显示出文件名和人当前行数</li><li>q：离开</li><li>b向后翻页，只对文件有用对管道无用<h6 id="less"><a href="#less" class="headerlink" title="less"></a>less</h6></li><li>like man：man就是使用less来显示文件内容</li></ul><h4 id="数据截取"><a href="#数据截取" class="headerlink" title="数据截取"></a>数据截取</h4><h6 id="head"><a href="#head" class="headerlink" title="head"></a>head</h6><pre><code>$ head [-n number] 文件</code></pre><h6 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h6><pre><code>$ tail [-n number] 文件选项与参数：-n：接数字，显示number行-f：持续刷新显示后所接文件的内容</code></pre><p>取一个文件的第11行和第20行之间的内容：</p><pre><code>head -n 20 /etc/man_db.conf | head -n 20 | tail -n 10</code></pre><h4 id="非纯文本文件od"><a href="#非纯文本文件od" class="headerlink" title="非纯文本文件od"></a>非纯文本文件od</h4><pre><code>$ od [-t TYPE] 文件选项或参数：-t：后面可以接各种【类型（TYPE】的输出：    a：利用默认的字符来输出    c：使用ASCII字符来输出    d[size]：用十进制来输出，每个整数占用size Bytes；    f[size]：用浮点数来输出，每个整数占用size Bytes；    o[size]：用八进制来输出，每个整数占用size Bytes；    x[size]：用十六进制来输出，每个整数占用size Bytes；$ echo password | od -t oCc0000000 160 141 163 163 167 157 162 144 012          p   a   s   s   w   o   r   d  \n0000011</code></pre><h4 id="修改文件时间或创建新文件touch"><a href="#修改文件时间或创建新文件touch" class="headerlink" title="修改文件时间或创建新文件touch"></a>修改文件时间或创建新文件touch</h4><ul><li>修改时间（modification time，mtime）</li><li>状态时间（Status time，ctime）</li><li>读取时间（access time，atime）</li></ul><p>Linux默认显示该文件的mtime。</p><pre><code>$ touch [-acdnt] 文件选项与参数：-a：仅自定义atime-c：仅修改文件的时间，若不存在则不修改-d：后面可以接自定义的日期-m：仅修改mtime-t：后面可以接自定义的时间$ touch -d &quot;2 days ago&quot; bashrc</code></pre><h3 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h3><h4 id="文件默认权限umask"><a href="#文件默认权限umask" class="headerlink" title="文件默认权限umask"></a>文件默认权限umask</h4><p><code>umask</code>指定目前用户在建立文件或 目录时的权限默认值。</p><pre><code>$ umask0022$ umask -Su=rwx,g=rx,o=rx</code></pre><p>建立目录时会在默认值的基础上减去<code>umask</code>的值。</p><ul><li>建立文件的默认没有可执行权限：<br><code>-rw-rw-rw-</code></li><li>建立目录默认所有权限开放：<br><code>drwxrwxrwx</code></li></ul><h4 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h4><h6 id="chatter（配置文件隐藏属性）"><a href="#chatter（配置文件隐藏属性）" class="headerlink" title="chatter（配置文件隐藏属性）"></a>chatter（配置文件隐藏属性）</h6><pre><code>$ chatter [+-=] [ASacdistu] 文件或目录名称选项与参数： +：增加一个特殊参数-：删除一个特殊参数=：直接设置参数A：存取文件时，atime不会被改变S：文件同步写入磁盘a：只能增加数据，不能删除也不能修改c：文件压缩，读取时自动解压d：文件不会被dump备份i：文件不能被删除，改名，设置链接，也无法写入或新增数据s：删除时被完全删除u：删除时数据还在磁盘之中</code></pre><h6 id="lsatter（显示文件隐藏属性）"><a href="#lsatter（显示文件隐藏属性）" class="headerlink" title="lsatter（显示文件隐藏属性）"></a>lsatter（显示文件隐藏属性）</h6><pre><code>$ lsatter [-adR] 文件或目录选项与参数：-a：隐藏文件的属性也显示出来-d：如果接的是目录，仅列出目录本身的属性而非目录内的文件名-R：连同子目录的数据也一并列出来</code></pre><h4 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h4><h6 id="SUID（Set-UID）"><a href="#SUID（Set-UID）" class="headerlink" title="SUID（Set UID）"></a>SUID（Set UID）</h6><ul><li>SUID执行权限仅对二进制程序（binary program）有效；</li><li>执行者对于该程序需要具有x的执行权限；</li><li>本权限仅在执行该程序的过程中有效（run-time）；</li><li>执行者将具有该程序拥有者的权限<pre><code>           |———|*/usr/bin/passwd  *|           |   |*权限：-rwsr-xr-x *|           |   |*特殊：SUID       *|——由普通用户变为root           |   |*程序拥有者：root *|           |普通用户——|           |           |   |*/bin/cat         *|           |   |*权限：-rwxr-xr-x *|——还是普通用户           |   |*特殊：无         *|           |———|*程序拥有者：root *|</code></pre>SUID仅可用于二进制文件上，不能用在shell脚本上<h6 id="SGID（Set-GID）"><a href="#SGID（Set-GID）" class="headerlink" title="SGID（Set GID）"></a>SGID（Set GID）</h6></li><li>对于文件：<ul><li>SGID对二进制程序有用</li><li>程序执行者对于该程序来说，需要具备x的权限</li><li>执行者在执行的过程中将会获得该程序用户组的支持</li><li>对于目录：</li><li>用户若对于此目录具有r与x的权限时，该用户能够进入此目录</li><li>用户在此目录下的有效用户组（effective group）将会变成该目录的用户组</li><li>用途：若用户在此目录下具有w的权限（可以新建文件），则用户所建立的新文件，该文件的用户组与此目录的用户组相同</li><li>SBIT</li></ul></li><li>当用户对于此目录具有w，x权限，即具有写入的权限</li><li>当用户在该目录下建立文件或目录时，仅有自己与root才有权力删除该文件。</li></ul><p>SUID/SGID/SBIT权限设置：4为SUID，2为SGID，1为SBIT。</p><h4 id="观察文件类型"><a href="#观察文件类型" class="headerlink" title="观察文件类型"></a>观察文件类型</h4><pre><code>$ file ~/.bashrc/home/jason/.bashrc: ASCII text$ file /usr/bin/passwd/usr/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=d44c96296f224071ed008e442b9eb3f2462840e4, stripped</code></pre><h3 id="命令与文件的查找"><a href="#命令与文件的查找" class="headerlink" title="命令与文件的查找"></a>命令与文件的查找</h3><h4 id="脚本文件的查找which"><a href="#脚本文件的查找which" class="headerlink" title="脚本文件的查找which"></a>脚本文件的查找which</h4><pre><code>$ which [-a] command选项或参数：-a：所有由PATH目录中可以找到的命令全部列出</code></pre><p>which根据PATH的规范的路径去寻找执行文件的文件名。</p><h4 id="文件的查找"><a href="#文件的查找" class="headerlink" title="文件的查找"></a>文件的查找</h4><h6 id="whereis（由一些特定的目录中查找文件）"><a href="#whereis（由一些特定的目录中查找文件）" class="headerlink" title="whereis（由一些特定的目录中查找文件）"></a>whereis（由一些特定的目录中查找文件）</h6><pre><code>$ whereis [-bmsu] 文件或目录名选项与参数：-l ： 列出whereis查询的目录-b：只找binary（二进制）格式的文件-m：只找在说文件manual路径下的文件-s：只找source源文件-u：查找不在上述三个项目中的其他文件</code></pre><h6 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h6><p>根据<code>/var/lib/mlocate</code>文件中的数据库记录，找出用户所输入的关键词的文件名。</p><pre><code>$ locate [-ir] keyword选项与参数：-i：忽略大小写-c：只输出找到文件的数量-l：仅输出几行的意思-S：输出locate使用的数据库文件的信息-r：后接正则表达式</code></pre><h6 id="updatedb"><a href="#updatedb" class="headerlink" title="updatedb"></a>updatedb</h6><p>根据<code>/etc/updatedb.conf</code>的设置去查找系统硬盘内的文件，并更新<code>/var/lib/mlocate</code>内的数据库文件，locate的数据库如果不执行，则是一天更新一次。</p><h6 id="find"><a href="#find" class="headerlink" title="find"></a>find</h6><pre><code>$ find [PATH] [option] [action]选项与参数：1.与时间有关的项目：  -mtime n ：n天之前（一天之内）被修改过的项目  -mtime +n：n天之前（不含n天）被修改过的项目  -mtime -n：n天之内（含n天）被修改过的项目  -never file：file为一个存在的文件，列出比file还要新的文件2.与使用者或用户参数有关的参数  -uid n：n为UID  -gid n：n为GID  -user name：  -group name：  -nouser：文件拥有者不在passwd内  -nogroup3.与文件权限及名称有关的参数  -name filename：查找文件名为filename的文件  -size [+-] SIZE  -type TYPE  -perm mode：权限等于mode  -perm -mode：权限大于等于mode  -perm /mode：权限只要包含任意mode4.额外操作：  -exec command：接额外的命令来处理查找到的结果  -print：结果打印到屏幕，默认</code></pre><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>一个可以被挂载的数据通常称为『文件系统, filesystem』而不是分区槽 (partition) 喔!</li><li>基本上 Linux 的传统文件系统为 Ext2 ,该文件系统内的信息主要有:<ul><li>superblock:记录此 filesystem 的整体信息,包括 inode/block 的总量、使用量、剩余量, 以及文件系统的格式与相关信息等;</li><li>inode:记录文件的属性,一个文件占用一个 inode,同时记录此文件的数据所在的 block 号码;</li><li>block:实际记录文件的内容,若文件太大时,会占用多个 block 。</li></ul></li><li>Ext2 文件系统的数据存取为索引式文件系统(indexed allocation)</li><li>需要碎片整理的原因就是文件写入的 block 太过于离散了,此时文件读取的效能将会变的很差所致。 这个时候可以透过碎片整理将同一个文件所属的 blocks 汇整在一起。</li><li>Ext2 文件系统主要有:boot sector, superblock, inode bitmap, block bitmap, inode table, data block 等六大部分。</li><li>data block 是用来放置文件内容数据地方,在 Ext2 文件系统中所支持的 block 大小有 1K, 2K 及 4K 三种而已</li><li>inode 记录文件的属性/权限等数据,其他重要项目为: 每个 inode 大小均为固定,有 128/256bytes 两种基本容量。每个文件都仅会占用一个 inode 而已; 因此文件系统能够建立的文件数量与 inode 的数量有关;</li><li>文件的 block 在记录文件的实际数据,目录的 block 则在记录该目录底下文件名与其 inode 号码的对照表;</li><li>日志式文件系统 (journal) 会多出一块记录区,随时记载文件系统的主要活动,可加快系统复原时间;</li><li>Linux 文件系统为增加效能,会让主存储器作为大量的磁盘高速缓存;</li><li>实体链接只是多了一个文件名对该 inode 号码的链接而已;</li><li>符号链接就类似 Windows 的快捷方式功能。</li><li>磁盘的使用必需要经过:分区、格式化与挂载,分别惯用的指令为:gdisk, mkfs, mount 三个指令</li><li>分区时,应使用 parted 检查分区表格式,再判断使用 fdisk/gdisk 来分区,或直接使用 parted 分区</li><li>为了考虑效能,XFS 文件系统格式化时,可以考虑加上 agcount/su/sw/extsize 等参数较佳</li><li>如果磁盘已无未分区的容量,可以考虑使用大型文件取代磁盘装置的处理方式,透过 dd 与格式化功能。</li><li>开机自动挂载可参考/etc/fstab 之设定,设定完毕务必使用 mount -a 测试语法正确否;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 文件和目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(2)-文件权限与目录</title>
      <link href="/2019/03/21/niao-ge-de-linux-si-fang-cai-2-wen-jian-quan-xian-yu-mu-lu/"/>
      <url>/2019/03/21/niao-ge-de-linux-si-fang-cai-2-wen-jian-quan-xian-yu-mu-lu/</url>
      
        <content type="html"><![CDATA[<p>Linux 和windows的一个主要区别是Windows的设计是单人假多任务，而Linux则是优秀的多人多任务环境，为了针对每个用户都有自己的文件管理权限，Linux有一套自己的文件管理方式，将文件可读写的身份分为三个类别，分别是 <strong>* 拥有者（owner），所属群组（group），其他人（others）。*</strong></p><h4 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h4><p>开始接触Linux的时候,由于是自己一个用户来操作个人电脑,只对用户的概念有所了解，用户分为<code>root</code>用户和普通用户。而用户组的概念则是针对多人多任务的情况提出的，让我们思考这样一个情况，假设两组有竞争关系的小组同时使用一台电脑来完成任务，他们最后需要提交的文件是一样的，那肯定在任务进行期间双方只能改动和查看自己的文件，而不能查看对方组内的文件。<strong>* So，用户组最有用的功能之一，就是当你的团队进行协同工作的时候 。*</strong></p><p>在假设一种情况，如果你是刚刚的小组中的一员，在进行工作的闲暇之余，你访问了PornHub并且下载了影片，作为一个正常人，你肯定不会想让自己小组的成语直到你干了什么，这时，你可以将文件的权限设置为作为文件拥有者才拥有查看的权利，其他人都没有。那么即时其他人直到这里有一个十分有趣的文件，也无法直到文件的具体内容。</p><p>还有一个<strong>* others*</strong> 的概念，在设定好用户组以后，除本组成员外的<strong>* 其他人*</strong> ，你也可以针对他们设置文件的权限。</p><p>、linux中默认将所有系统上账户的信息都记录在<code>/etc/paswd</code>这个文件内,用户的密码则储存<code>/etc/shadow</code>文件中,而用户组名则储存在<code>/etc/group</code>中。</p><h4 id="Linux文件权限概念"><a href="#Linux文件权限概念" class="headerlink" title="Linux文件权限概念"></a>Linux文件权限概念</h4><h5 id="Linux文件权限设置"><a href="#Linux文件权限设置" class="headerlink" title="Linux文件权限设置"></a>Linux文件权限设置</h5><p>由于<code>chgrp</code>，<code>chown</code>，<code>chmod</code>命令都需要root身份来执行，所以我们切换到root账户：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">su</span></code></pre><p>在根目录<code>/root</code>下执行（注意Linux中有很多root，刚刚我们登录的是root账户，这里是根目录，他们都是不同的概念）</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Jason ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -al <span class="token comment" spellcheck="true">#ls是list的意思，重点显示文件的文件名与相关属性，</span>                       <span class="token comment" spellcheck="true">#选项[-al]表示列出所有的文件详细的权限与属性。</span>total 220dr-xr-x---    4     root     root       4096      3月  18 11:51   <span class="token keyword">.</span>dr-xr-xr-x   24     root     root       4096      3月  20 01:57   <span class="token punctuation">..</span>drwxrwxrwx    3     root     root       4096      3月  14 11:50   91yunserverspeeder-rw-r--r--    1     root     root      63298      3月  14 11:50   91yunserverspeeder.tar.gz-rw-------    1     root     root       2134      3月  18 12:33   .bash_history-rw-r--r--    1     root     root         18      5月  20 2009   .bash_logout-rw-r--r--    1     root     root        176      5月  20 2009   .bash_profile-rw-r--r--    1     root     root        176      9月  23 2004   .bashrc-rw-r--r--    1     root     root        100      9月  23 2004   .cshrc-rw-------    1     root     root         40      3月  18 11:52   .lesshstdrwxr-----    3     root     root       4096      10月 16 22:49   .pki-rwxr-xr-x    1     root     root       6156      3月  14 11:40   serverspeeder.sh-rw-r--r--    1     root     root      47804      3月  14 11:18   shadowsocks-all.log-rwxr-xr-x    1     root     root      46219      3月  14 11:13   shadowsocks-all.sh-rw-r--r--    1     root     root        554      3月  14 11:18   shadowsocks_r_qr.png-rw-r--r--    1     root     root        129      12月  3 2004    .tcshrc<span class="token punctuation">[</span>    1    <span class="token punctuation">]</span> <span class="token punctuation">[</span> 2  <span class="token punctuation">]</span> <span class="token punctuation">[</span>  3   <span class="token punctuation">]</span> <span class="token punctuation">[</span>   4   <span class="token punctuation">]</span> <span class="token punctuation">[</span>   5    <span class="token punctuation">]</span> <span class="token punctuation">[</span>       6      <span class="token punctuation">]</span> <span class="token punctuation">[</span>           7                <span class="token punctuation">]</span><span class="token punctuation">[</span>   权限  <span class="token punctuation">]</span> <span class="token punctuation">[</span>链接<span class="token punctuation">]</span> <span class="token punctuation">[</span>拥有者<span class="token punctuation">]</span> <span class="token punctuation">[</span>用户组 <span class="token punctuation">]</span> <span class="token punctuation">[</span>文件容量<span class="token punctuation">]</span> <span class="token punctuation">[</span>   修改日期   <span class="token punctuation">]</span> <span class="token punctuation">[</span>         文件名             <span class="token punctuation">]</span></code></pre><p>（注：为了显示方便，加入了许多空格）</p><h6 id="1-代表文件的类型与权限"><a href="#1-代表文件的类型与权限" class="headerlink" title="[1]代表文件的类型与权限"></a>[1]代表文件的类型与权限</h6><p>这一栏有十个字符：</p><ul><li>第一个字符代表这个文件是<strong><em>目录、文件或链接文件等</em></strong><ul><li>当为[d]则是目录，例如上表文件名为[91yunserverspeeder]的一行</li><li>当为[-]则是文件，例如上表名为[shadowsocks-all.log]的一行</li><li>当为[l]则表示为链接文件（link file）</li><li>若是[b]则表示为设备文件里面可供储存的周边设备（可按块随机读写的设备）</li><li>若是[c]则表示为设备文件里面的串行端口设备，例如键盘，鼠标（一次性读取设备）；</li></ul></li><li>接下来的字符中，以三个为一组，且均为[rwx]的三个参数的组合，其中[r]代表read，[w]代表write，[x]代表execute，如果该用户拥有该权限，则显示对应的字符，如果没有权限，则显示[-]。<ul><li>第一组为文件拥有者可具备执行的权限</li><li>第二组为加入次用户组之账号的权限</li><li>第三组为非本人且没有本用户组的其他账号的权限</li></ul></li></ul><h6 id="2-表示有多少文件名链接到这个节点（inode）"><a href="#2-表示有多少文件名链接到这个节点（inode）" class="headerlink" title="[2]表示有多少文件名链接到这个节点（inode）"></a>[2]表示有多少文件名链接到这个节点（inode）</h6><p>Linux中每个文件都会将它的权限及属性记录到文件系统的inode中，目录树中是使用文件名来记录的，因此每个文件名会关联到一个inode号码，这个数字就是显示有多少个文件关联到同一个inode号码。</p><h6 id="3-表示这个文件的拥有者账户"><a href="#3-表示这个文件的拥有者账户" class="headerlink" title="[3]表示这个文件的拥有者账户"></a>[3]表示这个文件的拥有者账户</h6><h6 id="4-表示这个文件的所属用户组"><a href="#4-表示这个文件的所属用户组" class="headerlink" title="[4]表示这个文件的所属用户组"></a>[4]表示这个文件的所属用户组</h6><h6 id="5-表示这个文件的容量，默认为Bytes"><a href="#5-表示这个文件的容量，默认为Bytes" class="headerlink" title="[5]表示这个文件的容量，默认为Bytes"></a>[5]表示这个文件的容量，默认为Bytes</h6><h6 id="6-表示这个文件的创建日期或最后修改日期"><a href="#6-表示这个文件的创建日期或最后修改日期" class="headerlink" title="[6]表示这个文件的创建日期或最后修改日期"></a>[6]表示这个文件的创建日期或最后修改日期</h6><h6 id="7-表示这个文件的文件名"><a href="#7-表示这个文件的文件名" class="headerlink" title="[7]表示这个文件的文件名"></a>[7]表示这个文件的文件名</h6><p><strong>* Linux下文件权限的设置非常重要！！！ *</strong></p><p><strong><em>在修改你的Linux文件与目录的属性之前，一定要先搞清楚，什么数据是可变的，什么是不可变的。</em></strong></p><h5 id="修改文件属性与权限"><a href="#修改文件属性与权限" class="headerlink" title="修改文件属性与权限"></a>修改文件属性与权限</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chgrp</span>  //修改文件所属用户组$ <span class="token function">chown</span>  //修改文件拥有者$ <span class="token function">chmod</span>  //修改文件的权限，SUID，SGID，SBIT等的特性</code></pre><h6 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chgrp</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> dirname/filename<span class="token punctuation">..</span>.选项与参数：-R ： 进行递归（recursive）修改，亦即联通子目录下所有文件，目录都更新为这个用户组之意。</code></pre><h6 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chown</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> 账号名称 文件或目录$ <span class="token function">chown</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> 账号名称:用户组名称 文件或目录选项与参数：-R ： 进行递归（recursive）修改，亦即联通子目录下所有文件，目录都更新为这个用户组之意。</code></pre><p>命令中的<code>:</code>也可以使用<code>.</code>来代替，但是Linux中隐藏文件和用户名及文件名都常常含有<code>.</code>，所以我们尽量使用<code>:</code>来防止系统误判。</p><h6 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> xyz 文件或目录选项与参数：-R ： 进行递归（recursive）修改，亦即联通子目录下所有文件，目录都更新为这个用户组之意。</code></pre><ul><li>数字类型修改文件权限。<br>Linux文件的基本权限有九个，分别是拥有者（owner），所属群组（group），其他人（others）三种身份分别拥有读（read），写（write），执行（execute）权限，我们可以使用数字代替各个权限：<pre><code>r：4w：2x：1</code></pre>每种身份的权限可以表示为一个数字，这样三组权限有三个数字就可以完全表示了，如：<pre><code>rwx 4+2+1=7r-x 4+1=5</code></pre>这里鸟哥没有提到，但是我认为也可以理解为也可以理解为二进制形式：<pre><code>rwx 111 = 7r-x 101 = 5</code></pre>所以我们设置权限时，就可以直接通过这样的方式进行修改<pre class=" language-bash"><code class="language-bash">root@Jason:~<span class="token comment" spellcheck="true"># chmod -R xyz 文件或目录</span></code></pre></li><li>符号类型修改权限。我们借用u，g，o来代表三种身份，rwx代表权限</li></ul><p>|chmod|u(user) g(group) o(others) a(all)|+ (加入) - (移除) =(设置)|r(读) w(写) x(执行)|文件和目录|<br>| :|</p><h5 id="目录与文件的权限意义"><a href="#目录与文件的权限意义" class="headerlink" title="目录与文件的权限意义"></a>目录与文件的权限意义</h5><ul><li>文件</li></ul><p>[r]这个权限比较通俗，就是读取文件的内容。</p><p>[w]权限可以拥有修改，编辑，写入，新增的权限，但是无权<strong><em>删除</em></strong>该文件。</p><p>Windows下文件是否具有执行能力是看文件的扩展名来决定，<strong><em>而在Linux下一个文件是否能够执行即借由[x]这个权限来决定，跟文件名没有绝对的关系。</em></strong></p><ul><li>目录</li></ul><p>[r]权限可以赋予你读取一个目录的权限，可以通过<code>ls</code>命令将该目录下的文件列表显示。</p><p>[w]的权限对于目录来说十分大，<strong><em>拥有改变目录结构列表的权限</em></strong>：即<br>+</p><ul><li>建立新文件与新目录</li><li>删除已经存在的文件和目录</li><li>将文件和目录更名</li><li>移动该目录内的文件，目录位置</li></ul><p>[x]代表用户是否有权利进入该目录成为工作目录，能不能进入一个目录只与[x权限有关，<strong><em>如果你在某目录下不具有x的权限，你就无法切换到该目录下，即使你具有rhuow的权限，也无法执行该目录下的任何命令。</em></strong> （所以我们在搭建博客时至少应该开放r和x权限，而w权限不能随意开放）</p><p>下面的表格中总结了几种情况来说明完成某种操作所具有的最小权限</p><pre><code>/dir1/file1/dir2</code></pre><table><thead><tr><th align="center">操作</th><th align="center">/dir1</th><th align="center">/dir1/file1</th><th align="center">/dir2</th><th align="center">重点</th></tr></thead><tbody><tr><td align="center">读取file1内容</td><td align="center">x</td><td align="center">r</td><td align="center">-</td><td align="center">能够进入/dir1且能读取file1</td></tr><tr><td align="center">修改file1内容</td><td align="center">x</td><td align="center">rw</td><td align="center">-</td><td align="center">能够进入/dir1且能修改file1</td></tr><tr><td align="center">执行file1内容</td><td align="center">x</td><td align="center">rx</td><td align="center">-</td><td align="center">能够进入/dir1且能执行file1</td></tr><tr><td align="center">删除file1文件</td><td align="center">w</td><td align="center">-</td><td align="center">-</td><td align="center">能够进入/dir目录且能修改目录即可</td></tr><tr><td align="center">将file1复制到/dir2</td><td align="center">x</td><td align="center">r</td><td align="center">w</td><td align="center">能够读file1且能修改/dir2</td></tr></tbody></table><p>这里我们假设已经直到了目录里的file1文件，虽然不能通过ls命令了解文件夹内的文件，但是如果事先就知道文件的存在，仍然可以继续操作。</p><h5 id="Linux文件种类与扩展名"><a href="#Linux文件种类与扩展名" class="headerlink" title="Linux文件种类与扩展名"></a>Linux文件种类与扩展名</h5><p><strong><em>任何设备在Linux下都是文件</em></strong></p><p>不仅是设备，数据沟通的接口也有专门的文件</p><h6 id="文件种类"><a href="#文件种类" class="headerlink" title="文件种类"></a>文件种类</h6><ul><li>常规文件（regular file）[-]<ul><li>纯文本文件（ASCII）cat</li><li>二进制文件（binary）</li><li>数据文件（data）last</li></ul></li><li>目录[d]</li><li>链接文件[l]（类似于快捷方式）</li><li>设备与设备文件（通常储存在<code>/dev</code>下）<ul><li>区块(block)设备文件[b]</li><li>字符(character)设备文件[c]</li></ul></li><li>数据接口(sockets)文件[s]</li><li>数据传送(FIFO,pipe)文件[p]</li></ul><h6 id="Linux文件扩展名"><a href="#Linux文件扩展名" class="headerlink" title="Linux文件扩展名"></a>Linux文件扩展名</h6><p><strong><em>Linux文件能否执行只与[x]属性有关，和文件扩展名毫无关系。</em></strong><br>但是<em>具有可执行的权限</em>和<em>具有可执行的程序</em>是两码事，例如我们用<code>chmod</code>给文件<code>test.txt</code>加上[x]权限，但是文件显然还是不可执行的。因为文件的内容里并没有可执行的部分。</p><p>虽然如此但是我们任然希望凭借文件扩展名来了解文件的种类：</p><ul><li>*.sh:脚本或批处理文件（scripts）用<code>shell</code>写成</li><li>*.Z,*.tar.gz,*.tar,*.zip:经过打包的压缩文件</li><li>*.html:网页文件</li></ul><p>可以这样说，Linux下的文件扩展名的意义只是让你或者编辑器知道文件的类型，即时去掉文件扩展名，文件依然可以正常执行。</p><p>Linux文件名长度通常 限制在256个字符之内，且由于Linux命令行操作的特性，最好不要带有特殊字符。</p><h4 id="Linux目录配置"><a href="#Linux目录配置" class="headerlink" title="Linux目录配置"></a>Linux目录配置</h4><h5 id="Linux目录配置的依据——FHS"><a href="#Linux目录配置的依据——FHS" class="headerlink" title="Linux目录配置的依据——FHS"></a>Linux目录配置的依据——FHS</h5><p>FHS（Filesystem Hierarchy Standard）统一了Linux的各发行版之间的的目录配置方法，和HTML的标准一样，这是一个不断进化的标准。</p><p>FHS将文件<strong><em>系统使用的频繁与否</em></strong>及<strong><em>是否允许用户随意修改</em></strong>将目录定义为四中交互作用的形态。</p><table><thead><tr><th align="center"></th><th align="center">可分享()</th><th align="center">不可分享()</th></tr></thead><tbody><tr><td align="center">不变(static)</td><td align="center">/usr(软件存放处)</td><td align="center">/etc(配置文件)</td></tr><tr><td align="center"></td><td align="center">/opt(第三方辅助软件)</td><td align="center">/boot(启动与相关内核)</td></tr><tr><td align="center">可变动(variable)</td><td align="center">/var/mail(用户邮箱)</td><td align="center">/var/run(程序相关)</td></tr><tr><td align="center"></td><td align="center">/var/spool/news(新闻组)</td><td align="center">/var/lock(程序相关)</td></tr><tr><td align="center">（表中目录仅为参考，不代表全部）</td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>可分享：可以分享给其他系统挂载的目录</li><li>不可分享：设备文件或与程序有关的socket文件等，仅与自身机器有关</li><li>不变：有些数据是不会经常变动的，例如函数库，文件说明，系统管理员的主机配置文件</li><li>可变动：经常修改的数据，如日志文件等</li></ul><p>FHS针对目录树架构定义出三层目录下面应该放置什么数据</p><ul><li>/ （root，根目录）：与启动系统有关；</li><li>/usr（unix software resource）：与软件安装/执行有关；</li><li>/var （variable）：与系统运行过程有关；</li></ul><h5 id="根目录（-）的意义与内容"><a href="#根目录（-）的意义与内容" class="headerlink" title="根目录（/）的意义与内容"></a>根目录（/）的意义与内容</h5><p>所有的目录都是由根目录衍生而来，根目录同时还与系统的启动，还原，恢复等操作有关。FHS要求，根目录不要放在非常大的分区内，分区越大，存放的数据越多越容易出现问题。</p><p>FHS建议：<strong><em>根目录(/)所在分区越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好，这样不但性能较佳，也不容易出现问题</em></strong></p><p>FHS建议根目录下应该有如下的子目录，即使不存在物理目录，也最好要有连接目录：</p><h6 id="第一部分：FHS要求必须要存在的目录"><a href="#第一部分：FHS要求必须要存在的目录" class="headerlink" title="第一部分：FHS要求必须要存在的目录"></a>第一部分：FHS要求必须要存在的目录</h6><table><thead><tr><th align="center">目录</th><th align="center">应放置的文件内容</th></tr></thead><tbody><tr><td align="center">/bin</td><td align="center">放置的是<strong><em>在单人维护模式下还能够被使用的命令</em></strong>，在/bin下的命令可以被root和一般账户所使用，主要有cat，chmod，chown，date，mv，mkdir，cp，bash等常用命令</td></tr><tr><td align="center">/boot</td><td align="center">放置系统启动所用到的文件，包括Linux内核文件和启动配置文件，Linux内核常用文件名为vmlinuz</td></tr><tr><td align="center">/dev</td><td align="center"><em>任何*接口与设备文件都存放于这个目录当中。读写这个目录下的文件就相当于在读写某个设备，如/dev/null，/dev/zero,/dev/tty,/dev/loop\</em>,/dev/*sd</td></tr><tr><td align="center">/etc</td><td align="center">主要的配置文件都存放在这里，账号密码文件，这个目录下的玩家只有root有权利修改，FHS建议<strong><em>不要在/etc下放置可执行文件（binary）</em></strong>，另外FHS还规范几个重要的目录：（1）/etc/opt（必要）：第三方辅助软件的配置文件（2）/etc/sgml（建议）：SGML格式有关的配置文件 （3）/etc/xml（建议）：与xml格式的配置文件</td></tr><tr><td align="center">/lib</td><td align="center">放置的是启动时会用到的函数库，以及在/bin和/sbin下命令会调用的函数库，FHS要求必须存在/lib/modules：主要放置可抽换式的内核相关模块（驱动程序）</td></tr><tr><td align="center">/media</td><td align="center">放置的是<strong><em>可删除的设备</em></strong>，例如软盘，光盘</td></tr><tr><td align="center">/mnt</td><td align="center">暂时挂载设备时可以使用这个目录</td></tr><tr><td align="center">/opt</td><td align="center">给第三方辅助软件放置的目录</td></tr><tr><td align="center">/run</td><td align="center">系统启动后产生的各项信息，可以使用内存来模拟，所以性能会好很多</td></tr><tr><td align="center">/sbin</td><td align="center">放在/sbin下面的为启动过程中所需要的，包括了启动，修复，还原系统所需的命令</td></tr><tr><td align="center">/srv</td><td align="center">service的缩写，是网络服务启动之后，所需要的数据目录</td></tr><tr><td align="center">/tmp</td><td align="center">在启动时，此目录下的内容都清空，正在执行的程序放置文件的地方</td></tr><tr><td align="center">/usr</td><td align="center">第二层FHS设置</td></tr><tr><td align="center">/var</td><td align="center">第二层FHS设置，主要放置编变动性的数据</td></tr></tbody></table><h6 id="第二部分：FHS建议可以存在的目录"><a href="#第二部分：FHS建议可以存在的目录" class="headerlink" title="第二部分：FHS建议可以存在的目录"></a>第二部分：FHS建议可以存在的目录</h6><table><thead><tr><th align="center">目录</th><th align="center">应放置的文件内容</th></tr></thead><tbody><tr><td align="center">/home</td><td align="center">系统默认的用户家目录,新增账号时默认的家目录都会规范到这里来</td></tr><tr><td align="center">/lib&lt;qual</td><td align="center">用来存放与/lib不同格式的二进制函数库</td></tr><tr><td align="center">/root</td><td align="center">系统管理员的家目录</td></tr></tbody></table><p>以上就是FJS对根目录的所有定义标准了,Linux下还有许多很重要的目录:</p><table><thead><tr><th align="center">目录</th><th align="center">应放置的文件内容</th></tr></thead><tbody><tr><td align="center">/lost+found</td><td align="center">ext2,3,4文件系统格式下产生的目录,当系统发生错误时,将遗失的片段放入</td></tr><tr><td align="center">/proc</td><td align="center">虚拟文件系统(virtual filesystem),数据都在内存当中,如系统内核,进程信息,设备状态,网络状态等本身不占有任何硬盘空间</td></tr><tr><td align="center">/sys</td><td align="center">也是一个虚拟文件系统,记录内核与系统文件相关的内容</td></tr></tbody></table><h5 id="usr的意义与内容"><a href="#usr的意义与内容" class="headerlink" title="/usr的意义与内容"></a>/usr的意义与内容</h5><p>tips:<a href="http://jandan.net/2018/11/08/bug-feature.html" target="_blank" rel="noopener">你知道/usr目录起初是怎么来的吗？:-)</a><br>/usr的数据属于不可变动与可分享,UNIX操作系统资源,一般来说/usr的子目录建议有这些:</p><h6 id="FHS要求必须存在的部分"><a href="#FHS要求必须存在的部分" class="headerlink" title="FHS要求必须存在的部分"></a>FHS要求必须存在的部分</h6><table><thead><tr><th align="center">目录</th><th align="center">应放置的文件内容</th></tr></thead><tbody><tr><td align="center">/usr/bin/</td><td align="center">所有一般用户能够使用的命令都放置于此,和/bin是一抹一样的,FHS要求此目录下不应该有子目录</td></tr><tr><td align="center">/usr/lib/</td><td align="center">基本与/lib功能一样</td></tr><tr><td align="center">/usr/local/</td><td align="center">系统管理员安装自己下载(非发行版默认提供)软件的目录</td></tr><tr><td align="center">/usr/sbin/</td><td align="center">非系统正常运行所需要的命令,如服务命令,基本与/sbin功能相同</td></tr><tr><td align="center">/usr/share/</td><td align="center">放置只读的数据文件,放置的文件几乎都是不分硬件架构都可以读取的文件</td></tr></tbody></table><h6 id="FHS建议存在的目录"><a href="#FHS建议存在的目录" class="headerlink" title="FHS建议存在的目录"></a>FHS建议存在的目录</h6><table><thead><tr><th align="center">目录</th><th align="center">应放置的文件内容</th></tr></thead><tbody><tr><td align="center">/usr/games/</td><td align="center">与游戏相关的文件</td></tr><tr><td align="center">/usr/local/</td><td align="center">c/c++语言的头文件(header_与包含文件(include)的放置处</td></tr><tr><td align="center">/usr/libexec/</td><td align="center">某些不被一般用户常用的执行文件或脚本</td></tr><tr><td align="center">/usr/lib &lt;qual/</td><td align="center">与/lib &lt;qual功能相同</td></tr><tr><td align="center">/usr/src/</td><td align="center">一般源代码应该放置于此,内核源代码放置在/usr/src/Linux下</td></tr></tbody></table><h5 id="var的意义与内容"><a href="#var的意义与内容" class="headerlink" title="/var的意义与内容"></a>/var的意义与内容</h5><p>不同于/usr在一开始就占用了大量硬盘空间,/var目录是系统运行后渐渐增长的。/var针对经常变动的文件，包括缓存（cache），日志文件（log file），以及软件运行的过程中产生的文件。</p><p>####### FHS要求必须存在的目录</p><table><thead><tr><th align="center">目录</th><th align="center">应放置的文件内容</th></tr></thead><tbody><tr><td align="center">/var/cache/</td><td align="center">应用程序本身运行会产生的一些缓存</td></tr><tr><td align="center">/var/lib/</td><td align="center">程序本身运行的过程中需要用到的数据文件</td></tr><tr><td align="center">/var/lock/</td><td align="center">某些设备同一时间段只能被一个人使用，所以在设备正使用时，需要对设备上锁</td></tr><tr><td align="center">/var/log/</td><td align="center">非常重要是日志文件的放置处</td></tr><tr><td align="center">/var/mail/</td><td align="center">放置个人邮件，与</td></tr><tr><td align="center">/var/run/</td><td align="center">某些程序启动后，会将他们的PID放置于此</td></tr><tr><td align="center">/var/spool/</td><td align="center">放置队列数据，队列就是排队等待其他程序使用的数据</td></tr></tbody></table><p>再次注意，FHS的标准是不断变化的，现在的文件目录也并不会一成不变。</p><h5 id="目录树（directory-tree）"><a href="#目录树（directory-tree）" class="headerlink" title="目录树（directory tree）"></a>目录树（directory tree）</h5><p>回忆一下，我们说过，Linux下所有文件和目录都是由根目录衍生而来，类似于树的数据结构，根目录就是根节点，我们称这种目录配置方式为目录树（directory tree）。</p><p>目录树的特性有：</p><ul><li>目录树的启始点为根目录（/,root）；</li><li>每一个目录不仅能使用本地分区的文件系统，也可以使用网络上的文件系统，例如通过Network File System（NFS）服务器挂载特定的目录</li><li>每一个文件在目录树中的文件名（完整路径）都是unique的</li></ul><h5 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h5><p>绝对路径(absoulte)：从根目录开始写起的路径</p><p>相对路径(relative)：相对与当期路径的文件名写法</p><ul><li>. :代表当前的目录，也可以使用 ./ 来表示</li><li>.. :代表上一层目录，也可以 ../ 来代表</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">uname</span> -r    //查看内核版本$ <span class="token function">uname</span> -m // 查看OS架构$ lsb_release -r //lsb标准</code></pre><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>绝对路径:『一定由根目录 / 写起』;相对路径:『不由 / 写起,而是由相对当前目录写起』</li><li>特殊目录有:., .., -, ~, ~account 需要注意;</li><li>与目录相关的指令有:cd, mkdir, rmdir, pwd 等重要指令;</li><li>rmdir 仅能删除空目录,要删除非空目录需使用『 rm -r 』指令;</li><li>用户能使用的指令是依据 PATH 变量所规定的目录去搜寻的;</li><li>ls 可以检视文件的属性,尤其 -d, -a, -l 等选项特别重要!</li><li>文件的复制、删除、移动可以分别使用:cp, rm , mv 等指令来操作;</li><li>检查文件的内容(读文件)可使用的指令包括有:cat, tac, nl, more, less, head, tail, od 等</li><li>cat -n 与 nl 均可显示行号,但默认的情况下,空白行会不会编号并不相同;</li><li>touch 的目的在修改文件的时间参数,但亦可用来建立空文件;</li><li>一个文件记录的时间参数有三种,分别是 access time(atime), status time (ctime), modification time(mtime),ls默认显示的是 mtime。</li><li>除了传统的 rwx 权限之外,在 Ext2/Ext3/Ext4/xfs 文件系统中,还可以使用 chattr 与 lsattr 设定及观察隐藏属性。 常见的包括只能新增数据</li><li>新建文件/目录时,新文件的预设权限使用 umask 来规范。默认目录完全权限为 drwxrwxrwx, 文件则为-rw-rw-rw-。</li><li>文件具有 SUID 的特殊权限时,代表当用户执行此一 binary 程序时,在执行过程中用户会暂时具有程序拥有者的权限</li><li>目录具有 SGID 的特殊权限时,代表用户在这个目录底下新建的文件之群组都会与该目录的组名相同。</li><li>目录具有 SBIT 的特殊权限时,代表在该目录下用户建立的文件只有自己与 root 能够删除!</li><li>观察文件的类型可以使用 file 指令来观察;</li><li>搜寻指令的完整文件名可用 which 或 type ,这两个指令都是透过 PATH 变量来搜寻文件名;</li><li>搜寻文件的完整档名可以使用 whereis 找特定目录或 locate 到数据库去搜寻,而不实际搜寻文件系统;</li><li>利用 find 可以加入许多选项来直接查询文件系统,以获得自己想要知道的档名。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 文件权限与目录配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh连接报错WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
      <link href="/2019/03/20/ssh-lian-jie-bao-cuo-warning-remote-host-identification-has-changed/"/>
      <url>/2019/03/20/ssh-lian-jie-bao-cuo-warning-remote-host-identification-has-changed/</url>
      
        <content type="html"><![CDATA[<p>今天在服务器被banl，在用ssh连接新deploy的服务器时,遇到点小问题。终端显示：</p><pre class=" language-bash"><code class="language-bash">jason@jason-ThinkPad-X1-Carbon-6th:~$ <span class="token function">ssh</span> root@149.28.88.126@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span>Someone could be eavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span>It is also possible that a host key has just been changed.The fingerprint <span class="token keyword">for</span> the RSA key sent by the remote host isSHA256: 你的sha秘钥Please contact your system administrator.Add correct host key <span class="token keyword">in</span> /home/jason/.ssh/known_hosts to get rid of this message.Offending RSA key <span class="token keyword">in</span> /home/jason/.ssh/known_hosts:7  remove with:  ssh-keygen -f <span class="token string">"/home/jason/.ssh/known_hosts"</span> -R <span class="token string">"你的IP地址"</span>RSA host key <span class="token keyword">for</span> 你的IP地址 has changed and you have requested strict checking.Host key verification failed.</code></pre><p>因为我们第一次进行SSH连接时，会自动生成生成一个认证，并且储存在客户端中的known_hosts，如果服务器验证过了，本地储存的认证也会更改，服务器端与客户端不同时，就会显示这个错误。因此，只要把本地储存的认证资讯删掉，连线时重新生成，就可以解决这个错误了，在终端输入：</p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -R +服务器的IP</code></pre><p>然后通过：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> root@yourIPaddress</code></pre><p>就可以再次连接服务器了。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps服务器使用v2ray科学上网</title>
      <link href="/2019/03/20/vps-fu-wu-qi-shi-yong-v2ray-ke-xue-shang-wang/"/>
      <url>/2019/03/20/vps-fu-wu-qi-shi-yong-v2ray-ke-xue-shang-wang/</url>
      
        <content type="html"><![CDATA[<p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊，服务器又被Great Wall识别了怎么办！吐血的我准备尝试一下v2ray来科学上网，因为ss，ssr等工具已经长期不再更新，所以掌握一个社区活跃的工具也是很有必要的啊。</p><h3 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h3><p>这次我们使用<code>Debian 9</code>发行版，如果你还不知道如何选购服务器并设置，可以参考这篇文章<a href="http://jinzhnegxu.online/2019/03/14/Ubuntu18-04%E4%B8%8B%E9%80%9A%E8%BF%87Vultr%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BAvps%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/" target="_blank" rel="noopener">Ubuntu18.04下通过Vultr服务搭建vps科学上网</a>。</p><h3 id="Debian9-开启-BBR"><a href="#Debian9-开启-BBR" class="headerlink" title="Debian9 开启 BBR"></a>Debian9 开启 BBR</h3><p>BBR 是 Google 开源的一个 TCP 拥塞控制算法项目，可以充分发挥服务器的带宽。在有一定丢包率的网络链路上充分利用带宽。降低网络链路上的 buffer 占用率，从而降低延迟。开与不开 BBR，搭建 SSR 和 V2Ray 等代理工具时，最高可以相差近 10 倍！目前该 BBR 算法已经并提交到了 Linux 内核，从 Linux 4.9 开始已经默认安装编译了该算法.</p><p>所以采用 Linux 4.9 内核的Debian9系统不用再安装可以通过几行命令开启BBR加速了，爽到。<br>打开终端输入：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> root@yourIPaddress</code></pre><p>连接至vps服务器，如果显示<code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>，可以参考这篇文章<a href="http://jinzhnegxu.online/2019/03/20/ssh%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED/" target="_blank" rel="noopener">ssh连接报错WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</a>。</p><p>连接成功之后我们使用<code>root</code>账户来改变系统环境变量：</p><pre class=" language-bash"><code class="language-bash">root@Jason:~<span class="token comment" spellcheck="true"># echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf</span>root@Jason:~<span class="token comment" spellcheck="true"># echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf</span></code></pre><p>然后执行如下命令保存上一步的修改并生效</p><pre class=" language-bash"><code class="language-bash">root@Jason:~<span class="token comment" spellcheck="true"># sysctl -p</span></code></pre><p>接着</p><pre class=" language-bash"><code class="language-bash">root@Jason:~<span class="token comment" spellcheck="true"># sysctl net.ipv4.tcp_available_congestion_control</span></code></pre><p>如果终端输出</p><pre><code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code></pre><p>则表名开启成功，输入：</p><pre class=" language-bash"><code class="language-bash">root@Jason:~<span class="token comment" spellcheck="true"># lsmod | grep bbr</span></code></pre><p>会出现<code>tcp_bbr +数字</code> 这样BBR就开启成功了。</p><h3 id="搭建-V2Ray"><a href="#搭建-V2Ray" class="headerlink" title="搭建 V2Ray"></a>搭建 V2Ray</h3><p>打开终端输入</p><pre class=" language-bash"><code class="language-bash">root@Jason:~<span class="token comment" spellcheck="true"># bash &lt;(curl -L -s https://install.direct/go.sh)</span></code></pre><p>显示<code>V2Ray v4.18.0 is installed.</code>则表示安装成功。同时记下你的端口号<code>PORT</code>和<code>UUID</code>，这些信息会以蓝色高亮显示。<br>然后启动v2ray：</p><pre class=" language-bash"><code class="language-bash">root@Jason:~<span class="token comment" spellcheck="true"># sudo systemctl start v2ray</span></code></pre><p>如果出现命令没有找到的情况先<code>apt-get install sudo</code>安装<code>sudo</code>后，再执行这条命令。</p><p>v2ray常用命令：</p><pre class=" language-bash"><code class="language-bash">//启动 V2Ray:systemctl start v2ray//停止运行 V2Ray：systemctl stop v2ray//重启 V2Ray:systemctl restart v2ray</code></pre><p>更换传输协议、端口和 UUID，可以使用[Xftp]打开服务器目录<code>/etc/v2ray/</code>中的<code>config.json</code>文件。修改保存后，请执行<code>systemctl restart v2ray</code>重启 V2Ray 生效。<br>运行 <code>v2ray --config=/etc/v2ray/config.json</code>也可，或使用 systemd 等工具把 V2Ray 作为服务在后台运行。</p><h3 id="安装v2ray客户端"><a href="#安装v2ray客户端" class="headerlink" title="安装v2ray客户端"></a>安装v2ray客户端</h3><p><a href="http://briteming.hatenablog.com/entry/2017/10/21/124645" target="_blank" rel="noopener">第三方客户端合集</a></p><h4 id="Linux安装方法"><a href="#Linux安装方法" class="headerlink" title="Linux安装方法"></a>Linux安装方法</h4><p>从<a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">github</a>获得适合自己pc的release。解压后将自己的<code>config.conf</code>文件移动到解压得到的文件夹里，并删除文件夹内的<code>vpoint_vmess_freedom.json</code>。然后在该文件目录下打开终端执行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> ./v2ray</code></pre><p>这样就可以了，然后通过<code>chorme</code>插件<code>SwitchOmega</code>来设置系统代理就可以了。</p><p>BBR比锐速好太多了吧！</p><h4 id="v2ray多用户配置"><a href="#v2ray多用户配置" class="headerlink" title="v2ray多用户配置"></a>v2ray多用户配置</h4><p>多用户只需要在服务端的config.json中修改inboundDetour即可，可以使用<a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">https://www.uuidgenerator.net/</a>来生成UUID，tcp配置例子如下：</p><pre class=" language-config"><code class="language-config">{  "inbound": {    ...  },  "inboundDetour":[    {      "port": 你的端口(不同于inbound),      "protocol": "vmess",      "settings": {        "clients": [          {            "id": "你的UUID(不同于inbound)",            "level": 1,            "alterId": 64          }        ]      },      "streamSettings":{        "network": "tcp"      }    }  ],  "outbound": {    ...  },  "outboundDetour": [    ...  ],  "routing": {    ...  }}</code></pre><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><p>1.<a href="https://www.zhihu.com/question/53559433" target="_blank" rel="noopener">Linux Kernel 4.9 中的 BBR 算法与之前的 TCP 拥塞控制相比有什么优势？</a></p><p>2.<a href="https://blog.csdn.net/dog250/article/details/54754784" target="_blank" rel="noopener">Linux Kernel 4.9中TCP BBR算法的科普解释</a></p><p>3.<a href="https://www.v2ray.com/" target="_blank" rel="noopener">ProjectV</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> v2ray </tag>
            
            <tag> debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(1)-基本概念与帮助</title>
      <link href="/2019/03/18/niao-ge-de-linux-si-fang-cai-1-ji-ben-gai-nian-yu-bang-zhu/"/>
      <url>/2019/03/18/niao-ge-de-linux-si-fang-cai-1-ji-ben-gai-nian-yu-bang-zhu/</url>
      
        <content type="html"><![CDATA[<h4 id="Linux命令基本形式"><a href="#Linux命令基本形式" class="headerlink" title="Linux命令基本形式"></a>Linux命令基本形式</h4><pre class=" language-bash"><code class="language-bash">jason@ThinkPad-X1-Carbon-6th:~$ <span class="token function">command</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> parameter1 parameter2                                命令    选项       参数1      参数2</code></pre><h4 id="语系支持locale"><a href="#语系支持locale" class="headerlink" title="语系支持locale"></a>语系支持locale</h4><pre class=" language-bash"><code class="language-bash">$ locale</code></pre><p>修改语系</p><pre class=" language-bash"><code class="language-bash">$ LANG<span class="token operator">=</span>en_US.utf8$ <span class="token function">export</span> LC_ALL<span class="token operator">=</span>en_US.utf8<span class="token comment" spellcheck="true"># LANG只与输出信息有关,若要更改其他不同的信息,要同步更新LC_ALL</span></code></pre><h4 id="基础命令的操作"><a href="#基础命令的操作" class="headerlink" title="基础命令的操作"></a>基础命令的操作</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">date</span>  //输出时间$ <span class="token function">cal</span>   //日历$ <span class="token function">bc</span>    //计算器</code></pre><p>命令行模式的两种主要情况:</p><ul><li>一种是该命令会直接显示结果,然后回到命令提示字符等待下一个命令的输入</li><li>一种是进入到该命令的环境,直到结束该命令才回到命令行界面的环境</li></ul><h4 id="热键"><a href="#热键" class="headerlink" title="热键"></a>热键</h4><h5 id="Tab"><a href="#Tab" class="headerlink" title="[Tab]"></a>[Tab]</h5><ul><li>[Tab][Tab]接在一串命令的第一个字段后面,则为[命令补全]</li><li>[Tab][Tab]接在一串命令的第二个字段后面,则为[文件补齐]</li><li>若安装了<code>Bash-completion</code>,则在某些命令后可以使用[选项/参数补齐]</li></ul><h5 id="Ctrl-c按键"><a href="#Ctrl-c按键" class="headerlink" title="[Ctrl]-c按键"></a>[Ctrl]-c按键</h5><p>将正运行的命令中断</p><h5 id="Ctrl-d按键"><a href="#Ctrl-d按键" class="headerlink" title="[Ctrl]-d按键"></a>[Ctrl]-d按键</h5><p>键盘输入结束(End Of File,EOF),可以取代<code>exit</code>的输入</p><h5 id="Shift-Page-Up-Page-Down-按键"><a href="#Shift-Page-Up-Page-Down-按键" class="headerlink" title="[Shift]+{[Page Up]|[Page Down]}按键"></a>[Shift]+{[Page Up]|[Page Down]}按键</h5><p>命令行翻页</p><h4 id="Linux帮助-man-page和info-page"><a href="#Linux帮助-man-page和info-page" class="headerlink" title="Linux帮助 man page和info page"></a>Linux帮助 <code>man page</code>和<code>info page</code></h4><h5 id="Linux-–help"><a href="#Linux-–help" class="headerlink" title="Linux –help"></a>Linux –help</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">command</span> --help</code></pre><h5 id="man"><a href="#man" class="headerlink" title="man"></a>man</h5><p>man是manual(操作说明)的简写,文件一般储存在目录<code>/usr/share/man</code>下可以通过修改配置文件<code>/etc/man_db.conf</code>(或<code>man.conf</code>,<code>manpath.conf</code>,<code>man.config</code>),更多信息可以通过<code>man man</code>来查询。</p><p>man文档数字意义：</p><table><thead><tr><th align="center">代号</th><th align="center">代表内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>* 用户在shell环境中可以操作的命令或可执行文档 *</strong></td></tr><tr><td align="center">2</td><td align="center">系统内核可调用的函数与工具等</td></tr><tr><td align="center">3</td><td align="center">一些常用的函数（function）与函数库（library），大部分为c函数库（libc）</td></tr><tr><td align="center">4</td><td align="center">设备文件的说明，通常在/dev下的文件</td></tr><tr><td align="center">5</td><td align="center"><strong>* 配置文件或是某些文件的格式*</strong></td></tr><tr><td align="center">6</td><td align="center">游戏</td></tr><tr><td align="center">7</td><td align="center">惯例与协议等，例如Linux文件系统，网络协议，ASCII代码等的说明</td></tr><tr><td align="center">8</td><td align="center"><strong><em>系统管理员可用的管理命令</em></strong></td></tr><tr><td align="center">9</td><td align="center">跟内核有关的文件</td></tr></tbody></table><p>man的常用按键：</p><table><thead><tr><th align="center">按键</th><th align="center">进行工作</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">向下翻一页</td></tr><tr><td align="center">[Page Down]</td><td align="center">向下翻一页</td></tr><tr><td align="center">[Page Up]</td><td align="center">向上翻一页</td></tr><tr><td align="center">[Home]</td><td align="center">去到第一页</td></tr><tr><td align="center">[End]</td><td align="center">去到最后一页</td></tr><tr><td align="center">/string</td><td align="center">向下查找String这个字符串</td></tr><tr><td align="center">?string</td><td align="center">向上查找String这个字符串</td></tr><tr><td align="center">n，N</td><td align="center">在用‘/’和‘?’，向上或向下查询</td></tr><tr><td align="center">q</td><td align="center">结束man page</td></tr></tbody></table><pre class=" language-bash"><code class="language-bash">$ <span class="token function">man</span> -f <span class="token function">man</span> //查找所有和man命令有关的文件$ <span class="token function">man</span> 1 <span class="token function">man</span> //man<span class="token punctuation">(</span>1<span class="token punctuation">)</span>的文件说明$ <span class="token function">man</span> 7 <span class="token function">man</span> //man<span class="token punctuation">(</span>7<span class="token punctuation">)</span>的文件说明$ <span class="token function">man</span> -k <span class="token function">man</span>  //系统的说明文件内容中只要有man关键词就列出</code></pre><p>man命令的简略写法:</p><pre><code>$ whatis [命令或是文件] //相当于man -f$ apropos [命令或是文件] //相当于man -k</code></pre><p>使用简略命令,必须先建立<code>whatis</code>数据库</p><pre class=" language-bash"><code class="language-bash">$ mandb</code></pre><h5 id="info-page"><a href="#info-page" class="headerlink" title="info page"></a>info page</h5><p>Linux才有的产物,易读性增强,但查询文件必须以info page 的格式写成,文档存放于<code>/usr/share/info</code>,以非info page格式写成的文件,也可以通过info显示,不过结果与man相同。</p><p>info page 是将文件数据拆成一个一个的段落，每个段落用自己的页面来编写，并且在各个页面中还有类似网页的超连接来跳到各不同的页面中，每个独立的页面也称为一个节点（node）。</p><p>快捷键：</p><table><thead><tr><th align="center">按键</th><th align="center">进行工作</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">向下翻一页</td></tr><tr><td align="center">[Page Down]</td><td align="center">向下翻一页</td></tr><tr><td align="center">[Page Up]</td><td align="center">向上翻一页</td></tr><tr><td align="center">[Tab]</td><td align="center">在节点之间移动，有节点的地方，通常会以*显示</td></tr><tr><td align="center">[Enter]</td><td align="center">当光标在节点上面时，按下Enter可以进入该节点</td></tr><tr><td align="center">b</td><td align="center">移动光标到该info界面当中的第一处</td></tr><tr><td align="center">e</td><td align="center">移动光标到该info界面当中的最后一个节点处</td></tr><tr><td align="center">n</td><td align="center">前往下一个节点处</td></tr><tr><td align="center">p</td><td align="center">前往上一个节点处</td></tr><tr><td align="center">u</td><td align="center">向上移动一层</td></tr><tr><td align="center">s（/）</td><td align="center">在info page当中进行查找</td></tr><tr><td align="center">h，？</td><td align="center">显示帮助选项</td></tr><tr><td align="center">q</td><td align="center">结束这次的info page</td></tr></tbody></table><h4 id="正确的关机方法"><a href="#正确的关机方法" class="headerlink" title="正确的关机方法"></a>正确的关机方法</h4><p> Windows（非NT内核）系统中，由于是单人假多任务，即使计算机关机，对于别人因为不会用影响。但是在Linux下，每个程序都在后台执行，可能会有多个人同时在一台主机上工作，而且如果不正常关机，可能会造成文件系统的损毁。所以正常情况下，关机要注意一下几件事：</p><ul><li><p>观察系统的使用状态，使用<code>who</code>命令查看有谁在线，<code>netstat -a</code>查看网络的连接状态，<code>ps -aux</code>查看后台执行的程序。</p></li><li><p>通知用户关机的时刻</p></li><li><p>正确的关机命令的使用</p><ul><li>将数据同步写入磁盘<code>sync</code></li><li>常用的关机命令<code>shutdown</code></li><li>重新启动，关机<code>reboot</code>，<code>halt</code>，<code>poweroff</code></li></ul><h6 id="shutdown命令的使用"><a href="#shutdown命令的使用" class="headerlink" title="shutdown命令的使用"></a>shutdown命令的使用</h6><p>```<br>$ /sbin/shutdown [-krhc] [时间] [警告信息]<br>选项与参数：</p></li></ul><p> -k ：不要真的关机，只是发送警告信息出去<br> -r ：在将系统的服务器停掉之后就重新启动<br> -h：将系统的服务停掉之后，立即关机<br> -c：取消已经在进行的shutdown命令的内容<br> 时间 ：指定系统关机的时间，若没有则默认以分钟后自动进行</p><pre><code></code></pre><p> $ halt //系统停止，屏幕可能会保留系统已经停止<br> $ poweroff //系统关机，切断电力供应<br> $ suspend //休眠模式</p><pre><code> 运用管理工具`systemctl`关机，现在虽然任然可以使用`init 0`来关机，但是已经根运行级别无关了。 ### 重点回顾+ Linux 的每个文件中,可分别给予使用者、群组与其他人三种身份个别的 rwx 权限;+ 群组最有用的功能之一,就是当你在团队开发资源的时候,且每个账号都可以有多个群组的支持;+ 利用 ls -l 显示的文件属性中,第一个字段是文件的权限,共有十个位,第一个位是文件类型, 接下来三个为一组共三组,为使用者、群组、其他人的权限,权限有 r,w,x 三种;+ 如果档名之前多一个『 . 』,则代表这个文件为『隐藏档』;+ 若需要 root 的权限时,可以使用 su - 这个指令来切换身份。处理完毕则使用 exit 离开 su 的指令环境。+ 更改文件的群组支持可用 chgrp,修改文件的拥有者可用 chown,修改文件的权限可用 chmod+ chmod 修改权限的方法有两种,分别是符号法与数字法,数字法中 r,w,x 分数为 4,2,1;+ 对文件来讲,权限的效能为:  + r:可读取此一文件的实际内容,如读取文本文件的文字内容等;  + w:可以编辑、新增或者是修改该文件的内容(但不含删除该文件);  + x:该文件具有可以被系统执行的权限。+对目录来说,权限的效能为:  + r (read contents in directory)  + w (modify contents of directory)  + x (access directory)+ 要开放目录给任何人浏览时,应该至少也要给予 r 及 x 的权限,但 w 权限不可随便给;+ 能否读取到某个文件内容,跟该文件所在的目录权限也有关系 (目录至少需要有 x 的权限)。+ Linux 档名的限制为:单一文件或目录的最大容许文件名为 255 个英文字符或 128 个汉字字符;+ 根据 FHS 的官方文件指出, 他们的主要目的是希望让使用者可以了解到已安装软件通常放置于那个目录下+ FHS 订定出来的四种目录特色为:shareable, unshareable, static, variable 等四类;+ FHS 所定义的三层主目录为:/, /var, /usr 三层而已;+ 绝对路径文件名为从根目录 / 开始写起,否则都是相对路径的文件名。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04下通过Vultr服务搭建vps科学上网</title>
      <link href="/2019/03/14/ubuntu18-04-xia-tong-guo-vultr-fu-wu-da-jian-vps-ke-xue-shang-wang/"/>
      <url>/2019/03/14/ubuntu18-04-xia-tong-guo-vultr-fu-wu-da-jian-vps-ke-xue-shang-wang/</url>
      
        <content type="html"><![CDATA[<ul><li>购买vps服务器</li><li>通过ssh连接服务器</li><li>安装科学上网软件</li><li>连接vps科学上网</li></ul><h4 id="1-购买vps服务器"><a href="#1-购买vps服务器" class="headerlink" title="1.购买vps服务器"></a>1.购买vps服务器</h4><p>Vultr（<a href="https://www.vultr.com/?ref=7958083" target="_blank" rel="noopener">www.vultr.com</a> )是一家云基础架构提供商，面向软件开发人员提供虚拟专用服务器（VPS），具有许多性价比很高的服务器，按时计费。目前（2019年3月14日）最低价格为$5.00/月($0.007/小时)。而且最近退出一个新用户首冲10美元送50美元额度的活动<a href="https://www.vultr.com/?ref=7958085-4F" target="_blank" rel="noopener">新用户50美元</a>，性价比可以说非常之高了，谁叫老用户是狗呢。</p><p>首先在vultr中<code>create account</code>创建一个账户，通过邮箱验证。点击侧边栏的billing就可以充值了。购买服务器需要最低充值10美金，使用支付宝付款，服务器按小时计费。充值流程：【Billing】-【Alipay】-【Pay with Alipay】-【完成支付】</p><p>然后选择左侧<code>Servers</code>，点击右侧圆圈状的+号进行添加服务器。这里的服务器地址<code>Server Location</code>建议选择美国地区的服务器，因为日本和新加坡地区的服务器22端口封的较多，搭建成功率较低，如下图：<br><img src="https://s2.ax1x.com/2019/03/14/AABXWj.png" alt="AABXWj.png"><br>服务器类型<code>Server Type</code>选择Centos 6 x64，套餐选择看自己的经济水平吧，像我就是5美元足矣，如下图:<br><img src="https://s2.ax1x.com/2019/03/14/AABxln.png" alt="AABxln.png"><br>附加功能<code>Additional Features</code>选择<code>Enable IPv6</code>必选，其他的付费选项看自己经济水平，免费的看需要，如下图:<br><img src="https://s2.ax1x.com/2019/03/14/AABvSs.png" alt="AABvSs.png"><br>服务器名和标签<code>Server Hostname &amp; Label</code>随意填写即可。另外其他的选项不用配置。最后点击Deploy Now即可。</p><h4 id="2-通过ssh连接服务器"><a href="#2-通过ssh连接服务器" class="headerlink" title="2.通过ssh连接服务器"></a>2.通过ssh连接服务器</h4><p>回到左侧的<code>Servers</code>，会看到新增了一个服务器，这时的服务器状态为<code>Installing</code>，如下图：<br><img src="https://s2.ax1x.com/2019/03/14/AAs8sI.png" alt="AAs8sI.png"><br>等待几分钟后即可变为<code>Running</code>，点击<code>Test</code>后，可以看到与服务器相关的信息。包括带宽、CPU使用率等。然后在左下方会有IP地址IP Address、用户名Username、密码Password，这是我们接下来要用到的，如下图：<br><img src="https://s2.ax1x.com/2019/03/14/AAsGLt.png" alt="AAsGLt.png"><br>在通过<code>ssh</code>连接服务器之前之前我们可以ping一下IP地址</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> yourIPaddress</code></pre><p>查看访问速度如何。（如果延迟过大，可以将服务器删除，重新选择不同的服务器地址再新建一个）终端输出：</p><pre><code>PING  yourIPaddress(yourIPaddress) 56(84) bytes of data.64 bytes from yourIPaddress: icmp_seq=1 ttl=42 time=298 ms64 bytes from yourIPaddress: icmp_seq=2 ttl=39 time=257 ms64 bytes from yourIPaddress: icmp_seq=3 ttl=39 time=255 ms64 bytes from yourIPaddress: icmp_seq=4 ttl=42 time=280 ms64 bytes from yourIPaddress: icmp_seq=5 ttl=39 time=272 ms</code></pre><p>可以看到，延迟基本上在200ms左右，可以换个更快的。</p><p>接下来打开终端，输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> root@yourIPaddress</code></pre><p>然后输入密码，一路yes，就可以连接到服务器了，windows系统可以通过<code>Xshell</code>来进行ssh连接。终端输出</p><pre><code>ssh root@yourIPaddressThe authenticity of host &#39;yourIPaddress (yourIPaddress)&#39; can&#39;t be established.RSA key fingerprint is SHA256:dB3/Hw31dtrjl3tJDBQNmd6ADYBC3UdNYYpqp3sqHeg.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &#39;yourIPaddress&#39; (RSA) to the list of known hosts.root@yourIPaddress&#39;s password: [root@Jason ~]# </code></pre><h4 id="安装科学上网软件"><a href="#安装科学上网软件" class="headerlink" title="安装科学上网软件"></a>安装科学上网软件</h4><p>ssh登录服务器成功之后，依次输入以下三条命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh<span class="token function">chmod</span> +x shadowsocks-all.sh./shadowsocks-all.sh 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">|</span> <span class="token function">tee</span> shadowsocks-all.log</code></pre><p>然后系统会出现相关配置界面，如下图：<br><img src="https://s2.ax1x.com/2019/03/14/AA5FrF.png" alt="AA5FrF.png"><br>选择2继续安装，随便输入一个密码（记不住可以自己看配置文件，但最好记住）：<br><a href="https://imgchr.com/i/AA5EVJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/14/AA5EVJ.png" alt="AA5EVJ.png"></a><br>选择加密方式和协议等直接回车使用默认配置也可以（但是你都要记住一会连接时需要用到）：<br><img src="https://s2.ax1x.com/2019/03/14/AA5mP1.png" alt="AA5mP1.png"><br>然后等待安装完成，会给出配置详细的参数，和一键导入的连接和二维码。</p><pre class=" language-bash"><code class="language-bash">2019-03-14 11:18:52 INFO     util.py:94 loading libcrypto from libcrypto.so.102019-03-14 11:18:52 INFO     shell.py:74 ShadowsocksR SSRR 3.2.2 2018-05-22IPv6 supportStarting ShadowsocksR successCongratulations, ShadowsocksR server <span class="token function">install</span> completed<span class="token operator">!</span>Your Server IP        <span class="token keyword">:</span>  xxxxxxxxxxx Your Server Port      <span class="token keyword">:</span>  xxxxxxYour Password         <span class="token keyword">:</span>  xxxxxxxxxx Your Protocol         <span class="token keyword">:</span>  origin Your obfs             <span class="token keyword">:</span>  plain Your Encryption Method:  aes-256-cfb Your QR Code: <span class="token punctuation">(</span>For ShadowsocksR Windows, Android clients only<span class="token punctuation">)</span> ssr://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Your QR Code has been saved as a PNG <span class="token function">file</span> path: /root/shadowsocks_r_qr.png Welcome to visit: https://teddysun.com/486.htmlEnjoy it<span class="token operator">!</span></code></pre><h6 id="ssr常用命令"><a href="#ssr常用命令" class="headerlink" title="ssr常用命令"></a>ssr常用命令</h6><pre><code>启动SSR：/etc/init.d/shadowsocks-r start退出SSR：/etc/init.d/shadowsocks-r stop重启SSR：/etc/init.d/shadowsocks-r restartSSR状态：/etc/init.d/shadowsocks-r status卸载SSR：./shadowsocks-all.sh uninstall配置文件路径：vi /etc/shadowsocks-r/config.json日志文件路径：/var/log/shadowsocksr.log代码安装目录：/usr/local/shadowsocks</code></pre><p>其实到这里VPS已经搭建好可以使用了，不过为了加快网页的访问速度，我们还可以安装BBR加速。</p><h6 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h6><p>继续在服务器里输入</p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/wn789/serverspeeder/master/serverspeeder.shchmod +x serverspeeder.shbash serverspeeder.sh</code></pre><p>如果终端显示</p><pre><code>This kernel is not supported. Trying fuzzy matching…Serverspeeder is not supported on this kernel! View all supported systems and kernels here: https://www.91yun.org/serverspeeder91yun</code></pre><p>需要手动修改内核，或者重新安装系统， 由于我的系统内核不支持，所以要手动修改。</p><pre><code>uname -r</code></pre><p>查看内核，锐速支持的 CentOS6 内核版本为 2.6.32-504.3.3.el6.x86_64，下面就要开始修改内核了，准备好内核文件执行安装：</p><pre><code>rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpmrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</code></pre><p>可能要等个几分钟，全部完成之后查看是否安装成功：</p><pre><code>rpm -qa | grep kernel</code></pre><p>执行 pm -qa | grep kernel 命令之后可以看到锐速支持的 kernel-2.6.32-504.3.3.el6.x86_64 内核已经安装完成。最后一步，确认内核已经被替换。<br>重启 VPS，然后查看当前的系统内核</p><pre><code>[root@Jason ~]# uname -r2.6.32-504.3.3.el6.x86_64</code></pre><p>内核已经成功被替换成锐速支持的内核，可以继续第一步的安装工作了。直接输入</p><pre><code>bash serverspeeder.sh</code></pre><h6 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h6><pre><code>wget --no-check-certificate -qO &#39;BBR.sh&#39; &#39;https://moeclub.org/attachment/LinuxShell/BBR.sh&#39; &amp;&amp; chmod a+x BBR.sh &amp;&amp; bash BBR.sh -fwget --no-check-certificate -qO &#39;BBR_POWERED.sh&#39; &#39;https://moeclub.org/attachment/LinuxShell/BBR_POWERED.sh&#39; &amp;&amp; chmod a+x BBR_POWERED.sh &amp;&amp; bash BBR_POWERED.shlsmod |grep &#39;bbr_powered&#39;</code></pre><p>显示<code>bbr_powered</code>则成功安装。</p><h4 id="4-记录系统快照"><a href="#4-记录系统快照" class="headerlink" title="4.记录系统快照"></a>4.记录系统快照</h4><p>按完一遍系统也是比较麻烦的所以Vultr提供了系统快照功能，点击<code>server</code>，点击<code>Snapchats</code>，选择好要截取快照的系统，取名，点击<code>Take Snapchats</code>。<br><img src="https://s2.ax1x.com/2019/03/19/Aua9TP.png" alt="Aua9TP.png"><br>截取快照会需要一段时间，视服务器大小而定。<br><img src="https://s2.ax1x.com/2019/03/19/Auapwt.png" alt="Auapwt.png"><br>截取快照成功后，会显示如下的页面。<br><img src="https://s2.ax1x.com/2019/03/20/AuTuH1.png" alt="AuTuH1.png"><br>新建服务器使用快照时，在选择操作系统时，点击<code>Snapchats</code>，选择储存好的快照，这里需要注意的是，使用快照的服务器的配置必须要大于等于take系统快照的服务器。比如take快照的系统是$40美元的套餐，新系统必须是40美元及以上的套餐。<br><img src="https://s2.ax1x.com/2019/03/20/AuTQN6.png" alt="AuTQN6.png"><br>使用快照的系统由于不是最小化安装，会需要较长一段时间来安装系统。这里需要注意的一点是，如果你的vps服务器被GFW给ban掉的话，不要使用快照恢复系统，这样会使新的服务器继续被ban。</p><h4 id="5-连接vps科学上网"><a href="#5-连接vps科学上网" class="headerlink" title="5.连接vps科学上网"></a>5.连接vps科学上网</h4><p>然后就可以通过各个平台的工具连接vps科学上网了（工具在文末给出），打开油管(<a href="www.youtube.com">www.youtube.com</a> )挑个4k视频试试吧。<br><img src="https://s2.ax1x.com/2019/03/14/AATaxx.png" alt="AATaxx.png"></p><h4 id="6-平台工具合集"><a href="#6-平台工具合集" class="headerlink" title="6.平台工具合集"></a>6.平台工具合集</h4><p>MAC版下载地址：<a href="https://github.com/gaoshilei/ShadowsocksX-NG/releases/download/1.4.3-R8-build3/ShadowsocksX-NG-R8.dmg" target="_blank" rel="noopener">ShadowsocksX-NG-R8.dmg</a></p><p>Android：<a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk" target="_blank" rel="noopener">ssr</a></p><p>Linux：自己sudo apt-get吧</p><p>windows：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip</a></p><p>或者在<a href="https://ssr.tools/175" target="_blank" rel="noopener">这里</a>下载</p><h4 id="7-使用v2ray科学上网"><a href="#7-使用v2ray科学上网" class="headerlink" title="7.使用v2ray科学上网"></a>7.<a href="http://localhost:4000/2019/03/20/vps-fu-wu-qi-shi-yong-v2ray-ke-xue-shang-wang/" target="_blank" rel="noopener">使用v2ray科学上网</a></h4>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代编译原理-C语言描述》（2）- 词法分析</title>
      <link href="/2019/03/14/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-2/"/>
      <url>/2019/03/14/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>词法的(lex-i-cal): 与语言的单词或词汇有关。但有别于语言的文法和结构。            —-韦氏词典</p></blockquote><h3 id="第二章-词法分析"><a href="#第二章-词法分析" class="headerlink" title="第二章 词法分析"></a>第二章 词法分析</h3><p>编译器前段执行分析，后端执行合成。<br>分析一般分为三种：</p><pre><code>词法分析：将输入分解成一个个独立的词法符号，即单词符号‘tocken’，简称单词语法分析：分析程序的短语结构语义分析：推算程序的含义</code></pre><h4 id="2-1词法单词"><a href="#2-1词法单词" class="headerlink" title="2.1词法单词"></a>2.1词法单词</h4><p>典型的程序设计语言的一些单词有：<code>ID</code>，<code>NUM</code>，<code>REAL</code>，<code>IF</code>，<code>COMMA</code>，<code>NOTEQ</code>，<code>LPAREN</code>，<code>RPAREN</code>等。<br>非单词的例子是：</p><pre><code>注释                    /* try again */预处理命令              #include&lt;stdio.h&gt;预处理命令              #define NUMS 5,6宏                      NUMS空格符，换行符和制表符</code></pre><p>一些能力较弱而需要宏处理器的语言中，由预处理器处理源程序的字符流，生成新字符流，然后词法分析器读入新字符流。<br>如对于下面这段程序：</p><pre class=" language-c"><code class="language-c">dobule <span class="token function">match0</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*find 0*/</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"0.0"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>词法分析器会返回：</p><pre><code>FLOAT  ID(match0)  LPAREN  CHAR  STAR  ID(s)  RPARENLARACE  IF  LPAREN  BANG  ID(strcmp)  LPAREN  ID(s)COMMA  STRING(0,0)  COMMA  NUM(3)  RPAREN  RPARENRETURN  REAL(0.0)  SEML RBRACE  EOF</code></pre><p>任何合理的程序设计语言都可以实现特定的词法分析器，我们将用<strong><em>正则表达式</em></strong>的形式语言来指明词法单词，用<strong><em>确定的有限自动机</em></strong>来实现词法分析器，并用数学的方法将两者联系起来。</p><h4 id="2-2正则表达式"><a href="#2-2正则表达式" class="headerlink" title="2.2正则表达式"></a>2.2正则表达式</h4><p>语言是<code>字符串组成的集合</code>，字符串是<code>符号</code>的有限序列，符号本身来自<code>有限字母表</code>。</p><p>每个正则表达式代表一个字符串集合。</p><ul><li>符号(symbol)：对于语言字母表中的每个符号 $a$ ，正则表达式 $a$ 表示仅包含字符串 $a$ 的语言。</li><li>可选（alternation）：对于给定的两个正则表达式 $M$ 和 $N$ ，可选操作符（|）形成一个新的正则表达式 $1$ 。如果一个字符串属于语言 $M$ 或 $N$ ，则它属于语言 $M|N$ 。因此$a，b$组成的语言包含 $a$ 和 $b$ 这两个字符串。</li><li>联结（concatenation）：对于给定的两个正则表达式 $M$ 和 $N$ ，联结操作符（·）形成一个新的正则表达式 $M·N$。如果一个字符串是任意两个字符串  $\alpha$  和 $\beta$ 的联结，且 $\alpha$ 属于语言 $M$ ， $\beta$ 属于语言 $N$ ，则该字符串属于$M·N$组成的语言，因此正则表达式$（a|b）·a$定义了包含两个字符串 $aa$ 和 $ab$ 的语言。</li><li>$\epsilon$ （epsilon）：正则表达式 $\epsilon$ 表示仅含一个空字符串的语言。因此正则表达式$(a·b)|\epsilon$表示语言$|” “,”ab”|$。</li><li>重复（repetition）：对于给定的正则表达式 $M$ ，它的克林闭包（Kleene closure）是$M^<em>$，如果一个字符串是有 $M$ 中的字符串经过（0～无数）次联结运算的结果，则该字符串属于$M^</em>$。</li></ul><p>运算优先级：克林闭包&gt;联结运算&gt;可选运算，缩写形式[abcd]表示(a|b|c|d)，[b-g]表示[bcdefg]， $M？$ 表示 $（M|\epsilon）$, $M^+$ 则表示 $（M·M^*）$ ,但是这些缩写并没有扩充正则表达式的描述能力。</p><p>我们通过正则表达式来描述<strong><em>词法单词</em></strong>，这样对于一段单词我们就可以判断它是何种类型的词法单词。</p><table><thead><tr><th align="center">正则表达式</th><th align="center">C语言</th></tr></thead><tbody><tr><td align="center">if</td><td align="center">{return IF;}</td></tr><tr><td align="center">[a-z][a-z0-9]*</td><td align="center">{return ID;}</td></tr><tr><td align="center">[0-9]+</td><td align="center">{return NUM;}</td></tr><tr><td align="center">([0-9]+”.”[0-9]*)｜([0-9]*[0-9]+)</td><td align="center">{return REAL;}</td></tr><tr><td align="center">(“–”[a-z]*“\n”)｜(“ “｜”\n”｜”\t”)+</td><td align="center">{/*注释*/}</td></tr><tr><td align="center">.</td><td align="center">{error( );}</td></tr></tbody></table><p>其中注释的识别后,并不会提交给语法分析器,而是忽略他们重新开始词法分析。这个语言的注释是以爽横线开始，只包含字母字符，并以换行符结束。</p><p>词法规范应该是完整的，它应当总是可以与输入中的某些子串相匹配，但是我们的规则存在二义性，比如if8，应该是标识符还是两个单词if和8，Lex和其他词法分析器对于二义性应用两条规则：</p><ul><li>最长匹配：取可以与正则表达式匹配的最长的那个字符串；</li><li>规则优先：正则表达式的书写顺序有意义，第一个与之匹配的正则表达式决定了子串的单词类型。</li></ul><h4 id="2-3有限自动机"><a href="#2-3有限自动机" class="headerlink" title="2.3有限自动机"></a>2.3有限自动机</h4><p>通过正则表达式我们可以指明词法单词，但是我们还需要一种使用<strong><em>计算机程序来实现的形式化方法</em></strong>，这里我们可以使用有限自动机。有限自动机有一个有限<strong><em>状态</em></strong>的集合和一些从一个状态通向另一个状态的<strong><em>边</em></strong>，每条边上标记有一个<strong><em>符号</em></strong>；其中一个状态是<strong><em>初态</em></strong>，某些状态是<strong><em>终态</em></strong>。<br><a href="https://imgchr.com/i/A3i4mQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/21/A3i4mQ.png" alt="A3i4mQ.png"></a><br>圆圈表示状态，双圆圈表示终态，初态是入边无来源的圆圈，标有多个字符的边是多条平行边的缩写。</p><p>在确定的有限自动机（DFA）中，不会有从同一状态出发的两条边标有相同的符号。DFA从初始状态出发，对于输出字符串的每个字符，自动机都将沿着一条确定的边到达另一个状态，这条边必须是标有输入字符的边。对n个字符的字符串进行了n次状态转换后，如果自动机达到了终态，自动机将接受该字符串其他情况如没有到达终态或找不到和输入字符匹配的边，自动机将拒绝（露伴自动机：达卡口度挖鲁）。由一个自动机识别的语言是该自动机接受的字符集合。</p><p>将上面所示的6个独立的自动机合并为一个可以作为词法分析器的自动机，注意要避免二义性原则，所以我们将IF和ID自动机合并，并优先将接受单词的类型标记为IF。<br><img src="https://s2.ax1x.com/2019/03/21/A3kE80.png" alt="A3kE80.png"><br>这个自动机可以用一个转换矩阵来表示。转换矩阵是一个二维数组，一个元素是向量的向量，数组的下标是<em>状态编号</em>和<em>输入字符</em>。其中有一个停滞状态（status 0），这个状态对于任何输入都返回到自身，用status0来表示不存在的边。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> edges<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*...0 1 2 ... - ... e f g h i j ...*/</span><span class="token comment" spellcheck="true">/*status 0*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 1*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">9</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 2*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 3*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 4*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 5*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 6*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 7*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*status 8*/</span>     <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span>et cetera<span class="token punctuation">}</span>另外还需要有一个终结（finality）数组，将状态编号映射到动作</code></pre><h5 id="如何识别最长匹配"><a href="#如何识别最长匹配" class="headerlink" title="如何识别最长匹配"></a>如何识别最长匹配</h5><p>使用两个变量<code>Last-final(最近遇到的终态的编号)</code>和<code>Input-Position-at-Last-Final(最近遇到终态时的字符)</code>来记住自动机最后一次处于终态时的时机，每次进入一个终态时，词法分析器都能更新这两个变量。当到达停滞Status 0 （无出口转换的非终结状态时）时，通过这两个变量来求最长匹配。<br><img src="https://s2.ax1x.com/2019/03/21/A3AO6f.png" alt="A3AO6f.png"><br>上图展示了自动机求最大匹配的过程。</p><h4 id="2-4非确定有限自动机"><a href="#2-4非确定有限自动机" class="headerlink" title="2.4非确定有限自动机"></a>2.4非确定有限自动机</h4><p>非确定有限自动机（NFA）是一种需要对从一个状态出发的多条标有相同符号的边进行选择的自动机，它也可能存在 $\epsilon$ 的边，这种边可以在不接受输入字符的情况下进行状态转化。</p><p>NFA必须进行猜测来决定走那一条边，同时必须进行正确的猜测。</p><p>下图是同样的两个NFA，他们能接受长度是2的倍数或长度是3<br>的倍数由a构成的字符串。<br><img src="https://s2.ax1x.com/2019/03/21/A3E1c6.png" alt="A3E1c6.png"><br><img src="https://s2.ax1x.com/2019/03/21/A3EGnO.png" alt="A3EGnO.png"></p><h5 id="2-4-1将正则表达式转化为NFA"><a href="#2-4-1将正则表达式转化为NFA" class="headerlink" title="2.4.1将正则表达式转化为NFA"></a>2.4.1将正则表达式转化为NFA</h5><p>NFA可以很容易的将一个静态的，说明性的正则表达式，转化为一个可模拟的，准可执行的NFA。</p><p>一般而言，任何一个正则表达式都有一个具有头和尾的NFA。其中头为末端状态，尾是开始边。</p><p>NFA的几种形式：<br><img src="https://s2.ax1x.com/2019/03/21/A3VuqS.png" alt="A3VuqS.png"></p><p>根据前面正则表达式ID，IF，NUM，error构造的NFA：<br><img src="https://s2.ax1x.com/2019/03/21/A3VJx0.png" alt="A3VJx0.png"></p><h5 id="2-4-2将NFA转化为DFA"><a href="#2-4-2将NFA转化为DFA" class="headerlink" title="2.4.2将NFA转化为DFA"></a>2.4.2将NFA转化为DFA</h5><p>显而易见的是大多数计算机并没有足够的硬件实现NFA，但是DFA的实现较容易。</p><p>我们形式化的定义  $\epsilon$  闭包如下。令 $edge(s,c)$ 是从状态 $s$ 沿着标有  $c$  的一条边可到达的所有NFA状态的集合.对于状态集合 $S$ , $closure(S)$ 是从 $S$ 的状态中出发,无需接受任何字符,即只通过 $\epsilon$ 边便可以达到的集合.这种经过 $\epsilon$ 边的概念可用数学方法表述,即 $closure(S)$ 是满足如下条件的最下集合 $T$ :</p><p> $T=S \cup (\bigcup\limits_{s \in T}edge(s,\epsilon))$<br>我们可以用迭代法来算出 $T$ :</p><p>$T \leftarrow S$</p><p>repeate $T’ \leftarrow T$</p><p>$$T \leftarrow T’ \cup (\bigcup\limits_{s \in T’}edge(s,\epsilon))$$</p><p>util $T=T’$</p><p>这个算法是正确的,因为 $T$ 只会不断扩大,所以最终的 $T$ 一定包含 $S$ ,如果第一次迭代之后有了 $T=T’$ ,则 $T$ 也一定包含 $\bigcup \limits_{s \in T’}edge(s,\epsilon)$ 。因为NFA中只有有限个不同的状态所以算法一定会中止。</p><p>现在当用前面的方法来模拟NFA时位于状态集合 $d={s_i,s_k,s_l}$ 中,从d中的状态出发,并输入一个符号c,将到达NFA的一个新的状态集合;我们称这个集合为 $DFAedge(d,c)$ :</p><p>$$DFAedge(d,c)=closure(\bigcup \limits_{s \in d}edge(s,<br>c))$$<br>利用DFAedge能够更形式化的写出NFA模拟算法，如果NFA的初态是$s_1$,输入字符为$c_1,\cdots,c_n$,则算法为:</p><p>$d \leftarrow closure({s_1})$</p><p>$for\ i \leftarrow\ 1 \ to \ k$</p><p>$$ \quad d \leftarrow DFAedge(d,c_i) $$</p><p>状态集合运算是代价很高的运算,对于每个源程序都进行这样的词法分析是不现实的.但是我们可以预先计算出所有的状态集合。可以由NFA构造一个DFA，使得NFA每一个状态集合都对应于DFA的一个状态。因为NFA个数有限，所以DFA也有限$(2^n)$</p><p>DFA的状态 $d_1$ 就是 $closure（s_1）$ ,这和NFA模拟算法一样，抽象而言，如果 $d_j=DFAedge(d_i,c)$ ,则存在一条从 $d_i$ 到 $d_j$ 的标记为c的边。令 $\sum$ 是字母表。</p><pre><code>states[0] &lt;-- {};  states[1] &lt;-- closure([s1])p &lt;-- 1; j &lt;-- 0while j&lt;=p   foreach c ∈ ∑               e &lt;-- DFAedge(states[j],c)            if e = states[i] for some i&lt;=p                then trans[j,c] &lt;-- i                else p &lt;-- p+1                    states[p] &lt;-- e                    trans[j,c] &lt;-- p j &lt;-- j+1</code></pre><p>这个算法不访问DFA的不可到达状态，原则上DFA有$2^n$个状态，但实际上一般只能找到n个状态是从初态可到达的，这一点可以避免DFA解释器的转换表出现指数级膨胀。</p><p>只要states[d]中有任何一个状态是NFA的终态，状态d就是DFA的终态，我们还要标记终态所映射的单词，并且states[d]中还可能有多个状态是这个NFA的终态，我们使用正则表达式中最先出现的那个单词来标记，这样就完成了<strong><em>规则优先</em></strong>的实现方法。</p><p>构造DFA后只需保留转换数组即可用于词法分析。</p><p>但是通过这种方法构造出来的自动机并不是最理想的，我们可以删除自动机中重复的多个状态中，只保留一个有效的状态。</p><p>若$s_1$和$s_2$同为终态或同为非终态，且对于任意符号c，trans[s1,c]=trans[s2,c]，则显然它们两者等价。</p><h4 id="2-5Lex：词法分析器的生成器"><a href="#2-5Lex：词法分析器的生成器" class="headerlink" title="2.5Lex：词法分析器的生成器"></a>2.5Lex：词法分析器的生成器</h4><p>在输入语言需要大量运算的时候，通过手工的方式完成DFA的构造显然不显示，而且构造DFA是一种机械性的工作，我们可以使用词法分析器的生成器Lex来构造DFA。</p><p>Lex是第一个基于正则表达式的词法分析器的生成器。将还未经过 $\epsilon$ 转换检查的状态保存在一个队列或栈中，可以更加高效的计算 $\epsilon$ 闭包。正则表达式可以直接转换称DFA而不需经过NFA。DFA转换表可能是个非常大的稀疏表，实际会对表进行压缩。不通过转换表，直接jiangDFA转换为可执行代码（case），其速度可以和手工编写的词法分析器一样快，例如Flex（fast Lexical analyzer generator）。</p><p>Lex由词法规范生成一个C程序。对于要进行分析的程序设计语言中的每一种单词类型，该规范包含一个正则表达式和一个动作（将单词类型和其他信息传递给编译器的下一阶段）。</p><p>我们使用Lex对前面给出的6个正则表达式进行生成：</p><pre class=" language-c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*C Declarations: */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tockens.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"errormsg.h"</span> </span><span class="token comment" spellcheck="true">/*definitions of ID,IF,NUM*/</span><span class="token keyword">union</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> ival<span class="token punctuation">;</span> string sval<span class="token punctuation">;</span> <span class="token keyword">double</span> fval<span class="token punctuation">;</span><span class="token punctuation">}</span> yylval<span class="token punctuation">;</span><span class="token keyword">int</span> charPos<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ADJ (EM_tokPos=charPos, charPos+=yyleng)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Lex Definitions:*/</span>digits <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">%</span><span class="token operator">%</span><span class="token comment" spellcheck="true">/*Regular Expressions and Actions:*/</span><span class="token keyword">if</span>                   <span class="token punctuation">{</span>ADJ<span class="token punctuation">;</span> <span class="token keyword">return</span> IF<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z0<span class="token number">-9</span><span class="token punctuation">]</span><span class="token operator">*</span>       <span class="token punctuation">{</span>ADJ<span class="token punctuation">;</span> yylval<span class="token punctuation">.</span>sval<span class="token operator">=</span><span class="token function">String</span><span class="token punctuation">(</span>yytext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>digits<span class="token punctuation">}</span>             <span class="token punctuation">{</span>ADJ<span class="token punctuation">;</span> yylval<span class="token punctuation">.</span>sval<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>yytext<span class="token punctuation">)</span><span class="token punctuation">;</span>                           retrun ID<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">{</span>digits<span class="token punctuation">}</span><span class="token string">"."</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token string">"."</span><span class="token punctuation">{</span>digits<span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>ADJ<span class="token punctuation">;</span>                         yylval<span class="token punctuation">.</span>fval<span class="token operator">=</span><span class="token function">stof</span><span class="token punctuation">(</span>yytext<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token keyword">return</span> REAL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">*</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">|</span><span class="token string">"\n"</span><span class="token operator">|</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token operator">+</span>      <span class="token punctuation">{</span>ADJ<span class="token punctuation">;</span><span class="token punctuation">}</span>                      <span class="token punctuation">{</span>ADJ<span class="token punctuation">;</span> <span class="token function">EM_error</span><span class="token punctuation">(</span><span class="token string">"illegal character!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="开始状态"><a href="#开始状态" class="headerlink" title="开始状态"></a>开始状态</h5><p>正则表达式是静态的和说明性的，自动机是动态的和命令式的。Lex有一种将状态和正则表达式混合到一起 的机制。你可以声明一组初态，每个正则表达式前面可以有一组对它而言是合法的初态作为其前缀，动作代码可以明显的改变初态。就相当于我们的有限自动机的边标记的是正则表达式而不是符号。</p><p>但是尽管与整个注释变大时相匹配的单个正则表达式，但是随着注释的越来越复杂，特别是在允许注释嵌套的情况下，正则表达式会变的更复杂，甚至不可能。</p><h4 id="程序设计：词法分析"><a href="#程序设计：词法分析" class="headerlink" title="程序设计：词法分析"></a>程序设计：词法分析</h4><p>惊了，<code>本章未对词法分析器应当如何初始化以及如何与编译器通信做出说明，你可以从Lex使用手册中学得</code>你看看这说的是人话吗，您老也知道自己没讲啊。fine，开干。</p><p>总的来说就是用Lex为Tiger语言生成一个词法分析器<code>tiger.lex</code>，并且写文档说明自己是如何处理注释，字符串，错误处理，文件结束处理的，还有你自己构想实现的一些feature。</p><p>打开<code>chap2</code>目录，ls一下有这样几个文件：</p><pre><code>driver.cerrormsg.c //报错信息模块，产生含文件名和行号的报错信息errormsg.h //报错信息模块，产生含文件名和行号的报错信息makefile  //编译所有文件tiger.lex  //lex初始代码tokens.h //词法单词常数以及yylval的定义util.cutil.h</code></pre><p>先来熟悉熟悉一下，如何检测，首先打开<code>$Tiger/testcase</code>然后复制程序<code>test1.tig</code>到目录<code>chap2</code>，然后输入：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">make</span>$ ./lextest test1.tig</code></pre><p>会输出：</p><pre><code>test1.tig:1.1: illegal token...test1.tig:4.8: illegal token       INT   88 1test1.tig:4.10: illegal token...test1.tig:7.4: illegal token</code></pre><p>我们还没有完成，所以全是报错信息。</p><p>然后我们再来看一下附录中对Tiger语言的描述。</p><p>在这里我使用Flex来生成<code>tiger.lex</code>，你可以通过</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> flex</code></pre><p>来获得Flex。或者通过源码编译安装<a href="https://github.com/westes/flex" target="_blank" rel="noopener">westes/flex</a><br><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/how_flex_is_used.jpeg" alt="work-step"><br>这是Flex 的工作流程图，所以接下来我们要做的就是修改<code>tiger.lex</code>中的内容，使之能对tiger语言进行词法分析。make可以帮助我们省去繁琐的通过lex先处理<code>.lex</code>文件的方式。</p><p>这次的程序分析题比第一次友好很多啊,只需要修改一个文件<code>tiger.lex</code>就行了,内容也不难就是写几个正则表达式（两天前我是这样想的）。实际实施并不是这么简单啊。这是我第一次编辑的内容</p><pre><code>%{#include &lt;string.h&gt;#include &quot;util.h&quot;#include &quot;tokens.h&quot;#include &quot;errormsg.h&quot;int charPos=1;int yywrap(void){ charPos=1; return 1;}void adjust(void){ EM_tokPos=charPos; charPos+=yyleng;}%}digits  [0-9]+d (0|1|2|3|4|5|6|7|8|9)%%  /* The Comment *//*[a-z]**/     {adjust();}  /* The Identidier */if             {adjust(); return IF;}for             {adjust(); return FOR;}while          {adjust(); return WHILE;}to             {adjust(); return TO;}break          {adjust(); return BREAK;}let            {adjust(); return LET;}in             {adjust(); return IN;}end            {adjust(); return END;}function       {adjust(); return FUNCTION;}var            {adjust(); return VAR;}type           {adjust(); return TYPE;}array          {adjust(); return ARRAY;}then           {adjust(); return THEN;}else           {adjust(); return ELSE;}do             {adjust(); return DO;}of             {adjust(); return OF;}nil            {adjust(); return NIL;}  /* The Signal*/&quot; &quot;           {adjust(); continue;}\n           {adjust(); EM_newline(); continue;}&quot;,&quot;            {adjust(); return COMMA;}&quot;:&quot;           {adjust(); return COLON;}&quot;;&quot;           {adjust(); return SEMICOLON;}&quot;(&quot;           {adjust(); return LPAREN;}&quot;)&quot;           {adjust(); return RPAREN;}&quot;[&quot;           {adjust(); return LBRACK;}&quot;]&quot;           {adjust(); return RBRACK;}&quot;{&quot;           {adjust(); return LBRACE;}&quot;}&quot;           {adjust(); return RBRACE;}&quot;+&quot;           {adjust(); return PLUS;}&quot;-&quot;           {adjust(); return MINUS;}&quot;*&quot;           {adjust(); return TIMES;}&quot;·&quot;             {adjust(); return DOT;}&quot;/&quot;           {adjust(); return DIVIDE;}&quot;=&quot;               {adjust(); return EQ;}&quot;&lt;&quot;               {adjust(); return LT;}&quot;&gt;&quot;               {adjust(); return GT;}&quot;&lt;=&quot;           {adjust(); return LE;}&quot;&gt;=&quot;           {adjust(); return GE;}&quot;&amp;&quot;            {adjust(); return AND;}&quot;|&quot;            {adjust(); return OR;}&quot;:=&quot;           {adjust(); return ASSIGN;}&quot;&lt;&gt;&quot;           {adjust(); return NEQ;}[a-z][a-z0-9]* {adjust(); yylval.sval=String(yytext); return ID;}  /*The String Literal*/&quot;[a-z0-9\n\t\^c\{d}{d}{d}\&quot;\\\ff\]*&quot;      {adjust(); yylval.sval=String(yytext); return STRING;}  /*The Integer Literal*/{digits}       {adjust(); yylval.ival=atoi(yytext); return INT;}  /*The Illrgal Token*/.           {adjust(); EM_error(EM_tokPos,&quot;illegal token&quot;);}</code></pre><p>测试：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">make</span>$ ./lextest test1.tig</code></pre><p>对<code>test1.tig</code>文件测试，输出:</p><pre><code>    DIVIDE    1     TIMES    2        ID    4 an     ARRAY    7      TYPE   13        ID   18 and        ID   22 an     ARRAY   25        ID   31 variable     TIMES   40    DIVIDE   41test1.tig:1.42: illegal token       LET   44test1.tig:2.4: illegal tokentest1.tig:3.1: illegal token      TYPE   50        ID   56 arrtype        EQ   64     ARRAY   66        OF   72        ID   75 inttest1.tig:3.30: illegal tokentest1.tig:4.1: illegal token       VAR   81        ID   85 arr1     COLON   89        ID   90 arrtype    ASSIGN   98        ID  101 arrtype    LBRACK  109       INT  110 10    RBRACK  112        OF  114       INT  117 0test1.tig:4.39: illegal token        IN  120test1.tig:5.3: illegal tokentest1.tig:6.1: illegal token        ID  125 arr1test1.tig:6.6: illegal token       END  131test1.tig:7.4: illegal token</code></pre><p>从输出中我们可以看到词法分析器并没有跳过注释，而且对于换行符无法识别，但是对于ID，和Tiger语言保留符，运算符识别正确。而且还有一个显而易见的问题是对String类型的处理不够完美，会将String两边的引号也收入字符串中。</p><p>首先增加跳过换行符的正则表达式</p><pre><code>[\r\t]         {adjust(); continue;}</code></pre><p>然后增加对大写字母的支持</p><pre><code>[a-zA-Z][a-zA-Z0-9]* {adjust(); yylval.sval=String(yytext); return ID;}</code></pre><p>针对字符串我们特别设定一种规则，当读入<code>&quot;</code>号时自动开始字符串的处理过程，而注释也采用自己的独特规则，这里特别要注意的一点是，前面我们有提到过，为了保证语法不会有二义性，书写正则表达式时的顺序也有含义所以我们优先书写String类型的正则表达式。</p><p>对于String，当我们读入<code>&quot;</code>首先初始化一个32个元素字符数组<code>strbuf</code>，然后开始<code>STRING_STATE</code>，如果在字符串中再次遇到<code>&quot;</code>符，表示字符串结束，我们就返回字符串。通过<code>append_char2str_buf</code>函数创造新的两倍长度的数组。而对于注释我们是使词法分析器直接跳过，唯一比棘手的情况就是嵌套注释，所以我们定义一个<code>commentNesting</code>来记录注释嵌套的情况。</p><pre><code>%{#include &lt;string.h&gt;#include &quot;util.h&quot;#include &quot;tokens.h&quot;#include &quot;errormsg.h&quot;int charPos = 1;int yywrap(void){ charPos=1; return 1;}void adjust(void){ EM_tokPos=charPos; charPos+=yyleng;}int commentNesting = 0;/* String buffer. */const int INITIAL_BUFFER_LENGTH = 32;char *string_buffer;unsigned int string_buffer_capacity;unsigned int STRING_START = 0;void init_string_buffer(void){  string_buffer = checked_malloc(INITIAL_BUFFER_LENGTH);  string_buffer[0] = 0;  string_buffer_capacity = INITIAL_BUFFER_LENGTH;}void append_char_to_stringbuffer(char ch){    size_t new_length = strlen(string_buffer) + 1;    if (new_length == string_buffer_capacity)    {        char *temp;        string_buffer_capacity *= 2;        temp = checked_malloc(string_buffer_capacity);        memcpy(temp, string_buffer, new_length);        free(string_buffer);        string_buffer = temp;    }    string_buffer[new_length - 1] = ch;    string_buffer[new_length] = 0;}%}%x COMMENT_STATE STRING_STATE%%  /* Skip white spaces. */[ \r\t]     {adjust(); continue;}\n     {adjust(); EM_newline(); continue;}  /* Reserved words. */while     {adjust(); return WHILE;}for       {adjust(); return FOR;}to        {adjust(); return TO;}break     {adjust(); return BREAK;}let       {adjust(); return LET;}in        {adjust(); return IN;}end       {adjust(); return END;}function  {adjust(); return FUNCTION;}var       {adjust(); return VAR;}type      {adjust(); return TYPE;}array     {adjust(); return ARRAY;}if        {adjust(); return IF;}then      {adjust(); return THEN;}else      {adjust(); return ELSE;}do        {adjust(); return DO;}of        {adjust(); return OF;}nil       {adjust(); return NIL;}  /* Punctuation symbols. */&quot;,&quot;   {adjust(); return COMMA;}&quot;:&quot;   {adjust(); return COLON;}&quot;;&quot;   {adjust(); return SEMICOLON;}&quot;(&quot;   {adjust(); return LPAREN;}&quot;)&quot;   {adjust(); return RPAREN;}&quot;[&quot;   {adjust(); return LBRACK;}&quot;]&quot;   {adjust(); return RBRACK;}&quot;{&quot;   {adjust(); return LBRACE;}&quot;}&quot;   {adjust(); return RBRACE;}&quot;.&quot;   {adjust(); return DOT;}&quot;+&quot;   {adjust(); return PLUS;}&quot;-&quot;   {adjust(); return MINUS;}&quot;*&quot;   {adjust(); return TIMES;}&quot;/&quot;   {adjust(); return DIVIDE;}&quot;=&quot;   {adjust(); return EQ;}&quot;&lt;&gt;&quot;  {adjust(); return NEQ;}&quot;&lt;&quot;   {adjust(); return LT;}&quot;&lt;=&quot;  {adjust(); return LE;}&quot;&gt;&quot;   {adjust(); return GT;}&quot;&gt;=&quot;  {adjust(); return GE;}&quot;&amp;&quot;   {adjust(); return AND;}&quot;|&quot;   {adjust(); return OR;}&quot;:=&quot;  {adjust(); return ASSIGN;}  /* Identifiers. */[a-z|A-Z]+[a-z|A-Z|0-9|_]*  {  adjust();  yylval.sval = yytext;  return ID;}  /* Integer literals. */[0-9]+     {  adjust();  yylval.ival=atoi(yytext);  return INT;}  /* String literals. */\&quot;  {    adjust();    init_string_buffer();    STRING_START = charPos - 1;    BEGIN(STRING_STATE);}  /* Comments. */&quot;/*&quot; {     adjust();     commentNesting += 1;     BEGIN(COMMENT_STATE);   }&quot;*/&quot; {     adjust();     EM_error(EM_tokPos, &quot;Comment not open!&quot;);     yyterminate();   }.     {adjust(); EM_error(EM_tokPos,&quot;illegal token&quot;);}&lt;STRING_STATE&gt;{    \&quot; {          adjust();          // printf(&quot;%s\n&quot;,string_buffer);          if(string_buffer[0]==&#39;\0&#39;){            yylval.sval = &quot;(null)&quot;;          }else{            yylval.sval = string_buffer;          }          EM_tokPos = STRING_START;          BEGIN(INITIAL);          return STRING;       }    \n {         adjust();         EM_error(EM_tokPos, &quot;Unterminated string constant!&quot;);         yyterminate();       }    \\n {adjust();append_char_to_stringbuffer(&#39;\n&#39;);}    \\t {adjust();append_char_to_stringbuffer(&#39;\t&#39;);}    \\r {adjust();append_char_to_stringbuffer(&#39;\r&#39;);}    \\b {adjust();append_char_to_stringbuffer(&#39;\b&#39;);}    \\f {adjust();append_char_to_stringbuffer(&#39;\f&#39;);}    &quot;\\\&quot;&quot; {adjust();append_char_to_stringbuffer(&#39;&quot;&#39;);}    &quot;\\&#39;&quot; {adjust();append_char_to_stringbuffer(&#39;\&#39;&#39;);}    &quot;\\/&quot; {adjust();append_char_to_stringbuffer(&#39;/&#39;);}    &quot;\\\\&quot; {adjust();append_char_to_stringbuffer(&#39;\\&#39;);}    &lt;&lt;EOF&gt;&gt; {              EM_error(EM_tokPos, &quot;Encounter EOF.&quot;);              yyterminate();            }    . {      adjust();      char *yptr = yytext;      while (*yptr) {        append_char_to_stringbuffer(*yptr++);      }    }}&lt;COMMENT_STATE&gt;{    &quot;/*&quot; {           adjust();           commentNesting += 1;           continue;         }    &quot;*/&quot; {           adjust();           commentNesting -= 1;           if (commentNesting == 0) {             BEGIN(INITIAL);           }         }    &lt;&lt;EOF&gt;&gt; {              EM_error(EM_tokPos, &quot;Encounter EOF.&quot;);              yyterminate();            }    \n  {      adjust();      EM_newline();      continue;    }    . {      adjust();      }}</code></pre><p>对<code>test1.tig</code>测试得到输出：</p><pre><code>       LET   44      TYPE   50        ID   56 arrtype        EQ   64     ARRAY   66        OF   72        ID   75 int       VAR   81        ID   85 arr1     COLON   89        ID   90 arrtype    ASSIGN   98        ID  101 arrtype    LBRACK  109       INT  110 10    RBRACK  112        OF  114       INT  117 0        IN  120        ID  125 arr1       END  131</code></pre><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><h5 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h5><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><p>1.<a href="https://www.geeksforgeeks.org/flex-fast-lexical-analyzer-generator/" target="_blank" rel="noopener">Flex (Fast Lexical Analyzer Generator )</a></p><p>2.<a href="https://github.com/yihui-he/Modern-Compiler-Implementation-in-C/blob/master/chap2/tiger.lex" target="_blank" rel="noopener">yihui-he/Modern-Compiler-Implementation-in-C</a></p><p>3.<a href="http://en.wikipedia.org/wiki/ASCII#ASCII_control_characters" target="_blank" rel="noopener">控制字符列表</a></p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虎书 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Titanic: Machine Learning from Disaster</title>
      <link href="/2019/03/03/titanic-machine-learning-from-disaster/"/>
      <url>/2019/03/03/titanic-machine-learning-from-disaster/</url>
      
        <content type="html"><![CDATA[<h3 id="初识Kaggle"><a href="#初识Kaggle" class="headerlink" title="初识Kaggle"></a>初识Kaggle</h3><p><a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a> 是一个流行的数据科学竞赛平台。由 Goldbloom 和 Ben Hamner 创建于 2010 年。在这里可以打比赛。</p><h3 id="Get-start"><a href="#Get-start" class="headerlink" title="Get start"></a>Get start</h3><p><a href="https://www.kaggle.com/c/titanic/leaderboard" target="_blank" rel="noopener">Titanic: Machine Learning from Disaster</a></p><p>第一道题目的背景是泰坦尼克号沉没的背景，目的是让我们预测谁会活下来。</p><h5 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h5><p>首先就是数据的下载，下载<a href>titanic.zip</a>。</p><h5 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h5><p>首先解压我们得到的数据，数据中有两个文件<code>train.csv</code>和<code>test.csv</code>，很明显一个是训练集一个是测试数据。利用手头的数据分析,利用<code>pandas</code>数据分析模块和<code>numpy</code>科学计算模块来分析数据。首先读入我们的数据：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFramedata_train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/home/jason/Documents/ML/titanic/train.csv'</span><span class="token punctuation">,</span>engine <span class="token operator">=</span> <span class="token string">'python'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>data_train <span class="token comment" spellcheck="true">#dataframe格式</span></code></pre><p>这里就可以看到train.csv中的数据了。但是只有数据表我们很难从中找出规律。所以接下来通过方法<code>data_train.info()</code>和<code>data_train.describe()</code>来大体查看一下数据集的全貌。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> data_train<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns):PassengerId    891 non-null int64//乘客IDSurvived       891 non-null int64//是否获救Pclass         891 non-null int64//乘客等级Name           891 non-null object//乘客姓名Sex            891 non-null object//乘客性别Age            714 non-null float64//乘客年龄SibSp          891 non-null int64//乘客堂兄弟个数Parch          891 non-null int64//乘客父母孩子个数Ticket         891 non-null object//船票Fare           891 non-null float64//票价Cabin          204 non-null object//客舱Embarked       889 non-null object//登船港口dtypes: float64(2), int64(5), object(5)memory usage: 83.6+ KB</code></pre><p>从这里可以看出训练集中一共有891条记录，每一条记录有12个属性，每种属性都有不一样的特点，比如<code>Cabin</code>舱位属性只有204条记录有值，<code>Age</code>只有714条记录中有值，同时我们还知道了每条属性的类型。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> data_train<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code>       PassengerId    Survived      Pclass         Age       SibSp       Parch        Farecount   891.000000  891.000000  891.000000  714.000000  891.000000  891.000000  891.000000mean    446.000000    0.383838    2.308642   29.699118    0.523008    0.381594   32.204208std     257.353842    0.486592    0.836071   14.526497    1.102743    0.806057   49.693429min       1.000000    0.000000    1.000000    0.420000    0.000000    0.000000    0.00000025%     223.500000    0.000000    2.000000   20.125000    0.000000    0.000000    7.91040050%     446.000000    0.000000    3.000000   28.000000    0.000000    0.000000   14.45420075%     668.500000    1.000000    3.000000   38.000000    1.000000    0.000000   31.000000max     891.000000    1.000000    3.000000   80.000000    8.000000    6.000000  512.329200</code></pre><p>从输出中我们得知了<code>mean</code>均值,<code>std</code>标准差,<code>min</code>最小值,<code>25%</code>,<code>50%</code>,<code>75%</code>,<code>max</code>最大值这些关键信息。</p><p>我们首先提出一个假设“乘客是否获救与乘客的身份地位有关”，不难想象，在当时的情况下，一些地位比较高的人更容易获得帮助，但是否真的如此呢，我们还是要从训练集中找出答案。为了使数据间的关系更加明细，我们使用图表的方式来描述数据的内在联系。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设定图表颜色颜色</span>plt<span class="token punctuation">.</span>subplot2grid<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Pclass<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#人数</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"the Pclass"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot2grid<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">,</span> data_train<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"Age"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设定纵坐标名称</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">'major'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"Survived by age(=1)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot2grid<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>colspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Pclass <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Pclass <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Pclass <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plots an axis lable</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"Density"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#密度</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"The age of each pclass"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token string">'level1'</span><span class="token punctuation">,</span> u<span class="token string">'level2'</span><span class="token punctuation">,</span>u<span class="token string">'level3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># sets our legend for our graph.</span>plt<span class="token punctuation">.</span>subplot2grid<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Embarked<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"the number of each embarked"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"number"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设定图表颜色alpha参数</span></code></pre><p><img src="https://s2.ax1x.com/2019/03/14/AAkvYn.png" alt="AAkvYn.png"></p><p>获得一张分布图，从表中我们可以看出，三个等级的年龄分布略有不同，头等舱获救人数最多，年龄分布大差不差。但是我们可以提出自己的一些猜想：</p><ul><li>是否获救和地位高低有关</li><li>是否获救和年龄有关</li><li>是否获救和登船港口无关</li></ul><p>当然这些目前还只是猜想，我们并不知道其是否正确，下面继续从数据中验证我们的猜想。</p><h5 id="属性与获救结果的关联统计"><a href="#属性与获救结果的关联统计" class="headerlink" title="属性与获救结果的关联统计"></a>属性与获救结果的关联统计</h5><p>第一个猜想是和地位高低有关，而头等舱明显是区分地位的一个方面（迫真），看一下各乘客等级的获救情况</p><pre class=" language-python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设定图表颜色alpha参数</span>Survived_0 <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Pclass<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Survived <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>Survived_1 <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Pclass<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Survived <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>u<span class="token string">'Unsurvived'</span><span class="token punctuation">:</span>Survived_0<span class="token punctuation">,</span>u<span class="token string">'Survived'</span><span class="token punctuation">:</span>Survived_1<span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"each Pclass survived"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">"Pcalss"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"number"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/03/14/AAHZ3n.png" alt="AAHZ3n.png"><br>明显等级为1的乘客，获救的概率比其他等级高很多。恩，这个一定是影响最后获救结果的一个<em>特征</em>。</p><p>看过电影的同学应该都知道当时船长有喊让妇女儿童先上救生船，所以性别和年龄也要可能是一个重要因素。先看看各性别的获救情况</p><pre class=" language-python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设定图表颜色alpha参数</span>Survived_m <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Sex <span class="token operator">==</span> <span class="token string">'male'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>Survived_f <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Sex <span class="token operator">==</span> <span class="token string">'female'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>u<span class="token string">'MAN'</span><span class="token punctuation">:</span>Survived_m<span class="token punctuation">,</span> u<span class="token string">'FEMALE'</span><span class="token punctuation">:</span>Survived_f<span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"the survived by sex"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">"Sex"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"number"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/03/14/AAHJ3R.png" alt="AAHJ3R.png"><br>最后获救的人中女性占大多数，这也一定是一个<em>特征</em>。<br>进一步思考上流社会的男性女性的生存比例是否会更大呢？<br>同时分析舱别和性别：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#然后我们再来看看各种舱级别情况下各性别的获救情况</span>fig<span class="token operator">=</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.65</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置图像透明度，无所谓</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"the survived by Sex&amp;Pclass"</span><span class="token punctuation">)</span>ax1<span class="token operator">=</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">141</span><span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Sex <span class="token operator">==</span> <span class="token string">'female'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Pclass <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"female highclass"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#FA2479'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"Unsurvived"</span><span class="token punctuation">,</span> u<span class="token string">"Survived"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"FEMALE/RICH"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>ax2<span class="token operator">=</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">142</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span>ax1<span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Sex <span class="token operator">==</span> <span class="token string">'female'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Pclass <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'female, low class'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"Unsurvived"</span><span class="token punctuation">,</span> u<span class="token string">"Survived"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"FEMALE/POOR"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>ax3<span class="token operator">=</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">143</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span>ax1<span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Sex <span class="token operator">==</span> <span class="token string">'male'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Pclass <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'male, high class'</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'lightblue'</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"Unsurvived"</span><span class="token punctuation">,</span> u<span class="token string">"Survived"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"MAN/RICH"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>ax4<span class="token operator">=</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span>ax1<span class="token punctuation">)</span>data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Sex <span class="token operator">==</span> <span class="token string">'male'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Pclass <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'male low class'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'steelblue'</span><span class="token punctuation">)</span>ax4<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"Unsurvived"</span><span class="token punctuation">,</span> u<span class="token string">"Survived"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token string">"MAN/POOR"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#RICH/POOR只是为了好写，不排除有体验生活的富人在3等舱</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/03/14/AAb92R.png" alt="AAb92R.png"><br>然后我们看看各登船港口的获救情况</p><pre class=" language-python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设定图表颜色alpha参数</span>Survived_0 <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Embarked<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Survived <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>Survived_1 <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Embarked<span class="token punctuation">[</span>data_train<span class="token punctuation">.</span>Survived <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>u<span class="token string">'Unsurvived'</span><span class="token punctuation">:</span>Survived_0<span class="token punctuation">,</span>u<span class="token string">'Survived'</span><span class="token punctuation">:</span>Survived_1<span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"the Survived by Embarked"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">"Embarked"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"number"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/03/14/AESmi6.png" alt="AESmi6.png"><br>看看有没有堂兄弟/妹，孩子/父母，是否对获救有影响</p><pre class=" language-python"><code class="language-python">gg <span class="token operator">=</span> data_train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>gg<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>gp <span class="token operator">=</span> data_train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Parch'</span><span class="token punctuation">,</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>gp<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></code></pre><p>终端会输出</p><pre><code>                PassengerIdSibSp Survived0     0                 398      1                 2101     0                  97      1                 1122     0                  15      1                  133     0                  12      1                   44     0                  15      1                   35     0                   58     0                   7                PassengerIdParch Survived0     0                 445      1                 2331     0                  53      1                  652     0                  40      1                  403     0                   2      1                   34     0                   45     0                   4      1                   16     0                   1</code></pre><p>并没有很明显的规律，但也不能放弃这个特征，可以以后再考虑<br>最后来分析<code>tickets cabin</code>，ticket是船票编号，应该是unique的，和最后的结果没有太大的关系，先不纳入考虑的特征范畴<br>cabin只有204个乘客有值，我们先看看它的一个分布</p><pre class=" language-python"><code class="language-python">data_train<span class="token punctuation">.</span>Cabin<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>output：</p><pre><code>B96 B98        4C23 C25 C27    4G6             4F2             3E101           3D              3C22 C26        3F33            3B18            2D36            2C65            2D26            2D17            2C92            2F G73          2E24            2E33            2C93            2C68            2E121           2C123           2B22            2B49            2B20            2B5             2B28            2E25            2B77            2D35            2C78            2              ..E36            1C45            1C90            1C62 C64        1A26            1D9             1D19            1D46            1A5             1E38            1C46            1B82 B84        1B102           1C110           1E34            1T              1B101           1D48            1A36            1B37            1E17            1B42            1A6             1E46            1B39            1C30            1D15            1C86            1E12            1B3             1Name: Cabin, Length: 147, dtype: int64</code></pre><p>数据离散的程度很高，而且并不是每个乘客都有该属性记录缺失值多，不集中。如果直接按照类目特征处理的话，估计每个因子化后的特征都拿不到什么权重。加上有那么多缺失值，所以考虑先把Cabin缺失与否作为条件(虽然这部分信息缺失可能并非未登记，只是丢失了而已，所以这样做未必妥当)，先在有无Cabin信息这个粗粒度上看看Survived的情况好了。</p><pre class=" language-python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>set<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设定图表颜色alpha参数</span>Survived_cabin <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>pd<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>Cabin<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>Survived_nocabin <span class="token operator">=</span> data_train<span class="token punctuation">.</span>Survived<span class="token punctuation">[</span>pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>data_train<span class="token punctuation">.</span>Cabin<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>u<span class="token string">'YES'</span><span class="token punctuation">:</span>Survived_cabin<span class="token punctuation">,</span> u<span class="token string">'NO'</span><span class="token punctuation">:</span>Survived_nocabin<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">"the Survived by IfHaveCabin"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">"CabinYES/NO"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">"number"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/03/14/AESflF.png" alt="AESflF.png"><br>有Cabin记录的获救概率稍高一些，先放一放这个特征。</p><h5 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h5><p>通过前面的分析，我们对数据的大体情况也有了个底，下一步就是对数据进行预处理，为建模做好准备。</p><blockquote><p>数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。</p></blockquote><p>现在我们看一下数据集中到底是那些数据缺失比较严重</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> missingno <span class="token keyword">as</span> msno<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plttrain_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"/home/jason/Documents/ML/titanic/train.csv"</span><span class="token punctuation">)</span>msno<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>msno<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span></code></pre><p><img src="https://s2.ax1x.com/2019/03/19/AnaoxH.png" alt="AnaoxH.png"><br>从图中可以直观的看出缺失变量的程度。</p><p>在对缺失值进行处理前,我们先来了解一下数据缺失的几种类型:<br>将数据集中不含缺失值的变量称为完全变量，数据集中含有缺失值的变量称为不完全变量。而从缺失的分布来将缺失可以分为完全随机缺失，随机缺失和完全非随机缺失。</p><ul><li>完全随机缺失（missing completely at random,MCAR）：指的是数据的缺失是完全随机的，不依赖于任何不完全变量或完全变量，不影响样本的无偏性，如家庭地址缺失；</li><li>随机缺失(missing at random,MAR)：指的是数据的缺失不是完全随机的，即该类数据的缺失依赖于其他完全变量，如财务数据缺失情况与企业的大小有关；</li><li>非随机缺失(missing not at random,MNAR)：指的是数据的缺失与不完全变量自身的取值有关，如高收入人群不原意提供家庭收入；</li></ul><p>先从缺失值最高的两个属性<code>Cabin</code>和<code>Age</code>开始处理，对于Cabin，按Cabin有无数据，暂时将这个属性处理成Yes和No两种类型吧。然后对于<code>Age</code>，通常遇到缺值的情况，我们会有几种常见的处理方式：</p><ul><li>删除记录:如果缺值的样本占总数比例极高，我们可能就直接舍弃了，作为特征加入的话，可能反倒带入noise，影响最后的结果了</li><li>替换缺失值:如果缺值的样本适中，而该属性非连续值特征属性(比如说类目属性)，那就把NaN作为一个新类别，加到类别特征中</li><li>数据填补:如果缺值的样本适中，而该属性为连续值特征属性，有时候我们会考虑给定一个step(比如这里的age，我们可以考虑每隔2/3岁为一个步长)，然后把它离散化，之后把NaN作为一个type加到属性类目中。</li><li>数据填补:有些情况下，缺失的值个数并不是特别多，那我们也可以试着根据已有的值，拟合一下数据，补充上。</li></ul><p>本例中，后两种处理方式应该都是可行的，我们先使用拟合补全吧(虽然说没有特别多的背景可供我们拟合，这不一定是一个多么好的选择)。这里用scikit-learn中的RandomForest来拟合一下缺失的年龄数据(注：RandomForest是一个用在原始数据中做不同采样，建立多颗DecisionTree，再进行average等等来降低过拟合现象，提高结果的机器学习算法)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestRegressor<span class="token comment" spellcheck="true">### 使用 RandomForestClassifier 填补缺失的年龄属性</span><span class="token keyword">def</span> <span class="token function">set_missing_ages</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 把已有的数值型特征取出来丢进Random Forest Regressor中</span>    age_df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">,</span> <span class="token string">'Parch'</span><span class="token punctuation">,</span> <span class="token string">'SibSp'</span><span class="token punctuation">,</span> <span class="token string">'Pclass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 乘客分成已知年龄和未知年龄两部分</span>    known_age <span class="token operator">=</span> age_df<span class="token punctuation">[</span>age_df<span class="token punctuation">.</span>Age<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>as_matrix<span class="token punctuation">(</span><span class="token punctuation">)</span>    unknown_age <span class="token operator">=</span> age_df<span class="token punctuation">[</span>age_df<span class="token punctuation">.</span>Age<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>as_matrix<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># y即目标年龄</span>    y <span class="token operator">=</span> known_age<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># X即特征属性值</span>    X <span class="token operator">=</span> known_age<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># fit到RandomForestRegressor之中</span>    rfr <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    rfr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用得到的模型进行未知年龄结果预测</span>    predictedAges <span class="token operator">=</span> rfr<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>unknown_age<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用得到的预测结果填补原缺失数据</span>    df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>Age<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Age'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> predictedAges    <span class="token keyword">return</span> df<span class="token punctuation">,</span> rfr<span class="token keyword">def</span> <span class="token function">set_Cabin_type</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>Cabin<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Yes"</span>    df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>Cabin<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"No"</span>    <span class="token keyword">return</span> dfdata_train<span class="token punctuation">,</span> rfr <span class="token operator">=</span> set_missing_ages<span class="token punctuation">(</span>data_train<span class="token punctuation">)</span>data_train <span class="token operator">=</span> set_Cabin_type<span class="token punctuation">(</span>data_train<span class="token punctuation">)</span>data_train</code></pre><p>output:</p><pre><code></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.kesci.com/home/project/5bfe39b3954d6e0010681cd1" target="_blank" rel="noopener">Kaggle入门：逻辑回归应用之Kaggle泰坦尼克之灾</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Kaggle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代编译原理-C语言描述》虎书</title>
      <link href="/2019/03/03/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-hu-shu/"/>
      <url>/2019/03/03/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-hu-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="http://jinzhnegxu.online/2019/02/28/《现代编译原理-C语言描述》（1）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（1）- 绪论</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/03/14/现代编译原理-C语言描述》（2）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（2）- 词法分析</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（3）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（3）- 语法分析</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/09/现代编译原理-C语言描述》（4）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（4）- 抽象语法</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/05/06/现代编译原理-C语言描述》（5）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（5）- 语义分析</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（6）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（6）- 活动记录</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（7）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（7）- 翻译成中间代码</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（8）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（8）- 基本块和轨迹</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（9）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（9）- 指令选择</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（10）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（10）- 活跃分析</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（11）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（11）- 寄存器分配</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/04/01/现代编译原理-C语言描述》（12）/" target="_blank" rel="noopener">《现代编译原理—C语言描述》学习笔记（12）- 整合为一体</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《现代编译原理-C语言描述》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《编译原理》龙书第四版</title>
      <link href="/2019/03/03/bian-yi-yuan-li-long-shu-di-si-ban/"/>
      <url>/2019/03/03/bian-yi-yuan-li-long-shu-di-si-ban/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（1）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li><li><p><a href="http://jinzhnegxu.online/2019/02/27/《编译原理》学习笔记第一章/" target="_blank" rel="noopener">《编译原理》学习笔记（2）-</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代编译原理--C语言描述》(1) - 绪论</title>
      <link href="/2019/02/28/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-1/"/>
      <url>/2019/02/28/xian-dai-bian-yi-yuan-li-c-yu-yan-miao-shu-1/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>这是我们的开端，这里我们要实现一个小型的直线式程序解释器。</p><h3 id="1-1模块与接口"><a href="#1-1模块与接口" class="headerlink" title="1.1模块与接口"></a>1.1模块与接口</h3><p>通过了解编译器的模块和接口我们可以更容易理解编译器系统的实现。一个典型编译器的各个阶段都通过一到多个软件接口来实现。</p><p>将编译器分解为多个模块是为了能够重用各个模块，在之前龙书中提到，一个前端可以对饮多个后端来实现针对不同的目标机的机器语言编译，反之亦成立。例如当要改变当前目标机时，只要改变栈帧布局（Frame Layout）和指令选择（Instruction selection）模块就可以了；改变源语言时只要改变翻译模块之前的模块就可以了，该编译器也可以再抽象语法（Abstract Syntax）接口处与面向语言的语法编辑器相连。</p><p>编译器的各个阶段及其接口：</p><pre><code>源程序-&gt;词法分析-&gt;单词符号-&gt;语法分析-&gt;归约-&gt;语义动作-&gt;抽象语法-&gt;语义分析&lt;-表&lt;-环境-&gt;转换-&gt;翻译&lt;-帧&lt;-栈帧布局-&gt;IR树-&gt;规范化-&gt;IR树-&gt;指令选择-&gt;汇编-&gt;控制流分析-&gt;流图-&gt;数据流分析-&gt;冲突图-&gt;寄存器分配-&gt;寄存器指派-&gt;代码流出-&gt;汇编语言-&gt;汇编器-&gt;可重定位代码-&gt;连接器-&gt;机器语言</code></pre><p>编译器的各阶段:</p><table><thead><tr><th align="center">阶段</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">词法分析</td><td align="center">将源文件分解为一个个单词符号tocken</td></tr><tr><td align="center">语法分析</td><td align="center">分解程序的短语结构</td></tr><tr><td align="center">语义动作</td><td align="center">建立每个短语对应的抽象语法树</td></tr><tr><td align="center">语义分析</td><td align="center">确定每个短语的含义,建立变量和声明的关联,检查表达式的类型,翻译每个短语</td></tr><tr><td align="center">栈帧布局</td><td align="center">按机器要求的方式将变量,函数参数分配于活跃记录(即栈帧)内</td></tr><tr><td align="center">翻译</td><td align="center">生成中间表示树(IR树),这是一种与任意程序设计语言和目标机体系结构无关的表示</td></tr><tr><td align="center">规范化</td><td align="center">提取表达式中的副作用,整理条件分支,方便下一阶段的处理</td></tr><tr><td align="center">指令选择</td><td align="center">将IR树节点组合成与目标机指令的动作相对应的块</td></tr><tr><td align="center">控制流分析</td><td align="center">分析指令的顺序并建立控制流图,以此图表示程序执行是所有可能流经的所有控制流</td></tr><tr><td align="center">数据流分析</td><td align="center">收集程序变量的数据流信息,例如活跃分析(liveness analysis)计算每一个变量仍需使用其值的地点(即它的活跃点)</td></tr><tr><td align="center">寄存器分配</td><td align="center">为程序中的每一个变量好临时数据选择一个寄存器,不在同一时间活跃的两个变量可以共享同一个寄存器</td></tr><tr><td align="center">代码流出</td><td align="center">用机器寄存器替代每一条指令中出现的临时变量名</td></tr><tr><td align="center">### 1.2工具和软件</td><td align="center"></td></tr><tr><td align="center">上下文无关文法(context-free grammar)</td><td align="center"></td></tr></tbody></table><p>正则表达式(regular expression)</p><p>Yacc(or Bison)</p><p>Lex(or <a href="https://www.gnu.org/prep/ftp" target="_blank" rel="noopener">Flex</a>)<a href="https://github.com/westes/flex/releases" target="_blank" rel="noopener">github</a></p><p>没有版本强迫症的可以直接在Ubuntu下输入:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> flex bison</code></pre><p>当然要从源码编译也可以…</p><h3 id="树语言的数据结构"><a href="#树语言的数据结构" class="headerlink" title="树语言的数据结构"></a>树语言的数据结构</h3><p>  接着我们来分析书中的程序1.1，在绪论中有提到每个Stm是一个语句而每个Exp是一个表达式,所以程序1.1中只有三种语句分别是<code>A_CompoundStm(复合语句)</code>,<code>A_AssignStm(赋值语句)</code>和<code>A_PrintStm(输出语句)</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_stm_ <span class="token operator">*</span>A_stm<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_exp_ <span class="token operator">*</span>A_exp<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A_expList_ <span class="token operator">*</span>A_expList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>A_plus<span class="token punctuation">,</span>A_minus<span class="token punctuation">,</span>A_times<span class="token punctuation">,</span>A_div<span class="token punctuation">}</span> A_binop<span class="token punctuation">;</span><span class="token keyword">struct</span> A_stm_ <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>A_compoundStm<span class="token punctuation">,</span> A_assignStm<span class="token punctuation">,</span> A_printStm<span class="token punctuation">}</span> kind<span class="token punctuation">;</span>             <span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>A_stm stm1<span class="token punctuation">,</span> stm2<span class="token punctuation">;</span><span class="token punctuation">}</span> compound<span class="token punctuation">;</span>                    <span class="token keyword">struct</span> <span class="token punctuation">{</span>string id<span class="token punctuation">;</span> A_exp exp<span class="token punctuation">;</span><span class="token punctuation">}</span> assign<span class="token punctuation">;</span>                    <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_expList exps<span class="token punctuation">;</span><span class="token punctuation">}</span> print<span class="token punctuation">;</span>                   <span class="token punctuation">}</span> u<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>A_stm <span class="token function">A_CompoundStm</span><span class="token punctuation">(</span>A_stm stm1<span class="token punctuation">,</span> A_stm stm2<span class="token punctuation">)</span><span class="token punctuation">;</span>A_stm <span class="token function">A_AssignStm</span><span class="token punctuation">(</span>string id<span class="token punctuation">,</span> A_exp exp<span class="token punctuation">)</span><span class="token punctuation">;</span>A_stm <span class="token function">A_PrintStm</span><span class="token punctuation">(</span>A_expList exps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以上为Stm</span><span class="token keyword">struct</span> A_exp_ <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>A_idExp<span class="token punctuation">,</span> A_numExp<span class="token punctuation">,</span> A_opExp<span class="token punctuation">,</span> A_eseqExp<span class="token punctuation">}</span> kind<span class="token punctuation">;</span>             <span class="token keyword">union</span> <span class="token punctuation">{</span>string id<span class="token punctuation">;</span>                    <span class="token keyword">int</span> num<span class="token punctuation">;</span>                    <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_exp left<span class="token punctuation">;</span> A_binop oper<span class="token punctuation">;</span> A_exp right<span class="token punctuation">;</span><span class="token punctuation">}</span> op<span class="token punctuation">;</span>                    <span class="token keyword">struct</span> <span class="token punctuation">{</span>A_stm stm<span class="token punctuation">;</span> A_exp exp<span class="token punctuation">;</span><span class="token punctuation">}</span> eseq<span class="token punctuation">;</span>                   <span class="token punctuation">}</span> u<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>A_exp <span class="token function">A_IdExp</span><span class="token punctuation">(</span>string id<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_OpExp</span><span class="token punctuation">(</span>A_exp left<span class="token punctuation">,</span> A_binop oper<span class="token punctuation">,</span> A_exp right<span class="token punctuation">)</span><span class="token punctuation">;</span>A_exp <span class="token function">A_EseqExp</span><span class="token punctuation">(</span>A_stm stm<span class="token punctuation">,</span> A_exp exp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以上为Exp</span><span class="token keyword">struct</span> A_expList_ <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>A_pairExpList<span class="token punctuation">,</span> A_lastExpList<span class="token punctuation">}</span> kind<span class="token punctuation">;</span>                   <span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>A_exp head<span class="token punctuation">;</span> A_expList tail<span class="token punctuation">;</span><span class="token punctuation">}</span> pair<span class="token punctuation">;</span>                          A_exp last<span class="token punctuation">;</span>                         <span class="token punctuation">}</span> u<span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">;</span>A_expList <span class="token function">A_PairExpList</span><span class="token punctuation">(</span>A_exp head<span class="token punctuation">,</span> A_expList tail<span class="token punctuation">)</span><span class="token punctuation">;</span>A_expList <span class="token function">A_LastExpList</span><span class="token punctuation">(</span>A_exp last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以上为ExpList</span></code></pre><p>每一个<code>文法规则</code>都有一个构造器，隶属于规则左部符号的联合（union）。</p><h4 id="程序设计：直线式程序解释器"><a href="#程序设计：直线式程序解释器" class="headerlink" title="程序设计：直线式程序解释器"></a>程序设计：直线式程序解释器</h4><p>入门练习</p><pre><code>环境(即符号表,它将变量名映射到这些变量相关的信息)抽象语法(表示程序的短语结构的数据结构)树数据结构的递归性无赋值语句的函数式风格程序设计</code></pre><p>虎书真的是猛啊,第一章的<code>入门练习</code>的实践性就这么强,直接要求读者自己根据绪论中的语法规则设计一个直线型程序解释器,我反复看了几遍才确信他就是让我这样去做,笑哭。人家作者都要求了,那咱就只能跟着做了。</p><p>(1)写一个函数<code>int maxargs(A_stm)</code>告知给定语句中任意子表达式内的print语句的参数个数,例如<code>maxargs(prog)=2</code><br>prog:</p><pre class=" language-c"><code class="language-c">A_stm <span class="token function">prog</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">A_CompoundStm</span><span class="token punctuation">(</span><span class="token function">A_AssignStm</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>                 <span class="token function">A_OpExp</span><span class="token punctuation">(</span><span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A_plus<span class="token punctuation">,</span> <span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">A_CompoundStm</span><span class="token punctuation">(</span><span class="token function">A_AssignStm</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>      <span class="token function">A_EseqExp</span><span class="token punctuation">(</span><span class="token function">A_PrintStm</span><span class="token punctuation">(</span><span class="token function">A_PairExpList</span><span class="token punctuation">(</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token function">A_LastExpList</span><span class="token punctuation">(</span><span class="token function">A_OpExp</span><span class="token punctuation">(</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A_minus<span class="token punctuation">,</span>                                       <span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">A_OpExp</span><span class="token punctuation">(</span><span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A_times<span class="token punctuation">,</span> <span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">A_PrintStm</span><span class="token punctuation">(</span><span class="token function">A_LastExpList</span><span class="token punctuation">(</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先来了解一下宏语句<code>#ifdef</code>和<code>#else</code>还有<code>#endif</code>这是一组条件编译语句。条件编译命令最常见的形式为：</p><pre><code> #ifdef 标识符  程序段1  #else  程序段2  #endif</code></pre><p>它的作用是：当标识符已经被定义过(一般是用<code>#define</code>命令定义)，则对程序段1进行编译，否则编译程序段2。其中<code>#else</code>部分也可以没有，即：</p><pre class=" language-c"><code class="language-c">  <span class="token macro property">#<span class="token directive keyword">ifdef</span></span>  程序段<span class="token number">1</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>  这里的“程序段”可以是语句组，也可以是命令行。这种条件编译可以提高C源程序的通用性。如果一个C源程序在不同计算机系统上系统上运行，而不同的计算机又有一定的差异。例如，我们有一个数据类型，在Windows平台中，应该使用long类型表示，而在其他平台应该使用float表示，这样往往需要对源程序作必要的修改，这就降低了程序的通用性。可以用以下的条件编译：</p><pre class=" language-c"><code class="language-c">  <span class="token macro property">#<span class="token directive keyword">ifdef</span> WINDOWS</span>  <span class="token macro property">#<span class="token directive keyword">define</span> MYTYPE long</span>  <span class="token macro property">#<span class="token directive keyword">else</span></span>  <span class="token macro property">#<span class="token directive keyword">define</span> MYTYPE float</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>  如果在Windows上编译程序，则可以在程序的开始加上</p><pre class=" language-c"><code class="language-c">  <span class="token macro property">#<span class="token directive keyword">define</span> WINDOWS</span></code></pre><p>  这样则编译下面的命令行：</p><pre class=" language-c"><code class="language-c">  <span class="token macro property">#<span class="token directive keyword">define</span> MYTYPE long</span></code></pre><p>  如果在这组条件编译命令之前曾出现以下命令行：</p><pre class=" language-c"><code class="language-c">  <span class="token macro property">#<span class="token directive keyword">define</span> WINDOWS 0</span></code></pre><p>  则预编译后程序中的MYTYPE都用float代替。这样，源程序可以不必作任何修改就可以用于不同类型的计算机系统。当然以上介绍的只是一种简单的情况，可以根据此思路设计出其它的条件编译。</p><p>回顾我们刚刚分析的程序1.1,其中有三种类型Stm,Exp和ExpList,<br>自然而然我们要对这三种情况分开判断,然后针对每一种类型的不同语句和构造器再分别判断。<br>这第一道题还是比较简单的就是一个大模拟。</p><p>好吧收回刚刚的话:-)，这第一个遇到的问题是头文件的引用重复，这样会使GCC编译出错，这里建议大家按照一定的规范来引用头文件，我是根据<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/" target="_blank" rel="noopener">Google C++ Style</a>的风格。</p><p>然后遇到的问题是<code>Undefined reference to</code>的问题，这个问题的原因有三种：</p><ul><li>链接时缺失了相关目标文件（.o）</li><li>链接时缺少相关的库文件（.a/.so）</li><li>链接的库文件中又使用了另一个库文件</li><li>多个库文件链接顺序问题</li><li>在C++代码代码中链接C语言的库</li></ul><p> 很多时候错误非常隐蔽，因此，我们需要注意，在链接命令中给出所依赖的库时，需要注意库之间的依赖顺序，依赖其他库的库一定要放到被依赖库的前面，这样才能真正避免undefined reference的错误，完成编译链接。</p><p> 回到题目本身，要求语句中print语句的参数个数，回顾<code>slp.h</code>文件，每个文法结构都有一个<code>union</code>域和<code>kind</code>域，通过这两个域我们可以确定是哪一个语句，并对当前的语句求出参数个数或者进行进一步的处理。</p><p> 在<code>mian.c</code>中编写我们的程序</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span> <span class="token macro property">#inlcude &lt;util.h></span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;slp.h></span></span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;prog.h></span></span> <span class="token comment" spellcheck="true">//注意头文件的引用顺序,先引用库文件再引用自己编写的文件</span><span class="token keyword">int</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>A_stm prog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">maxargsexp</span><span class="token punctuation">(</span>A_exp exp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_eseqExp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind<span class="token operator">==</span>A_opExp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token operator">+</span>right<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//maxargs函数计算exp类型的参数个数</span><span class="token keyword">int</span> <span class="token function">exp_helper</span><span class="token punctuation">(</span>A_expList list<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>kind <span class="token operator">==</span> A_lastExpList<span class="token punctuation">)</span><span class="token punctuation">{</span>                A_exp exp <span class="token operator">=</span> list<span class="token operator">-></span>u<span class="token punctuation">.</span>last<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_idExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_numExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_opExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_eseqExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxargs</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>list<span class="token operator">-></span>u<span class="token punctuation">.</span>pair<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">exp_helper</span><span class="token punctuation">(</span>list<span class="token operator">-></span>u<span class="token punctuation">.</span>pair<span class="token punctuation">.</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//帮助maxargs函数求print语句的值</span><span class="token keyword">int</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>A_stm prog<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>prog<span class="token operator">-></span>kind<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> A_compoundStm <span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>prog<span class="token operator">-></span>u<span class="token punctuation">.</span>compound<span class="token punctuation">.</span>stm1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>prog<span class="token operator">-></span>u<span class="token punctuation">.</span>compound<span class="token punctuation">.</span>stm2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> left<span class="token operator">+</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> A_assignStm<span class="token punctuation">:</span><span class="token punctuation">{</span>            A_exp exp <span class="token operator">=</span> prog<span class="token operator">-></span>u<span class="token punctuation">.</span>assign<span class="token punctuation">.</span>exp<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_eseqExp<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_opExp<span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> left<span class="token operator">+</span>right<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> A_printStm<span class="token punctuation">:</span><span class="token punctuation">{</span>            A_expList list <span class="token operator">=</span> prog<span class="token operator">-></span>u<span class="token punctuation">.</span>print<span class="token punctuation">.</span>exps<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">exp_helper</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//针对语句的maxargs</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> Prog Section:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A_stm rp <span class="token operator">=</span> <span class="token function">prog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the maximum number of arguments of any print statement is %d\n"</span><span class="token punctuation">,</span><span class="token function">maxargs</span><span class="token punctuation">(</span>rp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 这里特别要注意的是题目中要求我们求所有print语句的参数个数,而print语句的参数中可能还包含print语句,在这里我假定一个包含print语句的参数算一个参数。</p><p> 输入完成后打开Terminal输入</p><pre class=" language-bash"><code class="language-bash"> $ <span class="token function">make</span> clean $ <span class="token function">make</span> a.out $ ./a.out</code></pre><p> 输出:</p><pre><code> &gt;&gt; Prog Section:the maximum number of arguments of any print statement is 2</code></pre><p> （2）写一个函数<code>void interp(A_stm)</code>，对一个用这种直线式程序语言写的程序进行“解释”。为了用“函数式程序设计”风格来编写该函数（这种风格不使用赋值语句），要在声明局部变量的同时<br>对它进行初始化。</p><p>首先将id×int表的声明加入<code>slp.h</code>中</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> table <span class="token operator">*</span>Table_<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> IntAndTable <span class="token operator">*</span>iTable_<span class="token punctuation">;</span><span class="token keyword">struct</span> table <span class="token punctuation">{</span>string id<span class="token punctuation">;</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span> Table_ tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Table_ <span class="token function">Table</span><span class="token punctuation">(</span>string id<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">,</span><span class="token keyword">struct</span> table <span class="token operator">*</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> IntAndTable <span class="token punctuation">{</span><span class="token keyword">int</span> value<span class="token punctuation">;</span> Table_ t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>iTable_ <span class="token function">iTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> Table_ t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后将实现加入<code>slp.c</code>中,并模仿Table写出iTable的实现</p><pre class=" language-c"><code class="language-c">Table_ <span class="token function">Table</span><span class="token punctuation">(</span>string id<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">,</span><span class="token keyword">struct</span> table <span class="token operator">*</span>tail<span class="token punctuation">)</span><span class="token punctuation">{</span>  Table_ t <span class="token operator">=</span> <span class="token function">check_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token operator">-></span>id<span class="token operator">=</span>id<span class="token punctuation">;</span> t<span class="token operator">-></span>value<span class="token operator">=</span>value<span class="token punctuation">;</span> t<span class="token operator">-></span>tail<span class="token operator">=</span>tail<span class="token punctuation">;</span>  <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>iTable_ <span class="token function">iTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> Table_ t<span class="token punctuation">)</span><span class="token punctuation">{</span>    iTable_ it <span class="token operator">=</span> <span class="token function">checked_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    it<span class="token operator">-></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> it<span class="token operator">-></span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> it<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样我们有了链表的结构,下一步要做的就是根据<code>Table</code>和<code>iTable</code>分别解释语句和表达式。在<code>slp.c</code>中只有<code>A_PrintStm</code>语句能够打印出内容，是唯一的副作用。链表中记录的是赋值映射，且靠表头的node中储存的映射优先级高于链表靠表尾的node，这样就保证了，映射关系的唯一性，我们所要做的工作就是将id和num的对应关系做好，并且在执行时输出正确的答案。同时还要考虑程序的鲁棒性，假设我们的代码针对语句完全合乎语法规则的时候是正确的，但是如果用户输入的语句并不是完全正确呢，我们的程序要能判断这种情况判断出这种情况。并输出</p><pre class=" language-gcc"><code class="language-gcc">In statement ‘A_xxxx’error: Identifier %s does not exist!</code></pre><p>main.c:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"slp.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"prog1.h"</span></span><span class="token comment" spellcheck="true">//注意头文件引用顺序</span><span class="token keyword">int</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>A_stm prog<span class="token punctuation">)</span><span class="token punctuation">;</span>Table_ <span class="token function">interpExpList</span><span class="token punctuation">(</span>A_expList<span class="token punctuation">,</span> Table_<span class="token punctuation">)</span><span class="token punctuation">;</span>Table_ <span class="token function">interpStm</span><span class="token punctuation">(</span>A_stm<span class="token punctuation">,</span> Table_<span class="token punctuation">)</span><span class="token punctuation">;</span>iTable_ <span class="token function">interpExp</span><span class="token punctuation">(</span>A_exp<span class="token punctuation">,</span> Table_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义解释函数，使用函数式风格，不使用赋值语句，在定义时就对变量进行初始化</span><span class="token keyword">int</span> ID_VALID <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ID_VALID变量判断当前的id名是否有效,这个变量是否声明过</span><span class="token keyword">int</span> <span class="token function">maxargsexp</span><span class="token punctuation">(</span>A_exp exp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_eseqExp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind<span class="token operator">==</span>A_opExp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token operator">+</span>right<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">exp_helper</span><span class="token punctuation">(</span>A_expList list<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>kind <span class="token operator">==</span> A_lastExpList<span class="token punctuation">)</span><span class="token punctuation">{</span>    A_exp exp <span class="token operator">=</span> list<span class="token operator">-></span>u<span class="token punctuation">.</span>last<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_idExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_numExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_opExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_eseqExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxargs</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>list<span class="token operator">-></span>u<span class="token punctuation">.</span>pair<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">exp_helper</span><span class="token punctuation">(</span>list<span class="token operator">-></span>u<span class="token punctuation">.</span>pair<span class="token punctuation">.</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>A_stm prog<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>prog<span class="token operator">-></span>kind<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> A_compoundStm <span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>prog<span class="token operator">-></span>u<span class="token punctuation">.</span>compound<span class="token punctuation">.</span>stm1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>prog<span class="token operator">-></span>u<span class="token punctuation">.</span>compound<span class="token punctuation">.</span>stm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token operator">+</span>right<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">case</span> A_assignStm<span class="token punctuation">:</span><span class="token punctuation">{</span>    A_exp exp <span class="token operator">=</span> prog<span class="token operator">-></span>u<span class="token punctuation">.</span>assign<span class="token punctuation">.</span>exp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_eseqExp<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">maxargs</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>kind <span class="token operator">==</span> A_opExp<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token function">maxargsexp</span><span class="token punctuation">(</span>exp<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> left<span class="token operator">+</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">case</span> A_printStm<span class="token punctuation">:</span><span class="token punctuation">{</span>    A_expList list <span class="token operator">=</span> prog<span class="token operator">-></span>u<span class="token punctuation">.</span>print<span class="token punctuation">.</span>exps<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">exp_helper</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lookup</span><span class="token punctuation">(</span>Table_ t<span class="token punctuation">,</span> string id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>id <span class="token operator">!=</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> t<span class="token operator">-></span>tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//当t不为空且id名符合时结束</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token operator">-></span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//t不为空时,返回t的值</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        ID_VALID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果t为空证明表中不存在这个变量,原语句出错</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//lookup函数实现在链表中查找优先级最高的node</span>Table_ <span class="token function">update</span><span class="token punctuation">(</span>Table_ t<span class="token punctuation">,</span> string id<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Table</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> value<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//update函数实现链表的更新,在表头插入新的节点</span>Table_ <span class="token function">interpStm</span><span class="token punctuation">(</span>A_stm s<span class="token punctuation">,</span> Table_ t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> A_compoundStm<span class="token punctuation">:</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">interpStm</span><span class="token punctuation">(</span>s<span class="token operator">-></span>u<span class="token punctuation">.</span>compound<span class="token punctuation">.</span>stm1<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token function">interpStm</span><span class="token punctuation">(</span>s<span class="token operator">-></span>u<span class="token punctuation">.</span>compound<span class="token punctuation">.</span>stm2<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对复合语句递归调用interpStm</span>        <span class="token keyword">case</span> A_assignStm<span class="token punctuation">:</span><span class="token punctuation">{</span>            iTable_ it <span class="token operator">=</span> <span class="token function">interpExp</span><span class="token punctuation">(</span>s<span class="token operator">-></span>u<span class="token punctuation">.</span>assign<span class="token punctuation">.</span>exp<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//新建一个表达式node并初始化</span>            t <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>it<span class="token operator">-></span>t<span class="token punctuation">,</span> s<span class="token operator">-></span>u<span class="token punctuation">.</span>assign<span class="token punctuation">.</span>id<span class="token punctuation">,</span> it<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//在表头加入该node</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> A_printStm<span class="token punctuation">:</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">interpExpList</span><span class="token punctuation">(</span>s<span class="token operator">-></span>u<span class="token punctuation">.</span>print<span class="token punctuation">.</span>exps<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//interpStm函数对语句解释</span>iTable_ <span class="token function">interpExp</span><span class="token punctuation">(</span>A_exp e<span class="token punctuation">,</span> Table_ t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>kind<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> A_idExp<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token operator">-></span>u<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ID_VALID<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In statement A_idExp\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error: Identifier %s does not exist!\n"</span><span class="token punctuation">,</span> e<span class="token operator">-></span>u<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                ID_VALID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果未在链表中找到变量,报错</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">iTable</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果找到变量则返回一个表达式node</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> A_numExp<span class="token punctuation">:</span><span class="token punctuation">{</span>            iTable_ it <span class="token operator">=</span> <span class="token function">iTable</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>num<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> it<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> A_opExp<span class="token punctuation">:</span><span class="token punctuation">{</span>            iTable_ left <span class="token operator">=</span> <span class="token function">interpExp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            iTable_ right <span class="token operator">=</span> <span class="token function">interpExp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>op<span class="token punctuation">.</span>oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> A_plus<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token function">iTable</span><span class="token punctuation">(</span>left<span class="token operator">-></span>value <span class="token operator">+</span> right<span class="token operator">-></span>value<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> A_minus<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token function">iTable</span><span class="token punctuation">(</span>left<span class="token operator">-></span>value <span class="token operator">-</span> right<span class="token operator">-></span>value<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> A_times<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token function">iTable</span><span class="token punctuation">(</span>left<span class="token operator">-></span>value <span class="token operator">*</span> right<span class="token operator">-></span>value<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> A_div<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token function">iTable</span><span class="token punctuation">(</span>left<span class="token operator">-></span>value <span class="token operator">/</span> right<span class="token operator">-></span>value<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> A_eseqExp<span class="token punctuation">:</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">interpStm</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>stm<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            iTable_ it <span class="token operator">=</span> <span class="token function">interpExp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>eseq<span class="token punctuation">.</span>exp<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> it<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//interExp对表达式进行解释</span>Table_ <span class="token function">interpExpList</span><span class="token punctuation">(</span>A_expList e<span class="token punctuation">,</span> Table_ t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//只有print语句中会有explist型参数,所以我们要打印所有参数</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> A_pairExpList<span class="token punctuation">:</span><span class="token punctuation">{</span>            iTable_ it <span class="token operator">=</span> <span class="token function">interpExp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>pair<span class="token punctuation">.</span>head<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//对当前表达式求值</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> it<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//打印结果</span>            t <span class="token operator">=</span> <span class="token function">interpExpList</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>pair<span class="token punctuation">.</span>tail<span class="token punctuation">,</span> it<span class="token operator">-></span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//继续对剩下的explist递归调用interExpList</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> A_lastExpList<span class="token punctuation">:</span><span class="token punctuation">{</span>            iTable_ it <span class="token operator">=</span> <span class="token function">interpExp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>u<span class="token punctuation">.</span>last<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> it<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> it<span class="token operator">-></span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//interpExpList处理ExpList的情况</span><span class="token keyword">void</span> <span class="token function">interp</span><span class="token punctuation">(</span>A_stm prog<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">interpStm</span><span class="token punctuation">(</span>prog<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> Right Prog Section:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  A_stm rp <span class="token operator">=</span> <span class="token function">right_prog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the maximum number of arguments of any print statement is %d\n"</span><span class="token punctuation">,</span><span class="token function">maxargs</span><span class="token punctuation">(</span>rp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">interp</span><span class="token punctuation">(</span>rp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> Error Prog Section:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  A_stm ep <span class="token operator">=</span> <span class="token function">error_prog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the maximum number of arguments of any print statement is %d\n"</span><span class="token punctuation">,</span><span class="token function">maxargs</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">interp</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>prog1.h</p><pre class=" language-c"><code class="language-c">A_stm <span class="token function">prog</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A_stm <span class="token function">right_prog</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A_stm <span class="token function">error_prog</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>prog1.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"slp.h"</span></span>A_stm <span class="token function">prog</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// a = 5 + 3;</span><span class="token comment" spellcheck="true">// b = (print(a, a-1), 10*a);</span><span class="token comment" spellcheck="true">// print b;</span><span class="token keyword">return</span> <span class="token function">A_CompoundStm</span><span class="token punctuation">(</span><span class="token function">A_AssignStm</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>                 <span class="token function">A_OpExp</span><span class="token punctuation">(</span><span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A_plus<span class="token punctuation">,</span> <span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">A_CompoundStm</span><span class="token punctuation">(</span><span class="token function">A_AssignStm</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>      <span class="token function">A_EseqExp</span><span class="token punctuation">(</span><span class="token function">A_PrintStm</span><span class="token punctuation">(</span><span class="token function">A_PairExpList</span><span class="token punctuation">(</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token function">A_LastExpList</span><span class="token punctuation">(</span><span class="token function">A_OpExp</span><span class="token punctuation">(</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A_minus<span class="token punctuation">,</span>                                       <span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">A_OpExp</span><span class="token punctuation">(</span><span class="token function">A_NumExp</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A_times<span class="token punctuation">,</span> <span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">A_PrintStm</span><span class="token punctuation">(</span><span class="token function">A_LastExpList</span><span class="token punctuation">(</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>A_stm <span class="token function">right_prog</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// a = 5 + 3;</span><span class="token comment" spellcheck="true">// b = (print(a, a-1), 10*a);</span><span class="token comment" spellcheck="true">// print b;</span><span class="token comment" spellcheck="true">// a = (a = a+b, a);</span>     A_stm stm1 <span class="token operator">=</span> <span class="token function">prog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span>         <span class="token function">A_CompoundStm</span><span class="token punctuation">(</span> stm1<span class="token punctuation">,</span> <span class="token function">A_AssignStm</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>      <span class="token function">A_EseqExp</span><span class="token punctuation">(</span><span class="token function">A_AssignStm</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token function">A_OpExp</span><span class="token punctuation">(</span><span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A_plus<span class="token punctuation">,</span> <span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>A_stm <span class="token function">error_prog</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// a = 5 + 3;</span><span class="token comment" spellcheck="true">// b = (print(a, a-1), 10*a);</span><span class="token comment" spellcheck="true">// print b;</span><span class="token comment" spellcheck="true">// a = c;</span>     A_stm stm1 <span class="token operator">=</span> <span class="token function">prog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span>         <span class="token function">A_CompoundStm</span><span class="token punctuation">(</span> stm1<span class="token punctuation">,</span> <span class="token function">A_AssignStm</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token function">A_IdExp</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre><code>&gt;&gt; Right Prog Section:the maximum number of arguments of any print statement is 38 780&gt;&gt; Error Prog Section:the maximum number of arguments of any print statement is 38 780In statement A_idExperror: Identifier c does not exist!</code></pre><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><h4 id="1-1a"><a href="#1-1a" class="headerlink" title="1.1a"></a>1.1a</h4><p> 即二叉树的查找</p><p>tree.h</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tree <span class="token operator">*</span>T_tree<span class="token punctuation">;</span><span class="token keyword">struct</span> tree <span class="token punctuation">{</span>T_tree left<span class="token punctuation">;</span> string key<span class="token punctuation">;</span>T_tree right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>T_tree <span class="token function">Tree</span><span class="token punctuation">(</span>T_tree l<span class="token punctuation">,</span> string k<span class="token punctuation">,</span>T_tree r<span class="token punctuation">)</span><span class="token punctuation">;</span>T_tree <span class="token function">insert</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span>T_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">member</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> tree.c</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tree.h"</span></span>T_tree <span class="token function">Tree</span><span class="token punctuation">(</span>T_tree l<span class="token punctuation">,</span> string k<span class="token punctuation">,</span>T_tree r<span class="token punctuation">)</span><span class="token punctuation">{</span>  T_tree t <span class="token operator">=</span> <span class="token function">checked_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token operator">-></span>left<span class="token operator">=</span>l<span class="token punctuation">;</span> t<span class="token operator">-></span>key<span class="token operator">=</span>k<span class="token punctuation">;</span> t<span class="token operator">-></span>right<span class="token operator">=</span>r<span class="token punctuation">;</span>  <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>T_tree <span class="token function">insert</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span>T_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">,</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">,</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">member</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">member</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">member</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>test_tree.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tree.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  T_tree t1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The tree tspipfbst has element:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  string element<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">member</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  T_tree t2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  t2 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>makefile:</p><pre class=" language-makefile"><code class="language-makefile"><span class="token symbol">a.out</span><span class="token punctuation">:</span> main.o prog1.o slp.o util.o    cc -g main.o prog1.o slp.o util.o<span class="token symbol">b.out</span><span class="token punctuation">:</span> test_tree.o util.o tree.o    cc -g test_tree.o util.o tree.o -o b<span class="token symbol">test_tree.o</span><span class="token punctuation">:</span> test_tree.c tree.h util.h    cc -g -c test_tree.c<span class="token symbol">tree.o</span><span class="token punctuation">:</span> tree.c tree.h util.h    cc -g -c tree.c<span class="token symbol">main.o</span><span class="token punctuation">:</span> main.c slp.h util.h    cc -g -c main.c<span class="token symbol">prog1.o</span><span class="token punctuation">:</span> prog1.c slp.h util.h    cc -g -c prog1.c<span class="token symbol">slp.o</span><span class="token punctuation">:</span> slp.c slp.h util.h    cc -g -c slp.c<span class="token symbol">util.o</span><span class="token punctuation">:</span> util.c util.h    cc -g -c util.c<span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f a.out util.o prog1.o slp.o main.o tree.o</code></pre><h4 id="1-1b"><a href="#1-1b" class="headerlink" title="1.1b"></a>1.1b</h4><p> 题目的意思是二叉树的node不再是普通的字符串,而是一个pair,同时我们要通过lookup函数使得到的键值对是唯一的(一一对应)。</p><p> binding.h</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tree <span class="token operator">*</span>T_tree<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> binding <span class="token operator">*</span>T_binding<span class="token punctuation">;</span><span class="token keyword">struct</span> binding <span class="token punctuation">{</span>string key<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>T_binding <span class="token function">Binding</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> tree <span class="token punctuation">{</span>T_tree left<span class="token punctuation">;</span> T_binding binding<span class="token punctuation">;</span>T_tree right<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>T_tree <span class="token function">Tree</span><span class="token punctuation">(</span>T_tree l<span class="token punctuation">,</span> T_binding b <span class="token punctuation">,</span>T_tree r<span class="token punctuation">)</span><span class="token punctuation">;</span>T_tree <span class="token function">insert</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>binding<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">lookup</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">member</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> binding.c</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"binding_tree.h"</span></span>T_tree <span class="token function">Tree</span><span class="token punctuation">(</span>T_tree l<span class="token punctuation">,</span> T_binding b<span class="token punctuation">,</span>T_tree r<span class="token punctuation">)</span><span class="token punctuation">{</span>  T_tree t <span class="token operator">=</span> <span class="token function">checked_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token operator">-></span>left<span class="token operator">=</span>l<span class="token punctuation">;</span> t<span class="token operator">-></span>binding <span class="token operator">=</span> b <span class="token punctuation">;</span> t<span class="token operator">-></span>right<span class="token operator">=</span>r<span class="token punctuation">;</span>  <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>T_binding <span class="token function">Binding</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>  T_binding b <span class="token operator">=</span> <span class="token function">checked_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b<span class="token operator">-></span>key<span class="token operator">=</span>key<span class="token punctuation">;</span> b<span class="token operator">-></span>value<span class="token operator">=</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span>T_tree <span class="token function">insert</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">Binding</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>binding<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">-></span>binding<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>binding<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">,</span>t<span class="token operator">-></span>binding<span class="token punctuation">,</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">,</span><span class="token function">Binding</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">lookup</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>t<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token operator">-></span>binding<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">lookup</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token operator">-></span>binding<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">lookup</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> t<span class="token operator">-></span>binding<span class="token operator">-></span>value<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">member</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> T_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>binding<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">member</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>binding<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">member</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> main.c</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"binding_tree.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  T_tree t1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">6</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">7</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">8</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">9</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The tree tspipfbst has element:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  string element<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">member</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">long</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s-%ld "</span><span class="token punctuation">,</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*T_tree t2 = NULL;  t2 = insert(String("a"), t2);  t2 = insert(String("b"), t2);  t2 = insert(String("c"), t2);  t2 = insert(String("d"), t2);  t2 = insert(String("e"), t2);  t2 = insert(String("f"), t2);  t2 = insert(String("g"), t2);  t2 = insert(String("h"), t2);  t2 = insert(String("i"), t2);*/</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> makefile</p><pre class=" language-makefile"><code class="language-makefile"><span class="token symbol"> a.out</span><span class="token punctuation">:</span> main.o prog1.o slp.o util.o    cc -g main.o prog1.o slp.o util.o<span class="token symbol">b.out</span><span class="token punctuation">:</span> test_tree.o util.o tree.o    cc -g test_tree.o util.o tree.o -o b<span class="token symbol">c.out</span><span class="token punctuation">:</span> test_binding_tree.o util.o binding_tree.o    cc -g test_binding_tree.o util.o binding_tree.o -o c<span class="token symbol">test_binding_tree.o</span><span class="token punctuation">:</span> test_binding_tree.c binding_tree.h util.h    cc -g -c test_binding_tree.c<span class="token symbol">binding_tree.o</span><span class="token punctuation">:</span> binding_tree.c util.h    cc -g -c binding_tree.c<span class="token symbol">test_tree.o</span><span class="token punctuation">:</span> test_tree.c tree.h util.h    cc -g -c test_tree.c<span class="token symbol">tree.o</span><span class="token punctuation">:</span> tree.c tree.h util.h    cc -g -c tree.c<span class="token symbol">main.o</span><span class="token punctuation">:</span> main.c slp.h util.h    cc -g -c main.c<span class="token symbol">prog1.o</span><span class="token punctuation">:</span> prog1.c slp.h util.h    cc -g -c prog1.c<span class="token symbol">slp.o</span><span class="token punctuation">:</span> slp.c slp.h util.h    cc -g -c slp.c<span class="token symbol">util.o</span><span class="token punctuation">:</span> util.c util.h    cc -g -c util.c<span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f a.out util.o prog1.o slp.o main.o tree.o test_tree.o test_binding_tree.o binding_tree.o b c</code></pre><h4 id="1-1cc"><a href="#1-1cc" class="headerlink" title="1.1cc"></a>1.1cc</h4><p> 这个一眼就不平衡啊</p><p> (1)</p><pre><code>                t             s__|__t          p__|__s       i__|__NULL    f__|__NULL b__|__NULL</code></pre><p> (2)</p><pre><code>       a NULL__|__b    NULL__|__c       NULL__|__d          NULL__|__e             NULL__|__f                NULL__|__g                   NULL__|__h                      NULL__|__i</code></pre><h4 id="1-1d"><a href="#1-1d" class="headerlink" title="1.1d"></a>1.1d</h4><p> 将前面题目中的树改为AVL(平衡二叉搜索树)，详情看Segwick的course。</p><p> test_avl_tree.c</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"avl_tree.h"</span></span><span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printtree</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token operator">=</span>t<span class="token operator">-></span>height<span class="token punctuation">;</span>    <span class="token function">printtree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printtree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  A_tree t1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  t1 <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The tree tspipfbst has element:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  string element<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">member</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The tree is only %d floor"</span><span class="token punctuation">,</span>t1<span class="token operator">-></span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printtree</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> avl_tree.h</p><pre class=" language-c"><code class="language-c"> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> avltree <span class="token operator">*</span>A_tree<span class="token punctuation">;</span><span class="token keyword">struct</span> avltree <span class="token punctuation">{</span>A_tree left<span class="token punctuation">;</span> string key<span class="token punctuation">;</span>A_tree right<span class="token punctuation">;</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>A_tree <span class="token function">Tree</span><span class="token punctuation">(</span>A_tree l<span class="token punctuation">,</span> string k<span class="token punctuation">,</span>A_tree r<span class="token punctuation">)</span><span class="token punctuation">;</span>A_tree <span class="token function">insert</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">member</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> A_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span>A_tree <span class="token function">rightRoate</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span>A_tree <span class="token function">leftRoate</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">updateHeight</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> avl_tree.c</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"avl_tree.h"</span></span><span class="token keyword">int</span> KEY_VAILD<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ILEFT<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>A_tree <span class="token function">Tree</span><span class="token punctuation">(</span>A_tree l<span class="token punctuation">,</span> string k<span class="token punctuation">,</span> A_tree r<span class="token punctuation">)</span><span class="token punctuation">{</span>  A_tree t <span class="token operator">=</span> <span class="token function">checked_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token operator">-></span>left<span class="token operator">=</span>l<span class="token punctuation">;</span> t<span class="token operator">-></span>key<span class="token operator">=</span>k<span class="token punctuation">;</span> t<span class="token operator">-></span>right<span class="token operator">=</span>r<span class="token punctuation">;</span> t<span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>A_tree <span class="token function">insert</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  KEY_VAILD<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  ILEFT<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ILEFT<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    t<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ILEFT<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    t<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    KEY_VAILD<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">Tree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">,</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">updateHeight</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>KEY_VAILD<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>balance <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s-%s\n"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ILEFT<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token function">leftRoate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LR\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">rightRoate</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">leftRoate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ILEFT<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token function">rightRoate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>          t<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">leftRoate</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">rightRoate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">member</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> A_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">member</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">member</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> t<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t<span class="token operator">-></span>right<span class="token operator">-></span>height<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> t<span class="token operator">-></span>left<span class="token operator">-></span>height<span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> t<span class="token operator">-></span>left<span class="token operator">-></span>height <span class="token operator">-</span> t<span class="token operator">-></span>right<span class="token operator">-></span>height<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>A_tree <span class="token function">rightRoate</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"rightr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  A_tree r1 <span class="token operator">=</span> <span class="token function">Tree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token operator">-></span>left<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token operator">-></span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  r1<span class="token operator">=</span>t<span class="token operator">-></span>right<span class="token punctuation">;</span>  t<span class="token operator">-></span>right <span class="token operator">=</span> r1<span class="token operator">-></span>left<span class="token punctuation">;</span>  r1<span class="token operator">-></span>left <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token function">updateHeight</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">updateHeight</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>A_tree <span class="token function">leftRoate</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leftr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  A_tree l1 <span class="token operator">=</span> <span class="token function">Tree</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token operator">-></span>left<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token operator">-></span>key<span class="token punctuation">,</span>t<span class="token operator">-></span>left<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  l1<span class="token operator">=</span>t<span class="token operator">-></span>left<span class="token punctuation">;</span>  t<span class="token operator">-></span>left<span class="token operator">=</span> l1<span class="token operator">-></span>right<span class="token punctuation">;</span>  l1<span class="token operator">-></span>right<span class="token operator">=</span>t<span class="token punctuation">;</span>  <span class="token function">updateHeight</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">updateHeight</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> l1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">updateHeight</span><span class="token punctuation">(</span>A_tree t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>t<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    t<span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> t<span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>t<span class="token operator">-></span>right<span class="token operator">-></span>height<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> t<span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>t<span class="token operator">-></span>left<span class="token operator">-></span>height<span class="token punctuation">;</span>    <span class="token keyword">else</span> t<span class="token operator">-></span>height <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token operator">-></span>height<span class="token punctuation">,</span>t<span class="token operator">-></span>right<span class="token operator">-></span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><p>1.<a href="https://doc.lagout.org/programmation/C/C%20Interfaces%20and%20Implementations_%20Techniques%20for%20Creating%20Reusable%20Software%20%5BHanson%201996-08-30%5D.pdf" target="_blank" rel="noopener">C Interfaces and Implementations: Techniques for Creating Reusable Software</a></p><p> 2.<a href="https://github.com/geeeeeeeeek/tiger/blob/master/lab0/main.c" target="_blank" rel="noopener">tong zy</a></p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虎书 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX使用指南</title>
      <link href="/2019/02/28/latex/"/>
      <url>/2019/02/28/latex/</url>
      
        <content type="html"><![CDATA[<p>LaTeX使用实在是太nice了，我真是high到不行，高德纳男神nb！</p><p>当然$\LaTeX$也有一定的缺点,比如<code>“LATEX does not work well for people who have sold their souls . . . ”</code>:-)</p><p>这里我们先给出LaTex的书写规范，语法格式，最后会给出一份符号表以供参考。还有LaTex的标准写法应该是$\LaTeX{}$,而标准读音应该是 “Lay-tech” 或 “Lah-tech”,即”拉泰赫”。如果因技术限制而做不到，则应该写成“LaTeX”。</p><h3 id="如何开启-LaTeX"><a href="#如何开启-LaTeX" class="headerlink" title="如何开启 $\LaTeX$"></a>如何开启 $\LaTeX$</h3><p>MathJax是一款运行在浏览器中的开源的数学符号渲染引擎，使用MathJax可以方便的在浏览器中显示数学公式，不需要使用图片。这篇文章介绍如何使用LaTeX语法编写数学公式。在NexT主题中有MathJax的默认选项将其值改为<code>true</code>就可以对md文件中的公式进行渲染了。</p><h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><p>下面的这些字符是 $\LaTeX$ 的保留字符，它们或在  $\LaTeX$ 中有特定的用处，类似于标识符。如果你直接在文本中使用它们，会导致  $\LaTeX$ 做一些并非你所构想的事情。<br><code>$ % ^ &amp; _ { } ~ \</code><br>当然，这些字符前面加上反斜线，就可以在文本中得到它们。<br><code>\# \$ \% \^{} \&amp; \_ \{ \} \~{} #</code></p><h5 id="LaTeX-命令"><a href="#LaTeX-命令" class="headerlink" title="$\LaTeX$命令"></a>$\LaTeX$命令</h5><p> $\LaTeX$命令有两种格式:</p><ul><li>以一反斜线 \ 开始，加上只包含字母字符命令名组成。命令名后的空格符、数字或其它非字母字符标志该命令的结束。</li><li>由一反斜线和一特殊字符组成。</li></ul><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>当 $\LaTeX$ 在处理源文件时，如果遇到一个百分号字符 %，那么 $\LaTeX$将忽略 % 后的该行文本，分行符以及下一行开始的空白字符。这样，我们就可以在源文件中写一些注释。</p><h5 id="源文件的结构"><a href="#源文件的结构" class="headerlink" title="源文件的结构"></a>源文件的结构</h5><p>$\LaTeX$ 需要所处理的源文件遵从一定的结构，每个 LATEX 文档必须以如下的命令开始：</p><pre><code>\documentclass{...}</code></pre><p>这个命令指定了你所写的文档的类别。在此之后，你可以加入控制文档式样的命令，或者使用如下的命令来调入一些宏集，进而为 LATEX 系统增添一些新的功能。</p><pre><code>\usepackage{...}</code></pre><p>当完成所有的设置5后，你可利用如下的命令来开始你的文档：</p><pre><code>\begin{document}</code></pre><p>现在你可以输入你所希望排版的文本和所使用的一些 LATEX 命令。在文档的最后键入下面的命令来告诉 LATEX 你的文档到此结束，从而使 LATEX忽略文档在此命令之后的部分。</p><pre><code>\end{document}</code></pre><h5 id="文档类"><a href="#文档类" class="headerlink" title="文档类"></a>文档类</h5><pre><code>\documentclass[11pt,twoside,a4paper]{article}</code></pre><p>这条命令指定 LATEX 使用论文版式，11 磅大小的字体来排班此文档，并且得到适合打印在 A4 纸上的输出结果。</p><table><thead><tr><th align="center">文档类</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">article</td><td align="center">排版科技期刊、短报告、程序文档、邀请函等。</td></tr><tr><td align="center">report</td><td align="center">排版多章节的长报告、短篇的书籍、博士论文等。</td></tr><tr><td align="center">book</td><td align="center">排版书籍。</td></tr><tr><td align="center">slides</td><td align="center">排版幻灯片。其中使用了较大的 sans serif 字体。也可以考虑使用 FoilTEX 来得到相同的效果。</td></tr></tbody></table><table><thead><tr><th align="center">文档类选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">10pt, 11pt, 12pt</td><td align="center">设置文档所使用的字体的大小。如果没有声明任何选项，缺省将使用 10pt 字体。</td></tr><tr><td align="center">a4paper, letterpaper, . . .</td><td align="center">定义纸张的大小，缺省的设置为letterpaper。此外，还可以使用a5paper，b5paper，executivepaper 和 legalpaper。</td></tr><tr><td align="center">fleqn</td><td align="center">设置该选项将使数学公式左对齐，而不是中间对齐。</td></tr><tr><td align="center">leqno</td><td align="center">设置该选项将使数学公式的编号防置于左侧。</td></tr><tr><td align="center">titlepage, notitlepage</td><td align="center">指定是否在文档标题（document title）后开始一新页。article 文档类缺省不开始新页，而 book 文档类则相反。</td></tr><tr><td align="center">onecolumn, twocolumn</td><td align="center">指定 LATEX 以单列（one column）或双列（two column）方式排版文档。</td></tr><tr><td align="center">twoside, oneside</td><td align="center">指定 LATEX 排版的文档为双面或单面格式。article 和 report 缺省使用单面格式，而 book 则缺省使用双面格式。需要注意的是该选项仅作用于文档的式样。twoside选项不会通知你的打印机让以得到双面的打印输出。</td></tr><tr><td align="center">openright, openany</td><td align="center">此选项决定新的章是仅仅在右边页（奇数页）还是在下一可用页开始。该选项对 article 文档类不起作用，因为该类中并没有定义“章”（Chapter）。report 类中新的一章开始于下一可用页，而 book 类中新的一章总是开始于右边页。</td></tr><tr><td align="center">### *数学公式</td><td align="center"></td></tr><tr><td align="center">#### 基本知识</td><td align="center"></td></tr><tr><td align="center">LATEX 使用一种特殊的模式来排版数学符号和公式（mathematics）。段落中的数学表达式应该置于 ( 和 )， $ 和 $ 或者 \begin{math} 和\end{math} 之间。</td><td align="center"></td></tr></tbody></table><p>对于较大的数学式子，最好的方法是使用显示式样来排版：将它们放置于 [ 和 ] 或 \begin{displaymath} 和 \end{displaymath} 之间。这样排版出的公式是没有编号的。如果你希望 LATEX 对其添加编号的话，可以使用 equation 环境来达到这一目的。</p><pre><code>Add $a$ squared and $b$ squaredto get $c$ squared. Or, usinga more mathematical approach:\begin{displaymath}c^{2}=a^{2}+b^{2}\end{displaymath}And just one more line.</code></pre><p>Add $a$ squared and $b$ squared<br>to get $c$ squared. Or, using<br>a more mathematical approach:<br>$$c^{2}=a^{2}+b^{2}$$<br>And just one more line.</p><h4 id="数学符号表"><a href="#数学符号表" class="headerlink" title="数学符号表"></a>数学符号表</h4><p>表 3.1: 数学模式重音符:</p><table><thead><tr><th align="center">$\hat{a}$</th><th align="center">\hat{a}</th><th align="center">$\check{a}$</th><th align="center">\check{a}</th><th>$\tilde{a}$</th><th>\tilde{a}</th><th>$\acute{a}$</th><th>\acute{a}</th></tr></thead><tbody><tr><td align="center">$\grave{a}$</td><td align="center">\grave{a}</td><td align="center">$\dot{a}$</td><td align="center">\dot{a}</td><td>$\ddot{a}$</td><td>\ddot{a}</td><td>$\breve{a}$</td><td>\breve{a}</td></tr><tr><td align="center">$\bar{a}$</td><td align="center">\bar{a}</td><td align="center">$\vec{a}$</td><td align="center">\vec{a}</td><td>$\widehat{A}$</td><td>\widehat{A}</td><td>$\widetilde{A}$</td><td>\widetilde{A}</td></tr><tr><td align="center">表 3.2: 小写希腊字母</td><td align="center"></td><td align="center"></td><td align="center"></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th align="center">$\alpha$</th><th align="center">\alpha</th><th align="center">$\theta$</th><th align="center">\theta</th><th align="center">$o$</th><th align="center">o</th><th align="center">$\upsilon$</th><th align="center">\upsilon</th></tr></thead><tbody><tr><td align="center">$\beta$</td><td align="center">\beta</td><td align="center">$\vartheta$</td><td align="center">\vartheta</td><td align="center">$\pi$</td><td align="center">\pi</td><td align="center">$\phi$</td><td align="center">\phi</td></tr><tr><td align="center">$\gamma$</td><td align="center">\gamma</td><td align="center">$\iota$</td><td align="center">\iota</td><td align="center">$\varpi$</td><td align="center">\varpi</td><td align="center">$\varphi$</td><td align="center">\varphi</td></tr><tr><td align="center">$\delta$</td><td align="center">\delta</td><td align="center">$\kappa$</td><td align="center">\kappa</td><td align="center">$\rho$</td><td align="center">\rho</td><td align="center">$\chi$</td><td align="center">\chi</td></tr><tr><td align="center">$\epsilon$</td><td align="center">\epsilon</td><td align="center">$\lambda$</td><td align="center">\lambda</td><td align="center">$\varrho$</td><td align="center">\varrho</td><td align="center">$\psi$</td><td align="center">\psi</td></tr><tr><td align="center">$\varepsilon$</td><td align="center">\varepsilon</td><td align="center">$\mu$</td><td align="center">\mu</td><td align="center">$\sigma$</td><td align="center">\sigma</td><td align="center">$\omega$</td><td align="center">\omega</td></tr><tr><td align="center">$\zeta$</td><td align="center">\zeta</td><td align="center">$\nu$</td><td align="center">\nu</td><td align="center">$\varsigma$</td><td align="center">\varsigma</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$\eta$</td><td align="center">\eta</td><td align="center">$\xi$</td><td align="center">\xi</td><td align="center">$\tau$</td><td align="center">\tau</td><td align="center"></td><td align="center"></td></tr></tbody></table><p> 表 3.3: 大写希腊字母:</p><table><thead><tr><th align="center">$\Gamma$</th><th align="center">\Gamma</th><th align="center">$\Lambda$</th><th align="center">\Lambda</th><th align="center">$\Sigma$</th><th align="center">\Sigma</th><th align="center">$\Psi$</th><th align="center">\Psi</th></tr></thead><tbody><tr><td align="center">$\Delta$</td><td align="center">\Delta</td><td align="center">$\Xi$</td><td align="center">\Xi</td><td align="center">$\Upsilon$</td><td align="center">\Upsilon</td><td align="center">$\Omega$</td><td align="center">\Omega</td></tr><tr><td align="center">$\Theta$</td><td align="center">\Theta</td><td align="center">$\Pi$</td><td align="center">\Pi</td><td align="center">$\Phi$</td><td align="center">\Phi</td><td align="center"></td><td align="center"></td></tr></tbody></table> <center>**数学符号表**</center><div class="row"><iframe src="https://drive.google.com/file/d/19qn_TktFfkmDWGz6qq3c1cDhSE5-Meew/preview" style="width:100%; height:550px"></iframe></div><h4 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h4><p>LaTeX的数学公式有两种：行内公式和块级公式。行内公式放在文中与其它文字混编，块级公式单独成行。都使用美元符号进行标记显示。</p><h6 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h6><p>标记方法：使用一个美元符号包围起来</p><h6 id="块级公式"><a href="#块级公式" class="headerlink" title="块级公式"></a>块级公式</h6><p>标记方法：使用两个美元符号包围起来</p><h6 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标"></a>上标和下标</h6><p>^表示上标，_表示下标。如果上下标的内容多于一个字符，要用{}把这些内容括起来当成一个整体。上下标是可以嵌套的，也可以同时使用。</p><pre><code>$x^{y^z}=(1+e^x)^{-2xy^w}$</code></pre><p>$x^{y^z}=(1+e^x)^{-2xy^w}$<br>另外，如果要在左右两边都有上下标，可以用\sideset命令。</p><pre><code>$\sideset{^1_2}{^3_4}\bigotimes$</code></pre><p>效果：$\sideset{^1_2}{^3_4}\bigotimes$</p><h5 id="分数表示"><a href="#分数表示" class="headerlink" title="分数表示"></a>分数表示</h5><pre><code>方法1：\frac{分子}{分母}方法2：分子 \over 分母</code></pre><h5 id="各种括号"><a href="#各种括号" class="headerlink" title="各种括号"></a>各种括号</h5><p>()、[]和|可以直接表示自己，而{}本来用于分组，因此需要用{}来表示自身，也可以使用\lbrace 和\rbrace来表示。</p><h5 id="根号表示"><a href="#根号表示" class="headerlink" title="根号表示"></a>根号表示</h5><pre><code>\sqrt[开方次数，默认为2]{开方因子}$\sqrt{x^3}$　和　$\sqrt[3]{\frac xy}$</code></pre><p>$\sqrt{x^3}$　和　$\sqrt[3]{\frac xy}$</p><h5 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h5><p>数学公式中常见的省略号有两种，\ldots表示与文本底线对齐的省略号，\cdots表示与文本中线对齐的省略号。</p><pre><code>$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$</code></pre><p>$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$</p><h5 id="矢量表示"><a href="#矢量表示" class="headerlink" title="矢量表示"></a>矢量表示</h5><pre><code>\vec{矢量值}$\vec{a} \cdot \vec{b}=0$</code></pre><p>$\vec{a} \cdot \vec{b}=0$</p><h5 id="特殊字符-1"><a href="#特殊字符-1" class="headerlink" title="特殊字符"></a>特殊字符</h5><h6 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h6><table><thead><tr><th align="center">$\pm$</th><th>\pm</th><th>$\times$</th><th>\times</th><th>$\div$</th><th>\div</th></tr></thead><tbody><tr><td align="center">$\mid$</td><td>\mid</td><td>$\nmid$</td><td>\nmid</td><td>$\cdot$</td><td>\cdot</td></tr><tr><td align="center">$\circ$</td><td>\circ</td><td>$\ast$</td><td>\ast</td><td>$\bigodot$</td><td>\bigodot</td></tr><tr><td align="center">$\bigotimes$</td><td>\bigotimes</td><td>$\bigoplus$</td><td>\bigoplus</td><td>$\leq$</td><td>\leq</td></tr><tr><td align="center">$\geq$</td><td>\geq</td><td>$\equiv$</td><td>\equiv</td><td>$\sum$</td><td>\sum</td></tr><tr><td align="center">$\prod$</td><td>\prod</td><td>$\coprod$</td><td>\coprod</td><td></td><td></td></tr></tbody></table><h6 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h6><table><thead><tr><th align="center">$\emptyset$</th><th>\emptyset</th><th>$\in$</th><th>\in</th><th>$\notin$</th><th>\notin</th></tr></thead><tbody><tr><td align="center">$\subset$</td><td>\subset</td><td>$\supset$</td><td>\supset</td><td>$\subseteq$</td><td>\subseteq</td></tr><tr><td align="center">$\supseteq$</td><td>\supseteq</td><td>$\bigcap$</td><td>\bigcap</td><td>$\bigcup$</td><td>\bigcup</td></tr><tr><td align="center">$\bigvee$</td><td>\bigvee</td><td>$\bigwedge$</td><td>\bigwedge</td><td>$\biguplus$</td><td>\biguplus</td></tr><tr><td align="center">$\bigsqcup$</td><td>\bigsqcup</td><td></td><td></td><td></td><td></td></tr></tbody></table><h6 id="对数运算符"><a href="#对数运算符" class="headerlink" title="对数运算符"></a>对数运算符</h6><table><thead><tr><th align="center">$\log$</th><th>\log</th><th>$\lg$</th><th>\lg</th><th>$\ln$</th><th>\ln</th></tr></thead></table><h6 id="三角运算符"><a href="#三角运算符" class="headerlink" title="三角运算符"></a>三角运算符</h6><table><thead><tr><th align="center">$\bot$</th><th>\bot</th><th>$\angle$</th><th>\angle</th><th>$\circ$</th><th>\circ</th></tr></thead><tbody><tr><td align="center">$\sin$</td><td>\sin</td><td>$\cos$</td><td>\cos</td><td>$\tan$</td><td>\tan</td></tr><tr><td align="center">$\cot$</td><td>\cot</td><td>$\sec$</td><td>\sec</td><td>$\csc$</td><td>\csc</td></tr></tbody></table><h6 id="微积分运算符"><a href="#微积分运算符" class="headerlink" title="微积分运算符"></a>微积分运算符</h6><table><thead><tr><th align="center">$\prime$</th><th>\prime</th><th>$\int$</th><th>\int</th><th>$\iint$</th><th>\iint</th></tr></thead><tbody><tr><td align="center">$\iiint$</td><td>\iiint</td><td>$\iiiint$</td><td>\iiiint</td><td>$\oint$</td><td>\oint</td></tr><tr><td align="center">$\lim$</td><td>\lim</td><td>$\infty$</td><td>\infty</td><td>$\nabla$</td><td>\nabla</td></tr></tbody></table><h6 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h6><table><thead><tr><th align="center">$\because$</th><th>\because</th><th>$\therefore$</th><th>\therefore</th><th>$\forall$</th><th>\forall</th></tr></thead><tbody><tr><td align="center">$exists$</td><td>\exists</td><td>$\not=$</td><td>\not=</td><td>$\not&gt;$</td><td>\not&gt;</td></tr><tr><td align="center">$\not\subset$</td><td>\not\subset</td><td></td><td></td><td></td><td></td></tr></tbody></table><h6 id="戴帽符号"><a href="#戴帽符号" class="headerlink" title="戴帽符号"></a>戴帽符号</h6><table><thead><tr><th align="center">$\hat{y}$</th><th>\hat{y}</th><th>$\check{y}$</th><th>\check{y}</th><th>$\breve{y}$</th><th>\breve{y}</th></tr></thead></table><h6 id="连线符号"><a href="#连线符号" class="headerlink" title="连线符号"></a>连线符号</h6><table><thead><tr><th align="center">$\overline{a+b+c+d}$</th><th>\overline{a+b+c+d}</th></tr></thead><tbody><tr><td align="center">$\underline{a+b+c+d}$</td><td>\underline{a+b+c+d}</td></tr><tr><td align="center">$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</td><td>\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}</td></tr></tbody></table><h6 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h6><table><thead><tr><th align="center">$\uparrow$</th><th align="center">\uparrow</th><th align="center">$\downarrow$</th><th>\downarrow</th></tr></thead><tbody><tr><td align="center">$\Uparrow$</td><td align="center">\Uparrow</td><td align="center">$\Downarrow$</td><td>\Downarrow</td></tr><tr><td align="center">$\rightarrow$</td><td align="center">\rightarrow</td><td align="center">$\leftarrow$</td><td>\leftarrow</td></tr><tr><td align="center">$\Rightarrow$</td><td align="center">\Rightarrow</td><td align="center">$\Leftarrow$</td><td>\Leftarrow</td></tr><tr><td align="center">$\longrightarrow$</td><td align="center">\longrightarrow</td><td align="center">$\longleftarrow$</td><td>\longleftarrow</td></tr><tr><td align="center">$\Longrightarrow$</td><td align="center">\Longrightarrow</td><td align="center">$\Longleftarrow$</td><td>\Longleftarrow</td></tr></tbody></table><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.<a href="http://117.128.6.12/cache/www.mohu.org/info/lshort-cn.pdf?ich_args2=472-05141922037508_ebb4f2e409c6ab413a287e44d4962b2a_10001002_9c89612dd0c5f7d6903a518939a83798_f48d5199abd7921134efa7ce01554962" target="_blank" rel="noopener">中国$C\TeX$协会关于$\LaTeX2_\epsilon$的文档</a></p><p>2.<a href="https://blog.csdn.net/lanxuezaipiao/article/details/44341645" target="_blank" rel="noopener">markdown语法之如何使用LaTeX语法编写数学公式</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《编译原理》学习笔记第一章</title>
      <link href="/2019/02/27/bian-yi-yuan-li-xue-xi-bi-ji-di-yi-zhang/"/>
      <url>/2019/02/27/bian-yi-yuan-li-xue-xi-bi-ji-di-yi-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><h3 id="1-1语言处理器"><a href="#1-1语言处理器" class="headerlink" title="1.1语言处理器"></a>1.1语言处理器</h3><p>编译器：将源程序转化为目标程序</p><p>解释器(interpreter)：直接利用用户提供的输入执行源程序中指定的操作。</p><p>e.g. Java语言处理器结合了<code>编译</code>和<code>解释</code>的过程:</p><pre><code>1.首先被编译为一个称为字节码的中间表示形式2.有jvm对得到的虚拟机加以解释执行</code></pre><p>1.1.2 编译器生成的目标文件可以被直接执行，而解释器生成的目标文件不能被直接执行。</p><p>1.1.3编译器产生的汇编语言相较机器语言更加容易理解，方便程序员优化程序性能并调试。</p><p>1.1.4c语言贴近底层逻辑简单清晰，没有面向对象等复杂机制，语法词义较易理解。</p><p>1.1.5根据运行程序的机器的架构（arm，x86）等特征生成适合于该机器的机器码</p><p>一个混合编译器:</p><pre><code>源程序-&gt;翻译器-&gt;中间程序-&gt;                          |-&gt;虚拟机-&gt;输出                    输入-&gt;</code></pre><p> 一个语言处理器:</p><pre><code> 源程序-&gt;预处理器-&gt;经过预处理的源程序 -&gt;编译器-&gt;目标汇编程序 -&gt;汇编器-&gt;可可重定位机器代码 -&gt;连接器/加载器 &lt;-库文件可重定位对象文件 -&gt;目标机器代码</code></pre><h3 id="1-2-一个编译器的结构"><a href="#1-2-一个编译器的结构" class="headerlink" title="1.2 一个编译器的结构"></a>1.2 一个编译器的结构</h3><p> 一个编译器的各个步骤:</p><pre><code> 字符流 -&gt;词法分析器-&gt;符号流 -&gt;语法分析-&gt;语法树 -&gt;语义分析-&gt;语法树 -&gt;中间代码生成器-&gt;中间表示形式 -&gt;机器无关代码优化器-&gt;中间表示形式 -&gt;代码生成器-&gt;目标机器语言 -&gt;机器相关代码优化器-&gt;目标机器语言</code></pre><h4 id="1-2-1词法分析"><a href="#1-2-1词法分析" class="headerlink" title="1.2.1词法分析"></a>1.2.1词法分析</h4><p> 编译器的结构：</p><pre><code>分析部分,前段(frootend):字符流-&gt;词法分析器-&gt;词法单元流-&gt;语法分析器-&gt;语法树-&gt;语义分析器-&gt;语法树-&gt;中间代码生成器-&gt;中间表示形式综合部分,后端部分(backend与硬件有关):-&gt;机器无关代码优化器-&gt;中间表示方式-&gt;目标代码生成器-&gt;目标机器语言-&gt;机器代码优化器-&gt;目标机器语言辅助工具:表格管理,出错处理.</code></pre><p> 词法分析将字符流组织为有意义的词素(lexeme),对于每个词素语法分析器产生词法单元<code>tocken &lt;tocken-name,attribute-value&gt;</code>,其中<code>tocken-name</code>是由语法分析步骤使用的抽象符号.而第二个分量<code>attribute-value</code>指向符号表中关于这个词法单元的条目。(符号表：分析阶段会将从源程序收集的信息存放在符号表（symbo table）的数据结构中，符号表将和中间表示形式一起传递给综合部分)。<br> e.g.</p><pre><code> position =  initial  +    rate      *    60 &lt;id,1&gt;&lt;=&gt;&lt;id,2&gt;&lt;+&gt;&lt;id,3&gt;&lt;*&gt;&lt;60&gt; (从技术上讲,应该为&lt;60&gt;创建一个形如&lt;number,4&gt;的词法单元)</code></pre><h4 id="1-2-2语法分析"><a href="#1-2-2语法分析" class="headerlink" title="1.2.2语法分析"></a>1.2.2语法分析</h4><p> 语法树:每个内部节点表示一个运算，而该节点的叶子节点表示该运算的分量。</p><h4 id="1-2-3语义分析"><a href="#1-2-3语义分析" class="headerlink" title="1.2.3语义分析"></a>1.2.3语义分析</h4><p> 使用语法树和符号表中的信息检查源程序是否和语言定义的语义一致，它同时也收集类型信息，并把这些信息存放在语法树或符号表中。</p><p> 类型检查：检查每个运算符是否具有匹配的运算分量（如数组下标），有些程序语言允许自动类型转换，这是编译器应该自动将分量的类型转换。在前面的示例中，语法分析器会为60<br>创造一个关于运算符inttofloat的额外节点。</p><h4 id="1-2-4中间代码生成"><a href="#1-2-4中间代码生成" class="headerlink" title="1.2.4中间代码生成"></a>1.2.4中间代码生成</h4><p>中间表示形式可以有一个或多个，语法树是其中一种。<br>性质</p><pre><code>1.易于生成2.能够被轻松的翻译为目标机器上的语言</code></pre><h5 id="三地址代码"><a href="#三地址代码" class="headerlink" title="三地址代码"></a>三地址代码</h5><p>一种中间表示形式，每个指令具有三个运算分量，每个运算分量都像一个寄存器。</p><pre><code>1.每个三地址赋值指令的右部最多只有一个运算符。因此这些指令确定了运算的完成顺序。2.编译器应该生成一个临时名字以存放一个三地址指令得到的值3.有些三地址指令的运算分量小于3个</code></pre><h4 id="1-2-5代码优化"><a href="#1-2-5代码优化" class="headerlink" title="1.2.5代码优化"></a>1.2.5代码优化</h4><p>能耗更低，运行更快，优化是编译时的可选项</p><h4 id="1-2-6代码生成"><a href="#1-2-6代码生成" class="headerlink" title="1.2.6代码生成"></a>1.2.6代码生成</h4><p>将中间表示形式映射为目标语言，如果目标语言是机器代码则需要为每个变量选择寄存器位置或内存位置。</p><h4 id="1-2-7符号表管理"><a href="#1-2-7符号表管理" class="headerlink" title="1.2.7符号表管理"></a>1.2.7符号表管理</h4><p>即表格管理</p><h4 id="1-2-8将多个步骤组合成趟（pass）"><a href="#1-2-8将多个步骤组合成趟（pass）" class="headerlink" title="1.2.8将多个步骤组合成趟（pass）"></a>1.2.8将多个步骤组合成趟（pass）</h4><p>一趟就是读入一个文件并产生一个输出文件的过程。<br>e.g.</p><pre><code>前段步骤中的词法分析,语法分析,语义分析,中间代码生成可以组合为一趟代码优化作为一个可选的趟生成特定目标代码的后端趟</code></pre><p>不同的前端和某个目标机的后端结合起来为不同的源语言建立该目标机上的编译器。</p><p>一个前端和不同的目标机后端结合建立针对不同目标机的编译器。</p><h4 id="编译器构造工具"><a href="#编译器构造工具" class="headerlink" title="编译器构造工具"></a>编译器构造工具</h4><pre><code>1）语法分析器的生成器2）扫描器的生成器3）语法制导的翻译引擎4）代码生成器的生成器5）数据流分析引擎6）编译器构造工具集</code></pre><h3 id="程序设计语言的历史"><a href="#程序设计语言的历史" class="headerlink" title="程序设计语言的历史"></a>程序设计语言的历史</h3><p>20世纪40年代第一台电子计算机</p><h4 id="1-3-1走向高级程序设计语言"><a href="#1-3-1走向高级程序设计语言" class="headerlink" title="1.3.1走向高级程序设计语言"></a>1.3.1走向高级程序设计语言</h4><p>汇编语言-&gt;Fortran,Cobol,Lisp-&gt;new language</p><pre><code>第一代语言:机器语言第二代语言:汇编语言第三代语言:Fortran,Cobol,C,C++,C#,Java等高级程序设计语言第四代语言:为特定应用设计,生成表格的NOMAD,SQL,Markdown第五代语言:基于逻辑和约束的语言,如Prolog和OPS5</code></pre><pre><code>强制式语言:c,java声明式语言:函数式语言:ML,Haskell;           约束逻辑式语言:Prolog</code></pre><p>冯诺依曼语言:以冯诺依曼计算机体系结构为计算模型</p><p>面向对象语言:C++,Ruby</p><p>脚本语言:具有高层次预算福的解释型语言,用于将多个计算过程粘和在一起,PHP,Awk,Ruby。</p><h4 id="对编译器的影响"><a href="#对编译器的影响" class="headerlink" title="对编译器的影响"></a>对编译器的影响</h4><p>程序语言的设计和编译器是密切相关的。<br>1.3.3</p><pre><code>强制式的 C，C++，VB声明式的 ML，Haskell冯诺依曼式的Fortran，C，VB面向对象的C++函数式的ML，Haskell第三代 C，C++，Fortran，VB，Lisp第四代脚本语言 Perl，Python</code></pre><h3 id="构建一个编译器的相关科学"><a href="#构建一个编译器的相关科学" class="headerlink" title="构建一个编译器的相关科学"></a>构建一个编译器的相关科学</h3><h4 id="1-4-1编译器设计和现实中的建模"><a href="#1-4-1编译器设计和现实中的建模" class="headerlink" title="1.4.1编译器设计和现实中的建模"></a>1.4.1编译器设计和现实中的建模</h4><p><code>有穷状态自动机</code>和<code>正则表达式</code>可以用来描述最基本的词法单位以及识别这些单位的算法。<br><code>上下文无关法</code>用来描述语法结构。</p><h4 id="1-4-2代码优化的科学"><a href="#1-4-2代码优化的科学" class="headerlink" title="1.4.2代码优化的科学"></a>1.4.2代码优化的科学</h4><p>编译器优化必须满足下面的设计目标</p><pre><code>优化必须是正确的，不能改变被编译程序的含义优化必须能够改善很多程序的性能优化所需的时间必须保持在合理的范围内所需要的工程方面的工作必须是可管理的</code></pre><p>虽然代码不能真正达到最优化，但提高代码效率的科学非常重要，是编译器技术研究的重要部分。</p><h3 id="编译技术的应用"><a href="#编译技术的应用" class="headerlink" title="编译技术的应用"></a>编译技术的应用</h3><h4 id="1-5-1高级程序设计语言的实现"><a href="#1-5-1高级程序设计语言的实现" class="headerlink" title="1.5.1高级程序设计语言的实现"></a>1.5.1高级程序设计语言的实现</h4><p>语言的易用性和编译过程的复杂性是负相关的，越是低级的语言，编译过程中花掉的时间越少。</p><p>随着时间的流失，程序语言负担起了越来越多本来程序员的工作，图内存管理，类型一致性检查和代码的并发执行。</p><h4 id="1-5-2针对计算机体系结构的优化"><a href="#1-5-2针对计算机体系结构的优化" class="headerlink" title="1.5.2针对计算机体系结构的优化"></a>1.5.2针对计算机体系结构的优化</h4><p>并行和内存层次结构</p><h6 id="并行性"><a href="#并行性" class="headerlink" title="并行性"></a>并行性</h6><p>编译器可以改变指令的顺序获得更高的性能</p><h6 id="内存层次结构"><a href="#内存层次结构" class="headerlink" title="内存层次结构"></a>内存层次结构</h6><p>改变数据的布局或数据访问代码的顺序来提高内存层次结构的效率。</p><h4 id="新计算机体系结构的设计"><a href="#新计算机体系结构的设计" class="headerlink" title="新计算机体系结构的设计"></a>新计算机体系结构的设计</h4><h6 id="RISC"><a href="#RISC" class="headerlink" title="RISC"></a>RISC</h6><p>精简指令集</p><h6 id="专用体系结构"><a href="#专用体系结构" class="headerlink" title="专用体系结构"></a>专用体系结构</h6><p>数据流机器，向量机，VLIW机器，SIMD处理器阵列</p><h4 id="程序翻译"><a href="#程序翻译" class="headerlink" title="程序翻译"></a>程序翻译</h4><p>编译器不仅可以用于将高级语言程序翻译为机器语言，还可以将一种语言翻译为另一种语言。</p><h6 id="二进制翻译器"><a href="#二进制翻译器" class="headerlink" title="二进制翻译器"></a>二进制翻译器</h6><h6 id="硬件合成"><a href="#硬件合成" class="headerlink" title="硬件合成"></a>硬件合成</h6><h6 id="数据查询解释器"><a href="#数据查询解释器" class="headerlink" title="数据查询解释器"></a>数据查询解释器</h6><h6 id="编译然后模拟"><a href="#编译然后模拟" class="headerlink" title="编译然后模拟"></a>编译然后模拟</h6><h4 id="软件成产率工具"><a href="#软件成产率工具" class="headerlink" title="软件成产率工具"></a>软件成产率工具</h4><p>静态分析技术可以帮助找出程序中的错误，但是错误探测器不可能找出所有错误，也不能保证找出的错误都是真正的错误。</p><h6 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h6><h6 id="边界检查"><a href="#边界检查" class="headerlink" title="边界检查"></a>边界检查</h6><h6 id="内存管理工具"><a href="#内存管理工具" class="headerlink" title="内存管理工具"></a>内存管理工具</h6><h3 id="程序设计语言基础"><a href="#程序设计语言基础" class="headerlink" title="程序设计语言基础"></a>程序设计语言基础</h3><h4 id="1-6-1-动态和静态的区别"><a href="#1-6-1-动态和静态的区别" class="headerlink" title="1.6.1 动态和静态的区别"></a>1.6.1 动态和静态的区别</h4><pre><code>静态策略：语言使用的策略支持编译器静态的决定某个问题（编译时刻compile time决定）动态策略：只允许在运行程序时候做出决定（运行时runtime做出决定）</code></pre><h5 id="1-6-2-环境与状态"><a href="#1-6-2-环境与状态" class="headerlink" title="1.6.2 环境与状态"></a>1.6.2 环境与状态</h5><pre><code>名字---环境---&gt;内存变量(位置)---状态---&gt;值</code></pre><p>1)从名字到位置的静态绑定和动态绑定.大部分都是动态的,但如全局变量这种操作就可以为编译器生成目标代码时一劳永逸的分配一个储存位置。</p><p>2)从位置到值的静态绑定和动态绑定.一般来说也是动态的,但比如宏<code>#define ARRAYSIZE 1000</code>就静态的绑定为1000。</p><h4 id="1-6-3-静态作用域和块结构"><a href="#1-6-3-静态作用域和块结构" class="headerlink" title="1.6.3 静态作用域和块结构"></a>1.6.3 静态作用域和块结构</h4><p>C中括号{}可以界定一个块。</p><p>C语言中静态作用域策略可以概述如下：</p><pre><code>1）一个C程序由一个顶层的变量和函数声明的序列组成2）函数内部可以声明变量，变量包括局部变量解参数，每个这样的声明的作用域被限制在它们所出现的那个函数内。3）名字x的一个顶层声明的作用域包括其后的所有程序，但是如果一个函数中也有一个x是声明，那么函数中的语句就不在这个顶层函数内。</code></pre><p>子C语言中有关块的语法如下：</p><pre><code>1）块是一种语句。2）一个块包含了一个声明的序列然后再跟着另一个语句序列</code></pre><h4 id="1-6-4显示访问控制"><a href="#1-6-4显示访问控制" class="headerlink" title="1.6.4显示访问控制"></a>1.6.4显示访问控制</h4><p>声明告诉我们事物的类型,而定义告诉我们事物的值.</p><h4 id="1-6-5动态作用域"><a href="#1-6-5动态作用域" class="headerlink" title="1.6.5动态作用域"></a>1.6.5动态作用域</h4><p>对一个名字x的使用指向的是最近被调用但还没有终止且声明了x的过程中的声明。例如：C预处理器中的宏扩展，面向对象编程中的方法解析。</p><h4 id="1-6-6参数传递机制"><a href="#1-6-6参数传递机制" class="headerlink" title="1.6.6参数传递机制"></a>1.6.6参数传递机制</h4><p>参数可以通过值或引用的方式从调用过程传递给被调用过程。当通过值传递方式传递大型对象时，实际被传递的值是指向这些对象本身的引用，这样就变成了一个高效的引用调用。</p><h4 id="1-6-7别名"><a href="#1-6-7别名" class="headerlink" title="1.6.7别名"></a>1.6.7别名</h4><p>当参数被以引用传递的方式高效的传递时，两个形式参数可能会指向同一个对象。这会造成一个变量的修改改变了另一个变量的值。</p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记(1)</title>
      <link href="/2019/02/27/ji-qi-xue-xi-bi-ji-1/"/>
      <url>/2019/02/27/ji-qi-xue-xi-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><h3 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h3><p>人类根据经验做出的判断就是机器学习所要模仿的过程,挑选西瓜的过程通过色泽，根蒂，声音，做出判断也是一个机器学习的过程，所以机器学习的通俗的解释就是根据已知的经验对未知的情况做出决策，而小明做出判断的依据就是依照以前挑西瓜经验数据所建立的模型。</p><h4 id="机器学习定义"><a href="#机器学习定义" class="headerlink" title="机器学习定义"></a>机器学习定义</h4><p>利用计算的手段，利用经验来改善系统自身的性能，从而在计算机从数据中产生模型，并使用该模型对新的情况给出判断。（<code>模型</code>泛指从数据中学得的结果）</p><h5 id="机器学习与数据挖掘关系"><a href="#机器学习与数据挖掘关系" class="headerlink" title="机器学习与数据挖掘关系"></a>机器学习与数据挖掘关系</h5><p>机器学习是根据已有的经验建立模型，判断新的情况。</p><p>数据挖掘：</p><pre><code>数据分析技术（机器学习）——|                          |——数据挖掘数据管理技术（数据库）————|</code></pre><h5 id="典型的机器学习过程"><a href="#典型的机器学习过程" class="headerlink" title="典型的机器学习过程"></a>典型的机器学习过程</h5><pre><code>训练数据-&gt;模型-&gt;新数据样本-&gt;类别标记</code></pre><h4 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h4><p><em>数据集</em> ：记录的集合。</p><p><em>特征属性</em>：反反映事件或对象在某些方面的表现或性质的事项。</p><p><em>属性值</em>：属性上的取值,如青绿。</p><p><em>示例样本</em>：每条记录是关于一个事件/对象的描述。</p><p><em>属性空间/样本空间/输入空间</em>：属性张成的空间（属性的个数是属性空间的维数）。</p><p><em>学习/训练</em>：从数据中学得模型的过程,这个过程通过执行摸个算法来完成.</p><p><em>标记空间/输出空间</em>：(xi，yi)，yi是标记，Y为标记空间。</p><p><em>假设</em>：即通过学习所得到的规律，对应了数据某种潜在的规律。</p><table><thead><tr><th align="center">编号</th><th align="center">色泽</th><th align="center">根蒂</th><th align="center">敲声</th><th align="center">好瓜</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">青绿</td><td align="center">蜷缩</td><td align="center">浊响</td><td align="center">是</td></tr><tr><td align="center">2</td><td align="center">乌黑</td><td align="center">蜷缩</td><td align="center">浊响</td><td align="center">是</td></tr><tr><td align="center">3</td><td align="center">青绿</td><td align="center">硬挺</td><td align="center">清脆</td><td align="center">否</td></tr><tr><td align="center">4</td><td align="center">乌黑</td><td align="center">稍蜷</td><td align="center">沉闷</td><td align="center">否</td></tr><tr><td align="center">##### 任务</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">根据<code>预测目标</code>,学习任务可分为三类:</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">```</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">分类:预测值是离散值</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">二分类:正类(好瓜);反类(坏瓜);</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">多分类:(冬瓜,南瓜,西瓜);</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">回归:预测值是连续值</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">e.g.西瓜成熟度</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>(分类和回归的预测任务是建立一个从样本空间到输出空间的映射f:X-&gt;Y)</p><p>聚类:无预测值,即没有标记信息<br>        即将训练集中的样本分为若干组(称为簇);<br>        自动形成的簇可能对应一些潜在的概念划分(深色瓜,浅色瓜),有助于了解数据的内在规律<br>        深色瓜,浅色瓜的概念在聚类学习中,事先是不知道的而且学习过程中通常训练样本没有标记信息.</p><pre><code>根据`训练数据是否拥有标记信息`学习任务可分为三类:</code></pre><p>监督学习   : 分类,回归 (人脸识别,指纹识别，房价预测，肿瘤诊断)<br>无监督学习 : 聚类<br>半监督学习 : 两者结合</p><pre><code>##### 泛化能力机器学习的目标是使建立的模型既能很好的适用于`新样本`也能很好的适用于`训练集`。称模型适用于新样本的能力称为模型的`泛化能力(generalization)`。为了使学习任务变得简单化,假设样本空间中的样本都服从与一个未知分布,即训练集`独立同分布.`#### 习题练习###### 1.1西瓜问题的版本空间</code></pre><pre><code>                               |---&gt;(色泽=*;根蒂=蜷缩;敲声=浊响)---&gt;|---&gt;(色泽=*;根蒂=*;敲声=浊响)                               |                                    |---&gt;(色泽=*;根蒂=蜷缩;敲声=*)</code></pre><p>(色泽=青绿;根蒂=蜷缩;敲声=浊响)—&gt;|—&gt;(色泽=青绿;根蒂=<em>;敲声=浊响)—&gt;|—&gt;(色泽=</em>;根蒂=<em>;敲声=浊响)<br>                                   |                                    |—&gt;(色泽=青绿;根蒂=</em>;敲声=<em>)<br>                                   |—&gt;(色泽=青绿;根蒂=蜷缩;敲声=</em>)—&gt;|—&gt;(色泽=青绿;根蒂=<em>;敲声=</em>)<br>                                                                        |—&gt;(色泽=<em>;根蒂=蜷缩;敲声=</em>)</p><pre><code>1.2</code></pre><p>好瓜&lt;-&gt;((色泽=青绿)V(根蒂=蜷缩)V(敲声=浊响))<br>好瓜&lt;-&gt;((色泽=;根蒂=;敲声=))<br>好瓜&lt;-&gt;((色泽=;根蒂=;敲声=))<br>好瓜&lt;-&gt;((色泽=;根蒂=;敲声=))</p><pre><code>1.3以表1.1为例,若存在噪声,则对离散数据集采用奥卡姆剃刀原则获得尽可能光滑的函数曲线。1.4*本题我使用查准率$P=\frac{TP}{TP+FP}$作为性能度量$\ell$原式:$ E_{ote}(\zeta _a|X,f)=\sum\limits_h\sum\limits_{x\in\chi-X}P(x)\ell(h(x),f(x))P(h|X,\zeta_a)$证明(无法在LaTex中找到书中的符号采用zeta代替):$$E_{ote}(\zeta _a|X,f)=\sum\limits_h\sum\limits_{x\in\chi-X}P(x)\ell(h(x),f(x))P(h|X,\zeta_a)$$$$=\sum\limits_{x\in\chi-X}P(x)\sum\limits_hP(h|X,\zeta_a)\sum\limits_f(\frac{f(x)}{f(x)+h(x)})$$$$=\sum\limits_{x\in\chi-X}P(x)\sum\limits_hP(h|X,\zeta_a)\frac{1}{2}2^{|\chi|}$$$$=\frac{1}{2}2^{|\chi|}\sum\limits_{x\in\chi-X}P(x)\sum\limits_hP(h|X,\zeta_a)$$$$=2^{|\chi|-1}\sum\limits_{x\in\chi-X}P(x)*1$$若$f$均匀分布,则有一半的$f$对$x$的预测与$h(x)$不一致,即真正例的数量为真正例与反正例的和的一半1.5类似于今日头条的推荐列表的推荐系统，Google的广告系统等。Facebook的图片分类程序，电子邮件垃圾邮件筛选器 #### 扩展阅读1.[机器学习之性能度量](https://blog.csdn.net/hustqb/article/details/71109012)https://blog.csdn.net/hustqb/article/details/71109012</code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj3487 The Stable Marrige Problem 稳定匹配</title>
      <link href="/2019/02/25/poj3487-the-stable-marrige-problem-wen-ding-pi-pei/"/>
      <url>/2019/02/25/poj3487-the-stable-marrige-problem-wen-ding-pi-pei/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3487" target="_blank" rel="noopener">poj3487</a></p><h5 id="The-Stable-Marriage-Problem"><a href="#The-Stable-Marriage-Problem" class="headerlink" title="The Stable Marriage Problem"></a><center>The Stable Marriage Problem</center></h5><center>Time Limit: 1000MS        Memory Limit: 65536K</center><center>Total Submissions: 3526        Accepted: 1517</center><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>The stable marriage problem consists of matching members of two different sets according to the member’s preferences for the other set’s members. The input for our problem consists of:</p><p>a set M of n males;<br>a set F of n females;<br>for each male and female we have a list of all the members of the opposite gender in order of preference (from the most preferable to the least).<br>A marriage is a one-to-one mapping between males and females. A marriage is called stable, if there is no pair (m, f) such that f ∈ F prefers m ∈ M to her current partner and m prefers f over his current partner. The stable marriage A is called male-optimal if there is no other stable marriage B, where any male matches a female he prefers more than the one assigned in A.</p><p>Given preferable lists of males and females, you must find the male-optimal stable marriage.</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>The first line gives you the number of tests. The first line of each test case contains integer n (0 &lt; n &lt; 27). Next line describes n male and n female names. Male name is a lowercase letter, female name is an upper-case letter. Then go n lines, that describe preferable lists for males. Next n lines describe preferable lists for females.</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>For each test case find and print the pairs of the stable marriage, which is male-optimal. The pairs in each test case must be printed in lexicographical order of their male names as shown in sample output. Output an empty line between test cases.</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>2</p><p>3</p><p>a b c A B C</p><p>a:BAC</p><p>b:BAC</p><p>c:ACB</p><p>A:acb</p><p>B:bac</p><p>C:cab</p><p>3</p><p>a b c A B C</p><p>a:ABC</p><p>b:ABC</p><p>c:BCA</p><p>A:bac</p><p>B:acb</p><p>C:abc</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>a A</p><p>b B</p><p>c C</p><p>a B</p><p>b A</p><p>c C</p><h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h4><p>首先定义稳定匹配的概念,所谓稳定匹配的情况是指没有任何一个人的伴侣有出轨的可能，因为别人对自己的伴侣的喜爱程度要更高。</p><p>Gale-Shapley算法的过程：男士根据顺序按自己对女士的好感度由高到底进行表白，若当前女士没有男友则表白成功；若当前女士有男友，如果在女士心中表白男士的好感度高于现任男友，则改变男友为表白男士；若好感度低于现任男友则表白失败，继续对下一位女士表白。直到所有栈中男士全都被pop掉。</p><p>算法正确性证明：反证法：假设GS算法配对的序列中有不稳定的情侣。即存在至少两对情侣 a-A，b-B中A喜欢b甚于a且b喜欢A甚于B。这种情况是不存在的，按题设情况在GS算法中b一定会先向a表白而且A一定会表白成功，所以不存在不稳定的匹配。</p><p>解的唯一性：存在解不唯一的情况，如</p><pre><code>a：ABb：BAA：baB：ab</code></pre><p>此时，有两种稳定的解：</p><pre><code>a-A，b-B或a-B，b-A</code></pre><h4 id="c-程序代码："><a href="#c-程序代码：" class="headerlink" title="c++程序代码："></a>c++程序代码：</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>#include <queue>#include <stdio.h>#include <algorithm>#include <stdio.h>#include <vector>#include <string>#include <string.h>using namespace std;int main() {    int t = 0;    scanf("%d", &t);    while (t--) {        int n = 0;        int oldlove = 0, newlove = 0;        int nowboy = 0;        int girlflag[256][4] = {0};        int nowgirl=0;        int ans[256][2]={0};        char tmp;        char hus, wif;        queue<int> boy;        string s;        vector<vector<int>> list;        scanf("%d", &n);        for (int i = 0; i < n; i++) {            cin >> tmp;            if ((tmp >= 'a' && tmp <= 'z') || (tmp >= 'A' && tmp <= 'Z'))                boy.push((int) tmp);        }//push the boy to stack        for (int i = 0; i < n; i++) {            cin >> tmp;            if ((tmp >= 'a' && tmp <= 'z') || (tmp >= 'A' && tmp <= 'Z'))                girlflag[tmp][0] = tmp;        }//this algorithm not depend on girl so just cin        for (int i = 0; i < 2 * n; i++) {            vector<int> vec;            list.push_back(vec);            cin >> s;            list[i].push_back((int) s[0]);            list[i].push_back(2);            if (s[0] >= 'A' && s[0] <= 'Z')                girlflag[s[0]][3] = i;            for (int j = 2; j < s.length(); j++) {                list[i].push_back((int) s[j]);            }        }        //consider the string could be mix with boy and girl,        // so the string be locate by the first character        while (!boy.empty()) {            nowboy = boy.front();            //cout << (char) boy.front();            for (int i = 0; i < n; i++) {                if (list[i][0] == nowboy) {                    int j = list[i][1];                    nowgirl = list[i][j];                    if (!girlflag[nowgirl][1]) {                        girlflag[nowgirl][1] = 1;                        girlflag[nowgirl][2] = nowboy;                        list[i][1]++;                        boy.pop();                        //cout << 1 << endl;                        break;                    }                    if (girlflag[nowgirl][1]) {                        for (int g = 2; g < 30; g++) {                            if (nowboy == list[girlflag[nowgirl][3]][g]) {                                newlove = g;                                break;                            }                        }                        for (int g = 2; g < 30; g++) {                            if (girlflag[list[i][j]][2] == list[girlflag[nowgirl][3]][g]) {                                oldlove = g;                                break;                            }                        }                        if (oldlove > newlove) {                            boy.push(girlflag[nowgirl][2]);                            girlflag[nowgirl][2] = nowboy;                            boy.pop();                            //cout << 0 << endl;                        }                        list[i][1]++;                    }                    break;                }            }        }//when exist boy haven't match with girl continue        for (int i = 0; i < 256; i++) {            if (girlflag[i][2]) {                ans[girlflag[i][2]][0] = (char) girlflag[i][2];                ans[girlflag[i][2]][1] = (char) girlflag[i][0];            }        }        for (int i = 0; i < 256; i++) {            if (ans[i][0]) {                hus = (char) ans[i][0];                wif = (char) ans[i][1];                printf("%c %c\n", hus, wif);            }        }        printf("\n");    }    return 0;}</code></pre><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码:"></a>伪代码:</h4><pre class=" language-c++"><code class="language-c++">while(!stack.empty())//从栈中弹出男生直到栈空为止    for(auto a:boylist) //遍历该男生对女生的好感序列        if(a.havenoboyfriend)             match(a,nowboy);//如果该女生没有男友则配对成功            stack.pop();//该男生被弹出栈        if(a.haveboyfriend) //如果该女生有男友             if(a.morelove(nowboy,oldboy)) //如果该女生更喜欢新男友                match(a,nowboy);//配对成功                stack.push(oldboy)//旧男友被压入栈中            else//女生更喜欢现任男友                continue;//男生根据序列继续向下一个女生表白</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The new calisthenics plan</title>
      <link href="/2019/02/18/the-new-calisthenics-plan/"/>
      <url>/2019/02/18/the-new-calisthenics-plan/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">日期</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">Day1</td><td align="center">Burpee 150</td></tr><tr><td align="center">Day2</td><td align="center">倒立撑 100 + 倒立髋伸展 40</td></tr><tr><td align="center">Day3</td><td align="center">击掌双力臂 20 + 负重双力臂 20 + 引体向上 65</td></tr><tr><td align="center">Day4</td><td align="center">单杠臂屈伸 12*10 +爆发俯卧撑 30</td></tr><tr><td align="center">Day5</td><td align="center">顺风旗 60 + 举腿 120</td></tr><tr><td align="center">Day6</td><td align="center">引体向上 12*10 + 反手12*1 + 挺身引体12*1</td></tr><tr><td align="center">Day7</td><td align="center">单杠臂屈伸 12 *10 + 窄距 12*2</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Workout </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过qshell下载七牛云对象储存</title>
      <link href="/2019/02/12/tong-guo-qshell-xia-zai-qi-niu-yun-dui-xiang-chu-cun/"/>
      <url>/2019/02/12/tong-guo-qshell-xia-zai-qi-niu-yun-dui-xiang-chu-cun/</url>
      
        <content type="html"><![CDATA[<p>前几天七牛云的绑定随机域名到期了，博客中的图片链接全部失效了。然而Github的泛子域名由于众所周知的原因无法在公信部备案，本想换个图床，但是七牛云的对象存储不能直接下载。在官网发现了qshell的教程。</p><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>由于qshell是由go编写的，七牛云已经在官网提供了编译好的<a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">二进制文件</a>,下载文件包并从中选择适合自己操作系统的文件。将选择好的文件重命名为<code>qshell</code>，因为只是用于下载图片就不必要将qshell加入环境变量中了。在qshell的目录打开终端，输入</p><pre class=" language-bash"><code class="language-bash">$ ./qshell</code></pre><p>如果输出qshell使用指南就表示可以使用了</p><pre><code>Qiniu commandline tool for managing your bucket and CDNUsage:  qshell [command]Available Commands:  account       Get/Set AccessKey and SecretKey  alilistbucket List all the file in the bucket of aliyun oss by prefix  b64decode     Base64 Decode, default nor url safe  b64encode     Base64 Encode, default not url safe  batchchgm     Batch change the mime type of files in bucket  batchchtype   Batch change the file type of files in bucket  batchcopy     Batch copy files from bucket to bucket  batchdelete   Batch delete files in bucket  batchexpire   Batch set the deleteAfterDays of the files in bucket  batchfetch    Batch fetch remoteUrls and save them in qiniu Bucket  batchmove     Batch move files from bucket to bucket  batchrename   Batch rename files in the bucket  batchsign     Batch create the private url from the public url list file  batchstat     Batch stat files in bucket  buckets       Get all buckets of the account  cdnprefetch   Batch prefetch the urls in the url list file  cdnrefresh    Batch refresh the cdn cache by the url list file  chgm          Change the mime type of a file  chtype        Change the file type of a file  completion    generate autocompletion script for bash  copy          Make a copy of a file and save in bucket  d2ts          Create a timestamp in seconds using seconds to now  delete        Delete a remote file in the bucket  dircache      Cache the directory structure of a file path  domains       Get all domains of the bucket  expire        Set the deleteAfterDays of a file  fetch         Fetch a remote resource by url and save in bucket  fput          Form upload a local file  get           Download a single file from bucket  help          Help about any command  ip            Query the ip information  listbucket    List all the files in the bucket  listbucket2   List all the files in the bucket using v2/list interface  m3u8delete    Delete m3u8 playlist and the slices it references  m3u8replace   Replace m3u8 domain in the playlist  mirrorupdate  Fetch and update the file in bucket using mirror storage  move          Move/Rename a file and save in bucket  pfop          issue a request to process file in bucket  prefop        Query the pfop status  privateurl    Create private resource access url  qdownload     Batch download files from the qiniu bucket  qetag         Calculate the hash of local file using the algorithm of qiniu qetag  qupload       Batch upload files to the qiniu bucket  qupload2      Batch upload files to the qiniu bucket  reqid         Decode qiniu reqid  rpcdecode     rpcdecode of qiniu  rpcencode     rpcencode of qiniu  rput          Resumable upload a local file  saveas        Create a resource access url with fop and saveas  stat          Get the basic info of a remote file  sync          Sync big file to qiniu bucket  tms2d         Convert timestamp in milliseconds to a date (TZ: Local)  tns2d         Convert timestamp in Nanoseconds to a date (TZ: Local)  token         Token related command  ts2d          Convert timestamp in seconds to a date (TZ: Local)  unzip         Unzip the archive file created by the qiniu mkzip API  urldecode     Url Decode  urlencode     Url Encode  user          Manage users  version       show versionFlags:  -C, --config string   config file (default is $HOME/.qshell.json)  -d, --debug           debug mode  -h, --help            help for qshell  -L, --local           use current directory as config file path  -v, --version         show versionUse &quot;qshell [command] --help&quot; for more information about a command.</code></pre><p>如果出现<code>Pressmission Denied</code>，则使用<code>chmod</code>命令赋予qshell文件权限即可。 </p><h4 id="新建对象存储"><a href="#新建对象存储" class="headerlink" title="新建对象存储"></a>新建对象存储</h4><p>重新选择一个新的对象储存，注意新建对象储存的地理位置要和原对象储存保持一致。</p><h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><p>首先在qshell中使用<code>account</code>命令配置七牛云账户的<code>AccessKey</code>和<code>SecretKey</code>。</p><pre class=" language-bash"><code class="language-bash">$ qshell account ak sk name</code></pre><p>其中name表示该账号的名称, 如果ak, sk, name首字母是”-“, 需要使用如下的方式添加账号, 这样避免把该项识别成命令行选项:</p><pre class=" language-bash"><code class="language-bash">$ qshell account -- ak sk name</code></pre><p>然后使用<code>batchcopy</code>命令，获取原对象储存的完整文件列表：</p><pre class=" language-bash"><code class="language-bash">$ qshell listbucket bucketname -o list.txt</code></pre><p>其中bucketname是原存储空间名称,将刚刚获取到的list.txt复制到excel里，保留第一列到新的文件<code>name.txt</code></p><p>批量复制文件至新对象储存：</p><pre class=" language-bash"><code class="language-bash">//  qshell batchcopy -y <span class="token operator">&lt;</span>SrcBucket<span class="token operator">></span> <span class="token operator">&lt;</span>DestBucket<span class="token operator">></span> <span class="token punctuation">[</span>-i <span class="token operator">&lt;</span>SrcDestKeyMapFile<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span>$ ./qshell batchcopy -y blogimage qudai -i name.txt</code></pre><p>其中加入<code>-y</code>选项不需要输入验证码，<srcbucket> 原存储空间名称，<destbucket> 新建存储空间名称，<srcdestkeymapfile> 需要复制的文件列表，即上述得到的name.txt</srcdestkeymapfile></destbucket></srcbucket></p><p>批量下载，使用<code>qdownload</code>命令确认复制是否成功</p><pre class=" language-bash"><code class="language-bash">// <span class="token punctuation">[</span><span class="token operator">&lt;</span>ThreadCount<span class="token operator">></span><span class="token punctuation">]</span>: 同时下载文件数量（1-2000），默认为5// <span class="token operator">&lt;</span>LocalDownloadConfig<span class="token operator">></span>: 配置文件，如tmp.conf// qshell qdownload <span class="token punctuation">[</span><span class="token operator">&lt;</span>ThreadCount<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>LocalDownloadConfig<span class="token operator">></span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span>$ ./qshell qdownload tem.conf</code></pre><p>在qshell所在的文件目录新建配置文件，以<code>.conf</code>为后缀，内容：</p><pre class=" language-json"><code class="language-json">/*dest_dir 下载文件存储目录。wins下目录示例 D<span class="token operator">:</span>\\jemy\\backup，尽量不要出现中文，否则涉及编码问题bucket 新建存储空间的名称suffixes 下载文件的后缀cdn_domain 新建存储空间的CDN测试域名，可在新存储空间页面查看*/<span class="token punctuation">{</span>    <span class="token property">"dest_dir"</span>   <span class="token operator">:</span>   <span class="token string">"&lt;LocalBackupDir>"</span><span class="token punctuation">,</span>    <span class="token property">"bucket"</span>     <span class="token operator">:</span>   <span class="token string">"&lt;Bucket>"</span><span class="token punctuation">,</span>    <span class="token property">"suffixes"</span>   <span class="token operator">:</span>   <span class="token string">".png,.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"cdn_domain"</span> <span class="token operator">:</span>   <span class="token string">"down.example.com"</span><span class="token punctuation">}</span></code></pre><p>然后在指定目录就会生成一个新的目录存放文件，等待下载完成即可。</p><h4 id="免费图床推荐"><a href="#免费图床推荐" class="headerlink" title="免费图床推荐"></a>免费图床推荐</h4><p><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></p><p><a href="https://web.500px.com/" target="_blank" rel="noopener">500px</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的新生--Spacevim</title>
      <link href="/2019/02/11/vim-de-xin-sheng-spacevim/"/>
      <url>/2019/02/11/vim-de-xin-sheng-spacevim/</url>
      
        <content type="html"><![CDATA[<p>要说Linux下的文本编辑器大哥，那当然是vim啦。但是除了极少数的大神，使用不带任何plugin的vim对于普通人来说还是稍有些难度。如果使用vim来AA题还好，管理大型项目则是一个不小的挑战，所以就有了今天的主角 <em>Spacevim</em> 的出现，Spacevim是一个<a href>开源项目</a>，有自己的<a href="https://spacevim.org/https://github.com/SpaceVim/SpaceVim" target="_blank" rel="noopener">中英文官网</a>，和丰富详尽的指南，还可以自己定义快捷键模式。将一个上古编译器拉倒现代IDE的水平，真的要给Spacevim的团队一个赞。</p><h4 id="为什么我要使用Spacevim"><a href="#为什么我要使用Spacevim" class="headerlink" title="为什么我要使用Spacevim"></a>为什么我要使用Spacevim</h4><p>Spacevim的界面色彩对于我现在使用的X1 CARBON镜面屏来说比较友好，而且spacevim提供的智能补全功能也提升了效率。当然最关键的还是我的jetbrains全家桶过期了。。。</p><h4 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h4><p>首先更新vim到8.0.0以上的版本，终端下输入</p><pre class=" language-bash"><code class="language-bash">$ curl -sLf https://spacevim.org/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>等待安装完成</p><p>打开vim，第一次打开vim会自动下载插件并配置如果出现网络问题致使插件下载不全，在sapcevim中输入</p><pre class=" language-bash"><code class="language-bash">:SPUpdate</code></pre><p>我在使用时在非root模式下启动vim是会出现提示<code>can&#39;t create ... press enter to continue</code>的提示，这时只要给提示中 … 部分显示的文件夹使用<code>chmod</code>命令赋予权限就可以正常打开了。</p><h5 id="tagbar"><a href="#tagbar" class="headerlink" title="tagbar"></a>tagbar</h5><p>sapcevim中F2快捷键可以打开语法树，如果提示不能，需要安装模块<a href="https://spacevim.org/layers/gtags/" target="_blank" rel="noopener">gtags</a>.</p><p>这里有两种安装方式，由于许多OS的软件库都已经过时了，有可能缺失pygments 和 exuberant ctags的支持，所以我使用从源码编译的方式。</p><h6 id="从软件库安装（Ubuntu）"><a href="#从软件库安装（Ubuntu）" class="headerlink" title="从软件库安装（Ubuntu）"></a>从软件库安装（Ubuntu）</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> global</code></pre><h6 id="从源码编译安装"><a href="#从源码编译安装" class="headerlink" title="从源码编译安装"></a>从源码编译安装</h6><p>如果需要启用 global 的所有特性，你需要安装 2 个额外的软件包：pygments 和 ctags。 这两个可以使用系统自带的包管理器安装：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> exuberant-ctags python-pygments</code></pre><p>编译安装,下载最新的 tar.gz 文件，执行如下命令：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> xvf global-6.5.3.tar.gz$ <span class="token function">cd</span> global-6.5.3$ ./configure --with-exuberant-ctags<span class="token operator">=</span>/usr/bin/ctags$ <span class="token function">make</span>$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>配置 pygments 和 ctags 环境</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> gtags.conf ~/.globalrc</code></pre><p>此外，启动 shell 时需要设置环境变量 GTAGSLABEL，通常需要修改 .profile 文件。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> <span class="token function">export</span> GTAGSLABEL<span class="token operator">=</span>pygments <span class="token operator">>></span> .profile</code></pre><p>启用模块<br>可在配置文件’’init.toml添加如下内容来启用该模块。</p><pre><code>[[layers]]  name = &quot;tags&quot;</code></pre><table><thead><tr><th align="left">快捷键</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left">SPC m g c</td><td align="left">新建 tag 数据库</td></tr><tr><td align="left">SPC m g u</td><td align="left">手动更新 tag 数据库</td></tr><tr><td align="left">SPC m g f</td><td align="left">列出数据库中所涉及到的文件</td></tr><tr><td align="left">SPC m g d</td><td align="left">查找 definitions</td></tr><tr><td align="left">SPC m g r</td><td align="left">查找 references</td></tr><tr><td align="left">##### 大功告成</td><td align="left"></td></tr><tr><td align="left"><img src="https://s2.ax1x.com/2019/02/19/kcXExx.png" alt="完成截图"></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCPC Wannafly Camp Day1</title>
      <link href="/2019/01/20/ccpc-wannafly-camp-day1/"/>
      <url>/2019/01/20/ccpc-wannafly-camp-day1/</url>
      
        <content type="html"><![CDATA[<p>div1 7 div2 6</p><h4 id="Problem-A-机器人"><a href="#Problem-A-机器人" class="headerlink" title="Problem A 机器人"></a>Problem A 机器人</h4><h6 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h6><p>wls管理的仓库分为ABAB两个区，这两个区坐落在两条平行的直线上，每个区有nn个站点，标号分别为1…n1…n，agvagv从站点aa到同仓库的站点bb需要花费abs(a-b)abs(a−b)的时间。</p><p>存在mm个特殊的站点，假如第ii个站点是特殊的，那么agvagv可以花费kk的时间从一个区的ii号站点开到另一个区的ii号站点，agvagv只能通过这些特殊站点实现区与区之间的转换。11号，nn号两个站点都是特殊的站点。</p><p>由于特殊的原因，在同一个区域内，agvagv只能在特殊站点掉头，否则他们只能沿着同一个方向运行。</p><p>现在agvagv正在AA区的站点ss上，他需要经过rr个给定的站点并回到原处，请问最少需要多少时间？</p><p>你可以指定agvagv的初始方向。</p><h6 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h6><p>模拟 分类讨论 6类</p><h4 id="Problem-B-吃豆豆"><a href="#Problem-B-吃豆豆" class="headerlink" title="Problem B 吃豆豆"></a>Problem B 吃豆豆</h4><p>DP ijk 在ij上dp[i][j][k]表示在ijk点最少能吃到多少个糖果。<br>倍增</p><h4 id="Problem-C-拆"><a href="#Problem-C-拆" class="headerlink" title="Problem C 拆"></a>Problem C 拆</h4><p>构造证明</p><h4 id="Problem-E-流动"><a href="#Problem-E-流动" class="headerlink" title="Problem E 流动"></a>Problem E 流动</h4><p>树，</p><h4 id="Problem-F-爬山"><a href="#Problem-F-爬山" class="headerlink" title="Problem F 爬山"></a>Problem F 爬山</h4><p>h1+k，拆点</p><h4 id="Problem-G-双重矩阵"><a href="#Problem-G-双重矩阵" class="headerlink" title="Problem G 双重矩阵"></a>Problem G 双重矩阵</h4><h4 id="Problem-H"><a href="#Problem-H" class="headerlink" title="Problem H"></a>Problem H</h4><h4 id="Problem-K"><a href="#Problem-K" class="headerlink" title="Problem K"></a>Problem K</h4><p>BFS路</p><p>啊好没有毅力啊</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验报告——图</title>
      <link href="/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-tu/"/>
      <url>/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-tu/</url>
      
        <content type="html"><![CDATA[<ul><li>实验目的与要求</li><li>实验步骤与内容</li><li>问题与说明</li><li>备注</li><li>程序清单</li></ul><h3 id="实验目的与要求"><a href="#实验目的与要求" class="headerlink" title="实验目的与要求"></a>实验目的与要求</h3><p>1.了解图的基本性质，实现图的构造流程</p><p>2.图的基本操作</p><p>3.BFS和DFS的思想和实现</p><p>4.图在实际中的应用</p><h3 id="实验步骤与内容"><a href="#实验步骤与内容" class="headerlink" title="实验步骤与内容"></a>实验步骤与内容</h3><p>图</p><p>一个图定义为一个偶对（V，E），记G=(V,E)</p><p>V是顶点（Vertex）的非空有限集，记为V（G）</p><p>E是无序集V和V的一个子集，记为E（G），其元素是图的弧（ARC）</p><p>将顶点集合为空的图称为空图</p><p>弧（Arc）表示为两个顶点v和w之间存在个关系用顶点偶对&lt; V，W&gt;表示。</p><h5 id="1-有向图（Digraph）"><a href="#1-有向图（Digraph）" class="headerlink" title="1.有向图（Digraph）"></a>1.有向图（Digraph）</h5><p>E（G）中顶点偶对&lt; v,w&gt;的v和w有序有向；有向图中 &lt;  v ，w &gt;∈ E（G）；v弧尾始点，w弧头终点。</p><h5 id="2-无向图（Undigraph）"><a href="#2-无向图（Undigraph）" class="headerlink" title="2.无向图（Undigraph）"></a>2.无向图（Undigraph）</h5><p>（v，w）表示边</p><h5 id="3-完全无向图"><a href="#3-完全无向图" class="headerlink" title="3.完全无向图"></a>3.完全无向图</h5><p>顶点n个e条边，有n（n-1）/2 条边的称为完全无向图</p><p>对于无向图G=（V，E），若任意两个不同的节点之间都有一条无向边则称为完全无向图。</p><h5 id="4-完全有向图"><a href="#4-完全有向图" class="headerlink" title="4.完全有向图"></a>4.完全有向图</h5><p>n个点n（n-1）条边<br>，若对于有向图G=（V，E），任意两个不同的节点间有一弧</p><h5 id="5-稀疏图和稠密图"><a href="#5-稀疏图和稠密图" class="headerlink" title="5.稀疏图和稠密图"></a>5.稀疏图和稠密图</h5><p>边或弧的数量e小于nlogn的称为稀疏图</p><h5 id="6-权值（Weight）"><a href="#6-权值（Weight）" class="headerlink" title="6.权值（Weight）"></a>6.权值（Weight）</h5><p>权可以表示从一个顶点到另一个顶点的距离或耗费</p><h5 id="7-子图和生成子图"><a href="#7-子图和生成子图" class="headerlink" title="7.子图和生成子图"></a>7.子图和生成子图</h5><p>设有图G=（V，E） </p><p>子图：图的任意一部分（包括本身）都是图G的一个子图​</p><p>定义：若V(H)⊆V(G)，E(H)⊆E(G)，且H中边的重数不超过G中对应边的条数，则称H为G的子图，记为H⊆G。​</p><p>当H⊆G，但H≠G时，H是G的真子图，记为H⊂G。</p><p>生成子图：若图G的一个子图包含G的所有顶点，称该子图为G的生成子图</p><h5 id="8-顶点的邻接（Adjacent）"><a href="#8-顶点的邻接（Adjacent）" class="headerlink" title="8.顶点的邻接（Adjacent）"></a>8.顶点的邻接（Adjacent）</h5><p>对于无向图G=（V，E），若边（V，W）∈E，则称顶点V和W，互为邻接点，即V和W相邻接，边（V，W）依附（incident）与顶点v和w。</p><h5 id="9-顶点的度，入度，出度"><a href="#9-顶点的度，入度，出度" class="headerlink" title="9.顶点的度，入度，出度"></a>9.顶点的度，入度，出度</h5><p>对于有向图G=（V，E），任意vi∈V，图G中依附于vi的边的数目称为顶点vi的度，记为TD（vi）。</p><p>无向图中，所有顶点的度的和第图中边数的两倍，即<code>ΣTD（vi）=2e</code>。</p><p>有向图中G=（V，E），若vi∈V，以Vi为起点的有向边称出度Outdegree记为OD（vi）。入度Indegree记为ID（vi），顶点vi的出度与入度之和称为vi的度，记为TD（vi），即TD（vi）=OD（vi）+ID（vi）。</p><h5 id="10-路径（Path），路径长度，回路"><a href="#10-路径（Path），路径长度，回路" class="headerlink" title="10.路径（Path），路径长度，回路"></a>10.路径（Path），路径长度，回路</h5><p>对于无向图G=（V，E）若从顶点Vi经边若干条能到Vj称Vi和Vi是连通的又称有路径连接；<br>对于有向图G=（V，E），从顶点Vi到Vj有有向路径，指从Vi经过若干条边能到Vj。</p><p>路径之间所有的顶点序列，路径上的边或弧的数目称为路径长度；简单路径：在一条路径中若没有重复相同的节点该路径称为简单路径。</p><p>回路：第一个顶点和最后一个顶点相同的路径称为回路。</p><p>简单回路：子啊一个回路中若除第一个和最后一个节点外，其余顶点不重复出现称为简单路径。</p><h5 id="11-连通图，图的连通分量"><a href="#11-连通图，图的连通分量" class="headerlink" title="11.连通图，图的连通分量"></a>11.连通图，图的连通分量</h5><p>若任意Vi，Vj∈V，Vi和Vj都是连通的的称图是连通图，否则是非连通图，。若G是非连通图，则极大的连通子图称为G的连通分量，“极大”的含义是指对子图而言再增加G中的其他节点，子图就不再连通。任何连通图的连通分量只有一个，即其本身，而非连通图有多个连通分量。<br>对于有向图G=（V，E）若Vi∈V，Vj∈V，都以Vi为起点Vj为终点，及Vj为起点，Vi为终点，称图G是强连通图，否则称为非强连通图：</p><p>（1）若G是非强连通图，则有极大子图强连通分量</p><p>（2）强连通图只有一个强连通分量，非强连通图有多个连通分量</p><h5 id="12-生成树和生成森林"><a href="#12-生成树和生成森林" class="headerlink" title="12.生成树和生成森林"></a>12.生成树和生成森林</h5><p>一个连通图（无向图）的生成树是一个极小连通子图，它含有全部n个点和n-1条边足以构成一棵树。</p><h5 id="13-网"><a href="#13-网" class="headerlink" title="13.网"></a>13.网</h5><p>每个边或弧都附加一个权值的图，称为带权图；带权的连通图，包括强连通的有向图称为网。</p><h4 id="图的抽象数据类型定义"><a href="#图的抽象数据类型定义" class="headerlink" title="图的抽象数据类型定义"></a>图的抽象数据类型定义</h4><pre class=" language-c"><code class="language-c">ADT<span class="token punctuation">{</span>    数据对象V：具有相同特性的数据元素的集合，称为顶点集    数据对象R：R<span class="token operator">=</span><span class="token punctuation">{</span>VR<span class="token punctuation">}</span>        VR<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>v<span class="token punctuation">,</span>w<span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span>v<span class="token punctuation">,</span>w<span class="token operator">></span><span class="token operator">|</span>v<span class="token punctuation">,</span>w∈V∩<span class="token function">p</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>v<span class="token punctuation">,</span>w<span class="token operator">></span>表示从v到w的hu        <span class="token function">p</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span>定义了弧的信息<span class="token punctuation">}</span></code></pre><h4 id="图的储存结构和基本操作"><a href="#图的储存结构和基本操作" class="headerlink" title="图的储存结构和基本操作"></a>图的储存结构和基本操作</h4><h5 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h5><p>用一位数组vexs[n]存储顶点</p><p>用二维数组A[n][n]存储顶点之间的关系，该二位数组称邻接矩阵。在邻接矩阵里，以顶点在vexs数组中下标表示点，邻接矩阵中A[i][j]存放关系</p><h6 id="无向图的数组表示"><a href="#无向图的数组表示" class="headerlink" title="无向图的数组表示"></a>无向图的数组表示</h6><p>（1）无权图的邻接矩阵</p><p>是个n阶对称方阵，<code>A[i][j]=1，若（vi，vj）∈E，A[i][j]=1，若（vi，vj）∉E</code></p><p>（2）带权图的邻接矩阵</p><p>无向带权图G=（V，E）的邻接矩阵，是 一个方阵对角线元素为无穷大，如果有权值则为W，如果没有弧则为正无穷。</p><p>（3）无向图邻接矩阵的特征</p><p>是方阵，Vi的度数为邻接矩阵第i行非0元素个数，边数是上或下三角矩阵</p><h6 id="有向图的数组"><a href="#有向图的数组" class="headerlink" title="有向图的数组"></a>有向图的数组</h6><p>（1）无权图的邻接矩阵</p><p>1表示连接0表示没有连接</p><p>（2）带权图的邻接矩阵</p><p>简单自己想象一下</p><p>（3）有向图邻接矩阵的特征<br>非0元个数是弧数，第i行非0元非个数是出度OD（vi）；第i列非0元个数是入度ID（vi）。</p><h6 id="图的邻接矩阵的操作"><a href="#图的邻接矩阵的操作" class="headerlink" title="图的邻接矩阵的操作"></a>图的邻接矩阵的操作</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> INIFINITY MAX_VAL</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_VEX 30</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> AdjType<span class="token punctuation">{</span>    ArcvalType ArcVal<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//权值</span>    ArcInfoType ArcInfo<span class="token punctuation">;</span><span class="token punctuation">}</span>AdjType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ArcType<span class="token punctuation">{</span>    VexType vex1<span class="token punctuation">,</span>vex2<span class="token punctuation">;</span>    ArcvalType ArcVal<span class="token punctuation">;</span>    ArcInforType ArcInfor<span class="token punctuation">;</span><span class="token punctuation">}</span>ArcType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    GraphKind Kind<span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span>    VexType vexs<span class="token punctuation">[</span>MAX_VEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    AdjType adj<span class="token punctuation">[</span>MAX_VEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span></code></pre><p>或</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ArcVal<span class="token punctuation">{</span>    IType adj<span class="token punctuation">;</span>    InforType <span class="token operator">*</span>Infor<span class="token punctuation">;</span><span class="token punctuation">}</span>ArcCell<span class="token punctuation">,</span>AddMatrix<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    VertexType vexs<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    AdjMatrix arcs<span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span>    Graphkind kind<span class="token punctuation">;</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span></code></pre><p>图的各种操作：<br>（1）图的创建</p><pre class=" language-c"><code class="language-c">AdjGraph <span class="token operator">*</span><span class="token function">Create_Graph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token operator">-></span>vexnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> G<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>(2)图的顶点定位</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Locatevex</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">,</span>VexType <span class="token operator">*</span>vp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>vp<span class="token punctuation">)</span>            <span class="token keyword">return</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>(3)加点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">AddVertex</span><span class="token punctuation">(</span>Mgraph <span class="token operator">*</span>G<span class="token punctuation">,</span>VexType <span class="token operator">*</span>vp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexnum <span class="token operator">>=</span> MAX_VEX<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>vp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    k<span class="token operator">=</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>    G<span class="token operator">-></span>vexs<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>vp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>kinf<span class="token operator">==</span>DG<span class="token operator">||</span>G<span class="token operator">-></span>kind<span class="token operator">==</span>WDG<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            G<span class="token operator">-></span>adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Arcval<span class="token operator">=</span>G<span class="token operator">-></span>adj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Arcval<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            G<span class="token operator">-></span>adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Arcval<span class="token operator">=</span>INFINTY<span class="token punctuation">;</span>            G<span class="token operator">-></span>adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Arcval<span class="token operator">=</span>INFINTY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>(4)向图中加弧</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">AddArc</span><span class="token punctuation">(</span>Mgraph <span class="token operator">*</span>G<span class="token punctuation">,</span>ArcType <span class="token operator">*</span>arc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token function">Locate</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token operator">&amp;</span>arc<span class="token operator">-></span>vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>    j<span class="token operator">=</span><span class="token function">Locate</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token operator">&amp;</span>arc<span class="token operator">-></span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>kind<span class="token operator">==</span>DG<span class="token operator">||</span>G<span class="token operator">-></span>kind<span class="token operator">==</span>WDG<span class="token punctuation">)</span><span class="token punctuation">{</span>        G<span class="token operator">-></span>adj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ArcVal<span class="token operator">=</span>arc<span class="token operator">-></span>Val<span class="token punctuation">;</span>        G<span class="token operator">-></span>adj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Infor<span class="token operator">=</span>arc<span class="token operator">-></span>Infor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        G<span class="token operator">-></span>adj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ArcVal<span class="token operator">=</span>arc<span class="token operator">-></span>Val<span class="token punctuation">;</span>        G<span class="token operator">-></span>adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>ArcVal<span class="token operator">=</span>arc<span class="token operator">-></span>Val<span class="token punctuation">;</span>        G<span class="token operator">-></span>adj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Infor<span class="token operator">=</span>arc<span class="token operator">-></span>Infor<span class="token punctuation">;</span>        G<span class="token operator">-></span>adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Infor<span class="token operator">=</span>arc<span class="token operator">-></span>Infor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="邻接链表法"><a href="#邻接链表法" class="headerlink" title="邻接链表法"></a>邻接链表法</h5><p>对图的每一个顶点简历一个单链表存储该顶点所有的邻接顶点及其信息，每个单链表都有一个表头结点。</p><p>第i个单链表表示依附于Vi的边（对有向图来说是以顶点Vi为头或尾的弧）。</p><h6 id="节点结构与邻接链表示例"><a href="#节点结构与邻接链表示例" class="headerlink" title="节点结构与邻接链表示例"></a>节点结构与邻接链表示例</h6><p>链表中的节点称为表节点，由三个域组成：</p><p>邻接点域（adjvex）指示与顶点Vi邻接的顶点在图中的位置（编号）</p><p>链域（nextarc）指向下一个与顶点Vi邻接的表节点</p><p>数据域（data）储存与表节点相关的各种信息如权值等</p><h6 id="链表法的特点"><a href="#链表法的特点" class="headerlink" title="链表法的特点"></a>链表法的特点</h6><p>表头向量中每个分量就是一个单链表的表头节点，分量个数就是图中的顶点个数。</p><p>在边或弧稀疏的情况下用链表表示比使用矩阵节省空间</p><p>在无向图，顶点Vi的度是第i个链表的节点数</p><p>有向图可以建立正邻接表和逆邻接表，正邻接表是以Vi出度建立的邻接表，逆邻接表是一Vi入度建立的邻接表</p><p>有向图中第i个链表中的节点数是顶点Vi的出（入）度；求整个出度或入度需要遍历整个邻接表。</p><h6 id="节点及其定义"><a href="#节点及其定义" class="headerlink" title="节点及其定义"></a>节点及其定义</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXVEX 40;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> InforType <span class="token punctuation">;</span>typeef <span class="token keyword">enum</span><span class="token punctuation">[</span>DG<span class="token punctuation">,</span>AG<span class="token punctuation">,</span>WDG<span class="token punctuation">,</span>WAG<span class="token punctuation">]</span>GraphKind<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> LinkNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    InfoType info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> LinkNode <span class="token operator">*</span>nextarc<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> VexType<span class="token punctuation">{</span>    VexType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> indegree<span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>firstarc<span class="token punctuation">;</span><span class="token punctuation">}</span>VexNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ArcType<span class="token punctuation">{</span>    VexType vex1<span class="token punctuation">,</span>vex2<span class="token punctuation">;</span>    InforType info<span class="token punctuation">;</span><span class="token punctuation">}</span>ArcType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    GraphKind kind<span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">;</span>    VexNode AdjList<span class="token punctuation">[</span>MAX_VES<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ALGraph<span class="token punctuation">;</span></code></pre><h6 id="图的创建"><a href="#图的创建" class="headerlink" title="图的创建"></a>图的创建</h6><pre class=" language-c"><code class="language-c">ALGraph <span class="token operator">*</span><span class="token function">Create_Graph</span><span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>Kind<span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>    <span class="token keyword">return</span> G<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="图的顶点定位"><a href="#图的顶点定位" class="headerlink" title="图的顶点定位"></a>图的顶点定位</h6><p>实际上是确定一个顶点在AdjList数组中的某个元素的data域内容</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> Locate（ALGraph <span class="token operator">*</span>G<span class="token punctuation">,</span>VexType <span class="token operator">*</span>vp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">==</span><span class="token operator">*</span>vp<span class="token punctuation">)</span>            <span class="token keyword">return</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="图的加顶点"><a href="#图的加顶点" class="headerlink" title="图的加顶点"></a>图的加顶点</h6><p>在AdjList数组末尾增加一个节点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> AddVertex（ALGraph <span class="token operator">*</span>G<span class="token punctuation">,</span>VexType <span class="token operator">*</span>vp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexnum <span class="token operator">>=</span> MAX_VEX<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>vp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span><span class="token operator">*</span>vp<span class="token punctuation">;</span>    G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">]</span><span class="token punctuation">.</span>degree<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token operator">++</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="4-向图中加弧"><a href="#4-向图中加弧" class="headerlink" title="(4)向图中加弧"></a>(4)向图中加弧</h6><p>无向图改一个表，有向图改两个表</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">AddArc</span><span class="token punctuation">(</span>AlGraph <span class="token operator">*</span>G<span class="token punctuation">,</span>ARcType <span class="token operator">*</span>arc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token operator">&amp;</span>arc<span class="token operator">-></span>vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>    j<span class="token operator">=</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token operator">&amp;</span>arc<span class="token operator">-></span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>j<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LonkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>adjvex<span class="token operator">=</span>arc<span class="token operator">-></span>vex1<span class="token punctuation">;</span>    p<span class="token operator">-></span>info<span class="token operator">=</span>arc<span class="token operator">-></span>infor<span class="token punctuation">;</span>    p<span class="token operator">-></span>nextarc<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>adjvex<span class="token operator">=</span>arc<span class="token operator">-></span>vex2<span class="token punctuation">;</span>    q<span class="token operator">-></span>info<span class="token operator">=</span>arc<span class="token operator">-></span>infor<span class="token punctuation">;</span>    q<span class="token operator">-></span>nextarc<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>kind<span class="token operator">==</span>AG<span class="token operator">||</span>g<span class="token operator">-></span>Kind<span class="token operator">==</span>WAG<span class="token punctuation">)</span><span class="token punctuation">{</span>        q<span class="token operator">-></span>nextarc<span class="token operator">=</span>G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token operator">=</span>q<span class="token punctuation">;</span>        p<span class="token operator">-></span>nextarc<span class="token operator">=</span>G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        q<span class="token operator">-></span>nextarc <span class="token operator">=</span> G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token operator">=</span>q<span class="token punctuation">;</span>        p<span class="token operator">-></span>nextarc<span class="token operator">=</span>G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token operator">=</span>p<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//无向图</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        q<span class="token operator">-></span>nextarc <span class="token operator">=</span> G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token operator">=</span>q<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//p->nextarc = G->adjList[j].firstarc;</span>        <span class="token comment" spellcheck="true">//g->adjList[j].firstarc=p;</span>        <span class="token comment" spellcheck="true">//有向图</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="十字链表（Orthogonal-List）"><a href="#十字链表（Orthogonal-List）" class="headerlink" title="十字链表（Orthogonal List）"></a>十字链表（Orthogonal List）</h5><p>是有向图的另一种链式储存，是将正邻接表和逆邻接表结合起来</p><p>每条弧的弧头节点和弧尾节点都存放在链表中，并将弧节点分别组织到以弧尾节点为头（顶点）和一弧头节点为头的链表中。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> INIFITY MAX_VAL;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_VEX 30;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ArcNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> tailvex <span class="token punctuation">,</span>headvex<span class="token punctuation">;</span>    InfoType info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ArcNode<span class="token punctuation">,</span><span class="token operator">*</span>hlink<span class="token punctuation">,</span><span class="token operator">*</span>tlink<span class="token punctuation">;</span><span class="token punctuation">}</span>ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> VexNode<span class="token punctuation">{</span>    VexType data<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>firstin<span class="token punctuation">,</span><span class="token operator">*</span>firstout<span class="token punctuation">;</span><span class="token punctuation">}</span>VexNode<span class="token punctuation">;</span>tyedef <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">;</span>    VexNode tlink<span class="token punctuation">[</span>MAX_VEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>OLGraph<span class="token punctuation">;</span></code></pre><p>从firstout出发，沿着tlink构成正邻接表；从firstin出发，沿着hlink构成逆邻接表。</p><h5 id="邻接多重表（Adjacency-Multlist）"><a href="#邻接多重表（Adjacency-Multlist）" class="headerlink" title="邻接多重表（Adjacency Multlist）"></a>邻接多重表（Adjacency Multlist）</h5><p>是无向图的另一种链式存储结构</p><p>邻接多重表和邻接表的区别：后者的同一条表要用两个表节点，而邻接多重表只要一个点</p><h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><p>遍历的要求：每个顶点仅一次，复杂性可能多次访问，解决办法，打标记。</p><h4 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h4><p>使用正邻接表</p><h5 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h5><p>设初始状态，所有节点都未被访问则：</p><p>（1）从图中某个节点Vi出发，访问Vi然后找到Vi的一个邻接顶点Vi</p><p>（2）从Vi出发深度优先访问Vi相邻接且未被访问过的所有节点</p><p>（3）转到（1），直到与Vi相邻接的所有的节点都被遍历</p><p>（4）继续选取图中的未被访问的节点，Vj作为起始顶点转（1），直到图中所有节点都被遍历</p><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><p>由算法思想知，这是一个递归过程，因此先设计一个从某个顶点为V0开始深度优先搜索的函数，便于调用</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> emun<span class="token punctuation">{</span>FALSE<span class="token punctuation">,</span>TRUE<span class="token punctuation">}</span> BOOLEAN<span class="token punctuation">;</span>BOOLEAN Visited<span class="token punctuation">[</span>MAX_VEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    Visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DFS_traverse_Graph</span><span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//p=G->AdjList[v].first;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>boolean visited<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">Status</span> <span class="token punctuation">(</span><span class="token operator">*</span>VisitFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token function">Status</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    VisitFunc <span class="token operator">=</span> Visit<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>FALSE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>W<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">,</span><span class="token function">VisitFunc</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token function">NextAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><p>顶点至多有一次DFS，有e条边，n个顶点的图DFS时间复杂度为O（n+e），实质是对每个顶点查找邻接顶点的过程。</p><h4 id="广度优先搜索算法（BFS）"><a href="#广度优先搜索算法（BFS）" class="headerlink" title="广度优先搜索算法（BFS）"></a>广度优先搜索算法（BFS）</h4><p>层次遍历过程</p><h5 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h5><p>设初始节点所有都未被访问</p><p>（1）从Vi出发访问Vi；</p><p>（2）访问Vi所有节点；</p><p>（3）以Vi1，Vi2。。。的次序转（1）；</p><p>（4）继续选择未访问节点作为起点，转（1），直到图中所有节点都被访问。</p><h5 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h5><p>加标记数组，要加一个队列保存相邻接的节点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> emun <span class="token punctuation">{</span>FALSE<span class="token punctuation">,</span>TRUE<span class="token punctuation">}</span> BOOLEAN<span class="token punctuation">;</span>BOOLEAN Vistied<span class="token punctuation">[</span>MAX_VEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Queue<span class="token punctuation">{</span>    <span class="token keyword">int</span> elem<span class="token punctuation">[</span>MAX_VEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token punctuation">}</span>Queue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">BFS_traverse_Graph</span><span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    Queue <span class="token operator">*</span>Q<span class="token punctuation">;</span>    Q<span class="token operator">=</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">siezof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>front<span class="token operator">=</span>Q<span class="token operator">-></span>rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>FALSE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        v<span class="token operator">=</span>G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Q<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token operator">-></span>rear<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>front<span class="token operator">!=</span>Q<span class="token operator">-></span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>                w<span class="token operator">=</span>Q<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">;</span>                <span class="token function">visited</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">=</span>G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">;</span>                        <span class="token function">visit</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                        Q<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token operator">-></span>rear<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    p<span class="token operator">=</span>p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BFS_Traverse</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token function">Status</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    visited<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>FALSE<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">;</span>            <span class="token function">visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token function">FirstAdjvex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token function">NextAdNext</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">;</span>                        <span class="token function">visit</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>次序不同，时间O（n+e）DFS 回溯的方法；BFS分层顺序不是递归算法</p><h4 id="图的遍历算法的应用"><a href="#图的遍历算法的应用" class="headerlink" title="图的遍历算法的应用"></a>图的遍历算法的应用</h4><h5 id="无向图的连通分量"><a href="#无向图的连通分量" class="headerlink" title="无向图的连通分量"></a>无向图的连通分量</h5><p>生成树</p><p>对于无向图，对其遍历时</p><p>若连通图仅需从任一顶点出发就访问图中的所有顶点</p><p>若非连通图：从图中多个顶点出发，每次从一个新点出发访问所有的节点集序列恰好是各个连通分量的顶点集。</p><h5 id="图的生成树和生成森林算法"><a href="#图的生成树和生成森林算法" class="headerlink" title="图的生成树和生成森林算法"></a>图的生成树和生成森林算法</h5><p>储存结构，孩子-兄弟表示法 递归算法</p><p>对DFS（BFS）稍作修改</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> CSNode<span class="token punctuation">{</span>    ELemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> CSNode <span class="token operator">*</span>firstchild<span class="token punctuation">,</span><span class="token operator">*</span>nextsibing<span class="token punctuation">;</span><span class="token punctuation">}</span>CSNode <span class="token punctuation">;</span>CSNode <span class="token operator">*</span><span class="token function">DFStree</span><span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    CSNode <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">;</span>    T<span class="token operator">=</span><span class="token punctuation">(</span>CSNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CSNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    T<span class="token operator">-></span>data<span class="token operator">=</span>G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    T<span class="token operator">-></span>firstchild<span class="token operator">=</span>T<span class="token operator">-></span>nextsibling<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    p<span class="token operator">=</span>G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">:</span>    p<span class="token operator">=</span>G<span class="token operator">-></span>AdjList<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        w<span class="token operator">=</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ptr<span class="token operator">=</span><span class="token function">DFStree</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T<span class="token operator">-></span>firstchild<span class="token operator">=</span>ptr<span class="token punctuation">;</span>            <span class="token keyword">else</span> q<span class="token operator">-></span>nextsibling<span class="token operator">=</span>ptr<span class="token punctuation">;</span>            q<span class="token operator">=</span>ptr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>判断连通性</p><pre class=" language-c"><code class="language-c">bool <span class="token function">Connect</span><span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    bool flag<span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-></span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-></span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span>false<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="最小生成树（Minimum-Spanning-Tree）MST"><a href="#最小生成树（Minimum-Spanning-Tree）MST" class="headerlink" title="最小生成树（Minimum Spanning Tree）MST"></a>最小生成树（Minimum Spanning Tree）MST</h5><p>权值最小但是不构成回路，n-1条边</p><h6 id="普利姆算法（Prim）"><a href="#普利姆算法（Prim）" class="headerlink" title="普利姆算法（Prim）"></a>普利姆算法（Prim）</h6><p>算法实现</p><p>邻接矩阵（二维数组）两个顶点间不存在权，标记为最大值。</p><p>设置一个一维数组closedge保存V-V中各顶点到V中顶点是有权后最小的边</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">;</span><span class="token punctuation">}</span>closedge<span class="token punctuation">[</span>MAX_EDGE<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><code>closedge[j].adjvex=k</code>表明边（Vi，Vk）是V-V中顶点j到V中权值最小的边</p><p>算法步骤<br>（1）从closedge中选择一条权值最小的边（Vk，Vj）</p><p>设closedge[k].lowcost为0，Vk加入V中；</p><p>根据Vk更新的closedge每个元素：任意Vi∈V-V，若cost（i，k）≤ closedge[i].lowcost</p><p>加入Vk后，（Vi，Vk）或Vi到U中权值最小的边<br><code>closedge[i].lowcost=cost(i,k);closedge[i].adjvex=k;</code></p><p>（2）重复（1）n-1次就得到了MST</p><p>在prime中，图采用邻接矩阵存储，所构成最小生成树用一维数组n-1</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> MSTEdge<span class="token punctuation">{</span>    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span>vex2<span class="token punctuation">;</span>    WeightType weight<span class="token punctuation">;</span><span class="token punctuation">}</span>MSTEdge<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> INIFITY MAX_VAL;</span>MSTEdge <span class="token operator">*</span><span class="token function">Prim_MST</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    MSTEdge TE<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>min<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        closedge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adjvex<span class="token operator">=</span>u<span class="token punctuation">;</span>        closedge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token operator">=</span>G<span class="token operator">-></span>adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    closedge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    TE<span class="token operator">=</span><span class="token punctuation">(</span>MSTEdge <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MSTEdge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         min<span class="token operator">=</span>INFINITY<span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>closedge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> closedge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token punctuation">{</span>                min<span class="token operator">=</span>closedge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token punctuation">;</span>                k<span class="token operator">=</span>v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            TE<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vex1<span class="token operator">=</span>closedge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>adjvex<span class="token punctuation">;</span>            TE<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vex2<span class="token operator">=</span>k<span class="token punctuation">;</span>            TE<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>closedge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token punctuation">;</span>            closedge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token operator">-></span>adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> closedge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token punctuation">)</span><span class="token punctuation">{</span>                    closedge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token operator">=</span>G<span class="token operator">-></span>adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    closedge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>adjvex<span class="token operator">=</span>k'                <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>时间复杂度为O（n^2)与边的数目无关，求closedge权值最小的边为n-1修改closedge</p><h5 id="克鲁斯卡尔算法（Kruskal）"><a href="#克鲁斯卡尔算法（Kruskal）" class="headerlink" title="克鲁斯卡尔算法（Kruskal）"></a>克鲁斯卡尔算法（Kruskal）</h5><p>Kruskal算法实现的关键是判断能否构成边，定义数组vset[n]存放T中每个顶点所在的连通分量的编号</p><p>初值：Vset[i]=i;表示每个点都是一个独立的连通分量</p><p>当往T中加入边（vi，vj）时先检查vset[i]vest[j]的值，若vset[i]=vset[j],表明vi和vj在同一个连通分量里，会产生回路</p><p>加入新点，将两个分量合并将一个连通分量的编号换成另一个的</p><pre class=" language-c"><code class="language-c">MSTEdge <span class="token operator">*</span><span class="token function">Kurskal_MST</span><span class="token punctuation">(</span>ELGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    MSTEdge TE<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>vset<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    WeightType w<span class="token punctuation">;</span>    Vset<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexnum<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G0<span class="token operator">></span>vexnum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        vset<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>G<span class="token operator">-></span>edgeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-></span>edgenum<span class="token punctuation">)</span><span class="token punctuation">{</span>        s1<span class="token operator">=</span>Vset<span class="token punctuation">[</span>G<span class="token operator">-></span>edgelist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token operator">=</span>Vset<span class="token punctuation">[</span>G<span class="token operator">-></span>edgelist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token operator">!=</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>            TE<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>vex1<span class="token operator">=</span>G<span class="token operator">-></span>edgelist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vex1<span class="token punctuation">;</span>            TE<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>vex2<span class="token operator">=</span>G<span class="token operator">-></span>edgelist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vex2<span class="token punctuation">;</span>            TE<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>G<span class="token operator">-></span>edgelist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>vset<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span>s2<span class="token punctuation">)</span>                     vset<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>s1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>vset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> TE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>算法时间复杂度O（eloge+n^2)</p><h3 id="问题与说明"><a href="#问题与说明" class="headerlink" title="问题与说明"></a>问题与说明</h3><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>CLion开发环境，C语言实现</p><h3 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h3>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验报告——二叉树</title>
      <link href="/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-shu-he-er-cha-shu/"/>
      <url>/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-shu-he-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<ul><li>实验目的与要求</li><li>实验步骤与内容</li><li>问题与说明</li><li>备注</li><li>程序清单</li></ul><h3 id="实验目的与要求"><a href="#实验目的与要求" class="headerlink" title="实验目的与要求"></a>实验目的与要求</h3><p>1.了解树的概念</p><p>2.会使用树的基本操作</p><p>3.理解先序，中序，后序遍历的不同</p><p>4.理解树的递归和非递归，以及层次遍历方法</p><h3 id="实验步骤与内容"><a href="#实验步骤与内容" class="headerlink" title="实验步骤与内容"></a>实验步骤与内容</h3><h4 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h4><p>树是n个节点组成的集合T，n=0的称为空树。有且只有一个特殊的节点称为根节点，若n&gt;1时，其余的节点被分成m个互不相交的子集，T1，T2，T3，T4…Tm，其中每个子集本身又是一颗树，称其为根的子树(Subtree).</p><h4 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h4><p>(1)结点(node)：一个数据元素，及其若干子树的分支;</p><p>(2)节点的度(dergee),树的度：节点所拥有的子树的棵数称为节点的度，树中节点度的最大值为树的度。</p><p>(3)叶子(leaf)节点：度为0的节点称为叶子节点。</p><p>(4)孩子(child)节点，双亲(parent)节点，兄弟节点。</p><p>(5)层次-堂兄弟节点：根节点层次为1，其余为双亲节点层次加 1。</p><p>(6)节点层次路径，祖先节点，子孙节点：从根开始，到达节点p所经过的所有节点为p的所有层次路径有且只有一条，p层次路径上的所有节点（p除外）都称为p的祖先，以某一节点为根的子树中的任意节点，称为该节点的子孙节点。</p><p>(7)树的深度（depth）：树中节点最大的层次值，又称高度。树的深度是指层次上是由上到下递增的，而树的高度，叶子节点的高度为一，双亲节点的高度为叶子节点加1，是从上往下递增的。树的高度等于根节点的高度，等于所有子节点高度最大值+1.<br>对于节点来说深度和高度不同，而树的深度和高度相同。</p><p>(8)有序树，无序树。</p><p>(9)森林（forest）：m棵互不相交的树的集合，将一棵树的根节点去掉剩下的就是森林。</p><h4 id="树的表示形式"><a href="#树的表示形式" class="headerlink" title="树的表示形式"></a>树的表示形式</h4><p>（1）倒悬树（最常用的表示形式）<br>（2）嵌套几何（自行想想文氏图）<br>（3）广义表<br>（4）凹入法</p><h3 id="树的抽象数据类型"><a href="#树的抽象数据类型" class="headerlink" title="树的抽象数据类型"></a>树的抽象数据类型</h3><pre class=" language-c"><code class="language-c">ADT Tree<span class="token punctuation">{</span>    数据对象D：具有相同数据类型的数据元素的集合    数据关系R：若D为空集则称为空树<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>ADT Tree；</code></pre><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h4><p>Binary Tree:n=0为空树,(1)有且只有一根（2）n&gt;1时，其余分成两个互不相交的子集，T1，T2分别为左右子树，二叉树的定义是递归的。</p><h4 id="二叉树的基本形态"><a href="#二叉树的基本形态" class="headerlink" title="二叉树的基本形态"></a>二叉树的基本形态</h4><p>（1）空二叉树<br>（2）单节点二叉树<br>（3）右子树为空的二叉树<br>（4）左子树为空的二叉树<br>（5）左右都不为空</p><h4 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h4><h5 id="性质1：在非空二叉树中第i层上至多有2-i-1-个节点"><a href="#性质1：在非空二叉树中第i层上至多有2-i-1-个节点" class="headerlink" title="性质1：在非空二叉树中第i层上至多有2^(i-1)个节点"></a>性质1：在非空二叉树中第i层上至多有2^(i-1)个节点</h5><h6 id="proof"><a href="#proof" class="headerlink" title="proof:"></a>proof:</h6><p>i=1时只有一个节点,成立;</p><p>i&gt;1时处在第i-1层上至多有2^((i-1)-1)个节点</p><p>由归纳法可知i-1层上有2^(i-2)个节点,所以下一层节点数为两倍即2^(i-1).</p><h5 id="性质2-深度为k的二叉树至多有2-k-1个节点"><a href="#性质2-深度为k的二叉树至多有2-k-1个节点" class="headerlink" title="性质2:深度为k的二叉树至多有2^k-1个节点"></a>性质2:深度为k的二叉树至多有2^k-1个节点</h5><h6 id="proof-1"><a href="#proof-1" class="headerlink" title="proof:"></a>proof:</h6><p>2^0+2^1+…+2^(k-1)=2^k-1;</p><h5 id="性质3-对于任何一颗二叉树其叶子节点为n0-度为2的节点数为n2-n0-n2-1"><a href="#性质3-对于任何一颗二叉树其叶子节点为n0-度为2的节点数为n2-n0-n2-1" class="headerlink" title="性质3:对于任何一颗二叉树其叶子节点为n0,度为2的节点数为n2,n0=n2+1"></a>性质3:对于任何一颗二叉树其叶子节点为n0,度为2的节点数为n2,n0=n2+1</h5><h6 id="proof-2"><a href="#proof-2" class="headerlink" title="proof:"></a>proof:</h6><p>设二叉树中度为1的节点为n1个,二叉树总结点数为N,则有<code>N=n0+n1+n2</code>,再看二叉树中节点的分支数,设B为二叉树中的分支总数,有<code>N=B+1</code>,而<code>B=n1+2*n2</code>即推出<code>N=B+1=n+2*n2+1</code>,结合总结点数可推出<code>n0=n2+1</code>。</p><h4 id="性质4n个节点的完全二叉树深度为floor-log2n-1"><a href="#性质4n个节点的完全二叉树深度为floor-log2n-1" class="headerlink" title="性质4n个节点的完全二叉树深度为floor(log2n)+1."></a>性质4n个节点的完全二叉树深度为floor(log2n)+1.</h4><h6 id="满二叉树与完全二叉树"><a href="#满二叉树与完全二叉树" class="headerlink" title="满二叉树与完全二叉树:"></a>满二叉树与完全二叉树:</h6><p>Full Binary Tree:一颗深度为k且有2^k-1个节点的二叉树。</p><p>Complete Binary Tree:如果深度为k,由n个节点的二叉树,当且仅当每一个节点都与深度为k的满二叉树中编号从1到n的节点一一对应,该二叉树称为完全二叉树。深度为k的满二叉树中编号从1到n的前n个节点构成了一颗深度为k的完全二叉树（2^(k-1)≤n≤2^k-1）。</p><p>满二叉树的特点：每层MAX数，都有左右子树，编号从上到下，从左到右递增。</p><p>完全二叉树是满二叉树的一部分，满二叉树是完全二叉树的一种特例。</p><p>完全二叉树的特点：深度为k，则所有叶子节点都在第k或第k-1层，对于任意一节点，如果其右子树的最大层次为1，则左子树的最大为i或i-1。</p><h6 id="proof："><a href="#proof：" class="headerlink" title="proof："></a>proof：</h6><p>假设深度为k的完全二叉树则根据性质2有<code>2^(k-1)-1＜n≤2^k-1</code>或<code>2^(k-1)≤n&lt;2^k</code>.</p><p>取对数得<code>k-1&lt;log2n&lt;k</code>所以<code>k=floor(log2n)+1</code>另一种形式<code>k=ceil(log2(n+1))</code>。</p><h5 id="性质5：若对一颗有n个节点的完全二叉树（深度为floor（log2n）-1）的节点按层（从第1层到第floor（log2n）-1层）自左至右进行编号，则对于编号为i（1≤i≤n）的节点："><a href="#性质5：若对一颗有n个节点的完全二叉树（深度为floor（log2n）-1）的节点按层（从第1层到第floor（log2n）-1层）自左至右进行编号，则对于编号为i（1≤i≤n）的节点：" class="headerlink" title="性质5：若对一颗有n个节点的完全二叉树（深度为floor（log2n）+1）的节点按层（从第1层到第floor（log2n）+1层）自左至右进行编号，则对于编号为i（1≤i≤n）的节点："></a>性质5：若对一颗有n个节点的完全二叉树（深度为floor（log2n）+1）的节点按层（从第1层到第floor（log2n）+1层）自左至右进行编号，则对于编号为i（1≤i≤n）的节点：</h5><p>（1）若i=1，则节点i是二叉树的根，无双亲节点；否则，若i＞1，其双亲节点floor（i/2）；</p><p>（2）如果2i&gt;n，则节点i为叶子节点，无左孩子，否则，则其孩子节点是2i；</p><p>（3）如果2i+1&gt;n，则节点i无右孩子；否则其右孩子节点编号是2i+1。</p><h6 id="proof：-1"><a href="#proof：-1" class="headerlink" title="proof："></a>proof：</h6><p>i=1时，由定义知，左孩子编号为2，右孩子节点为3；</p><p>2&gt;n则二叉树左孩子不存在，若3&gt;n则右孩子不存在。当2j+1≤n，右孩子节点为2j+1若2j+1＞n，则没有右孩子节点。</p><p>i=j+1时，由完全二叉树性质知（2j+1）+1=2（j+1）。</p><p>i＞1时设编号为i的节点的双亲节点的编号为m由（2）有左孩子<code>i=2m</code>即<code>m=floor（1/2）</code>右孩子<code>i=2m+1</code>，即<code>m=floor((m-1)/2)</code>i&gt;1时双亲节点为floor（i/2）。</p><h4 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h4><h5 id="性质1：树中节点数等于所有节点数的度数加1"><a href="#性质1：树中节点数等于所有节点数的度数加1" class="headerlink" title="性质1：树中节点数等于所有节点数的度数加1."></a>性质1：树中节点数等于所有节点数的度数加1.</h5><h6 id="度之和等于分支数，分支数等于n-1，n-度之和-1"><a href="#度之和等于分支数，分支数等于n-1，n-度之和-1" class="headerlink" title="度之和等于分支数，分支数等于n-1，n=度之和+1"></a>度之和等于分支数，分支数等于n-1，n=度之和+1</h6><h5 id="性质2：度为m的树中第i层至多有m-i-1-个节点，这里有i≥1"><a href="#性质2：度为m的树中第i层至多有m-i-1-个节点，这里有i≥1" class="headerlink" title="性质2：度为m的树中第i层至多有m^(i-1)个节点，这里有i≥1"></a>性质2：度为m的树中第i层至多有m^(i-1)个节点，这里有i≥1</h5><h5 id="性质3：高度为h的m次树至多有（m-n-1-m-1-个节点"><a href="#性质3：高度为h的m次树至多有（m-n-1-m-1-个节点" class="headerlink" title="性质3：高度为h的m次树至多有（m^n-1)/(m-1)个节点"></a>性质3：高度为h的m次树至多有（m^n-1)/(m-1)个节点</h5><h5 id="性质4：具有n个节点的m次树的最小高度为ceil（logm（n-m-1-1））。"><a href="#性质4：具有n个节点的m次树的最小高度为ceil（logm（n-m-1-1））。" class="headerlink" title="性质4：具有n个节点的m次树的最小高度为ceil（logm（n(m-1)+1））。"></a>性质4：具有n个节点的m次树的最小高度为ceil（logm（n(m-1)+1））。</h5><h4 id="二叉树的顺序和链式存储"><a href="#二叉树的顺序和链式存储" class="headerlink" title="二叉树的顺序和链式存储"></a>二叉树的顺序和链式存储</h4><h5 id="1-顺序存储结构"><a href="#1-顺序存储结构" class="headerlink" title="1.顺序存储结构"></a>1.顺序存储结构</h5><p>类型定义：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_SIZE 100</span><span class="token keyword">typedef</span> Elemtype subitree<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>完全二叉树编号为i的节点在下标为i-1的数组元素中。一般二叉树，扩展成完全二叉树，最坏的情况下深度为k且只有k个节点的二叉树要2^k-1的一维数组。</p><h5 id="2-链式存储结构"><a href="#2-链式存储结构" class="headerlink" title="2.链式存储结构"></a>2.链式存储结构</h5><p>（1）节点的类型及定义</p><h6 id="二叉节点"><a href="#二叉节点" class="headerlink" title="二叉节点"></a>二叉节点</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BTNode <span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BTNode <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BTNode<span class="token punctuation">,</span><span class="token operator">*</span>Btnode<span class="token punctuation">;</span></code></pre><h6 id="三叉链表"><a href="#三叉链表" class="headerlink" title="三叉链表"></a>三叉链表</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BTNode3<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BTNode3 <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">,</span><span class="token operator">*</span>parent<span class="token punctuation">;</span><span class="token punctuation">}</span>BTNode3<span class="token punctuation">;</span></code></pre><p>性质：若一个二叉树如果有n个节点，则二叉链表必须含有2n个指针域，其中必有n+1个空的链域。<br>证明：分支数B=n-1即非空链域有n个，空链域有2n-（n-1）=n+1个。</p><h4 id="二叉树的遍历（Traversing-Binary-Tree）"><a href="#二叉树的遍历（Traversing-Binary-Tree）" class="headerlink" title="二叉树的遍历（Traversing Binary Tree）"></a>二叉树的遍历（Traversing Binary Tree）</h4><p>按指定规律对每个节点访问一次且仅访问一次，对于线性结构来说遍历完全只有一条搜索路径。</p><h5 id="二叉树的基本组成"><a href="#二叉树的基本组成" class="headerlink" title="二叉树的基本组成"></a>二叉树的基本组成</h5><p>root，Lchild，Rchild，依次遍历就是遍历了二叉树，可以产生六种不同的遍历方式LDR，RDL，DLR，DRL，LRD，RLD。<br>DLR为先序遍历，LDR为中序遍历，LRD为后序遍历。</p><h5 id="二叉树表达式（a-b-c-d-e-f"><a href="#二叉树表达式（a-b-c-d-e-f" class="headerlink" title="二叉树表达式（a+b * (c-d)-e/f)"></a>二叉树表达式（a+b * (c-d)-e/f)</h5><p>先序：- + a * b - c d / e f</p><p>中序：a + b * c - d - e / f</p><p>后序：a b c d - * + e f / -</p><h5 id="先序遍历的算法"><a href="#先序遍历的算法" class="headerlink" title="先序遍历的算法"></a>先序遍历的算法</h5><h6 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreorderTraverse</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PerorderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PerorderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h6><p>设T是指向二叉树根节点的指针变量，非递归算法是若二叉树为空，则返回，否则令p=T：</p><p>（1）访问p所指向的节点；</p><p>（2）q=p-&gt;Rchild，若q不为空则q进栈；</p><p>（3）p=p-&gt;Lchild，若p不为空，转（1），否则转（4）；</p><p>（4）退栈到p转（1）直到栈空为止。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">void</span> <span class="token function">PreorderTraverse</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>Stack<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Binary Tree is Empty!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                p<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>                top<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>St<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    top<span class="token operator">++</span><span class="token punctuation">;</span>    St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Preorder2</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>St<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    p<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>            top<span class="token operator">--</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="中序遍历的算法"><a href="#中序遍历的算法" class="headerlink" title="中序遍历的算法"></a>中序遍历的算法</h5><h6 id="递归算法-1"><a href="#递归算法-1" class="headerlink" title="递归算法"></a>递归算法</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InorderTraerse</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">InorderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">InorderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="非递归算法-1"><a href="#非递归算法-1" class="headerlink" title="非递归算法"></a>非递归算法</h6><p>设T是指向二叉树根节点的指针变量，非递归算法：</p><p>若二叉树为空，则返回；否则令p=T</p><p>（1）若p不为空，p进栈，p=p-&gt;Lchild；</p><p>（2）否则（即p为空），退栈到p，访问p所指向的节点；</p><p>（3）p=p-&gt;Rchild转到（1）；<br>直到栈空为止。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">void</span> <span class="token function">InorderTraverse</span><span class="token punctuation">(</span>BTNoode <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>Stack<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>bool<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Binary Tree is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                bool<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>                top<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>bool<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">Status <span class="token function">InorderTrsverse2</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span><span class="token function">Status</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>TElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Sqstack S<span class="token punctuation">;</span>    BiTree p<span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">stackEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>OK<span class="token operator">==</span><span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>p<span class="token punctuation">)</span>            <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>q<span class="token operator">-></span>Lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">stackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ERROR<span class="token operator">==</span><span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">Status <span class="token function">InorderTraverse3</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span><span class="token function">Status</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>TelemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqStack S<span class="token punctuation">;</span>    BiTree p<span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">stackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ERROR<span class="token operator">==</span><span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="后序遍历的算法"><a href="#后序遍历的算法" class="headerlink" title="后序遍历的算法"></a>后序遍历的算法</h5><h6 id="递归算法-2"><a href="#递归算法-2" class="headerlink" title="递归算法"></a>递归算法</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostorderTraverse</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">PostorderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostorderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Rcjild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="非递归算法-2"><a href="#非递归算法-2" class="headerlink" title="非递归算法"></a>非递归算法</h6><p>在后序遍历中，根节点总是最后被访问的，设立一个状态标志tag：</p><p>设立两个堆栈的S1，S2，S1保存节点，S2保存节点的状态tag，S1和S2共用一个栈顶的指针。<br>设T是指向根节点的指针，若BiTree为Empty，return，否则p=T；</p><p>（1）第一次经过根p不访问；p进栈S1，tag赋值0，进栈S2，p=p-&gt;Lchild；</p><p>（2）若p非空转到（1），否则取状态值tag；</p><p>（3）若tag，对S1不访问不出栈，修改tag=1，取S1栈顶元素右子树转（1）</p><p>（4）若tag=1，S1退栈访问节点，直到栈空。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">void</span> <span class="token function">PostprderTraverse</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>S1<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>    <span class="token keyword">int</span> S2<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>bool<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Tree is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                St<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>                S2<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>Lchid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> bool<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>S2<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                p<span class="token operator">=</span>S1<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">-></span>Rchid<span class="token punctuation">;</span>                S2<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token operator">=</span>S1<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>                top<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>bool<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="层次遍历二叉树"><a href="#层次遍历二叉树" class="headerlink" title="层次遍历二叉树"></a>层次遍历二叉树</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    BiTreeNode <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">enum</span> tag<span class="token punctuation">{</span>L<span class="token punctuation">,</span>R<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>l利用队列的性质来进行遍历</p><p>（1）队首元素出队到p；</p><p>（2）访问p所指向节点；</p><p>（3）p所指向的节点的左右子节点依次入队，直到队列为空；</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">void</span> <span class="token function">LevelorderTraverse</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>Queue<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>    intn front<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Queue<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根节点入队</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>front<span class="token operator">&lt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>Queue<span class="token punctuation">[</span><span class="token operator">++</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                Queue<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左节点入队</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                Queue<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右节点入队</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="两个推论"><a href="#两个推论" class="headerlink" title="两个推论"></a>两个推论</h5><blockquote><p>若已知一棵二叉树的前序序列和中序序列则可以唯一确定这课二叉树</p></blockquote><blockquote><p>若已知一棵二叉树的中序序列和后序序列则可以唯一确定这课二叉树</p></blockquote><p>证明：归纳法：1.当n=1时显然成立；2.假定当n&lt;=k时，结论成立；3.当n=k+1时，假定前序序列和中序序列分别为[a1,a2,…,an]和[b1,b2,…,bn].</p><p>如过中序序列与前序序列a1相同的元素为bj，</p><p>（1）若j=1时，二叉树无左子树，由[a2,a3,…,an]和[b1,b2,…,bn]可以唯一确定右子树；</p><p>（2）若j=n时，二叉树无右子树，由[a2,a3,…,an]和[b1,b2,…,bn]可以唯一确定左子树；</p><p>（3）若如2≤j≤m-1，则子树[a2,..aj]，[b1,…,bj-1]确定左子树和[aj+1,…an]，[bj+1,…bn]确定右子树。</p><pre class=" language-c"><code class="language-c">BTNode <span class="token operator">*</span><span class="token function">CreateBT</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pre<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>S<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    S<span class="token operator">=</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data<span class="token operator">=</span><span class="token operator">*</span>pre<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>in<span class="token punctuation">;</span>p<span class="token operator">&lt;</span>in<span class="token operator">+</span>n<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">==</span><span class="token operator">*</span>pre<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    k<span class="token operator">=</span>p<span class="token operator">-</span>in<span class="token punctuation">;</span>    S<span class="token operator">-></span>Lchild <span class="token operator">=</span> <span class="token function">CreateBT</span><span class="token punctuation">(</span>pre<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>in<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token operator">-></span>Rchild <span class="token operator">=</span> <span class="token function">CreateBT</span><span class="token punctuation">(</span>pre<span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> S<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="二叉树遍历算法的应用"><a href="#二叉树遍历算法的应用" class="headerlink" title="二叉树遍历算法的应用"></a>二叉树遍历算法的应用</h4><h5 id="1-二叉树的二叉链表创建"><a href="#1-二叉树的二叉链表创建" class="headerlink" title="1.二叉树的二叉链表创建"></a>1.二叉树的二叉链表创建</h5><h6 id="（1）按满二叉树的方式建立"><a href="#（1）按满二叉树的方式建立" class="headerlink" title="（1）按满二叉树的方式建立"></a>（1）按满二叉树的方式建立</h6><p>按满二叉树的方式对节点，输入i，ch；建立过程中借助一个一维数组S[n]编号为i的指针保存在S[i]中。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BTNode<span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BTNode <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BTNode<span class="token punctuation">;</span>BTNode <span class="token operator">*</span><span class="token function">Create_BTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token operator">*</span>P<span class="token punctuation">,</span><span class="token operator">*</span>S<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span>            p<span class="token operator">-></span>Lchild<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                T<span class="token operator">=</span>p<span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                j<span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>Lchild<span class="token operator">=</span>p<span class="token punctuation">;</span>                <span class="token keyword">else</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>Rchild<span class="token operator">=</span>p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="2-按先序遍历方式建立"><a href="#2-按先序遍历方式建立" class="headerlink" title="(2)按先序遍历方式建立"></a>(2)按先序遍历方式建立</h6><p>对一颗二叉树进行扩充，就可以得到二叉树所扩充的二叉树</p><p>二叉树的扩充方法在节点有一个空链域处增加一个扩充的节点（总是叶子节点），</p><p>char类型：扩充节点值为“？”；int类型：扩充节点值为0或-1；<br>若扩充节点，令根的指针为NULL；<br>若是（正常）节点值：动态地为根指针分配一个节点将该值赋给根节点，然后递归地创建根的左子树和右子树。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> NULLKY '?'</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BTNode <span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BTNode <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BTNode<span class="token punctuation">;</span>BTNode <span class="token operator">*</span><span class="token function">Preorder_Create_BTree</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span>NULLKY<span class="token punctuation">)</span><span class="token punctuation">{</span>        T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> T<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        T<span class="token operator">=</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T<span class="token operator">-></span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span>        <span class="token function">Preorder_Create_BTree</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Preorder_Create_BTree</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> T<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="求叶子节点数"><a href="#求叶子节点数" class="headerlink" title="求叶子节点数"></a>求叶子节点数</h5><p>可以直接利用先序遍历二叉树算法求二叉树叶子节点只要修改<code>visit()</code>函数即可</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">int</span> <span class="token function">serach_leaves</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>Stack<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>Rchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Rchikd <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>Rchild'            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="求二叉树深度"><a href="#求二叉树深度" class="headerlink" title="求二叉树深度"></a>求二叉树深度</h5><p>采用层次遍历的方法计算深度</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">int</span> <span class="token function">serach_depth</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>Queue<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>level<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//level 总是指向访问层的最后一个节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Queue<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根节点入队</span>        level<span class="token operator">=</span>rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根是第一层的最后一个节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front<span class="token operator">&lt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>Queue<span class="token punctuation">[</span><span class="token operator">++</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            Queue<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            Queue<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>front<span class="token operator">==</span>level<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//正在访问的是最后一个节点</span>            depth<span class="token operator">++</span><span class="token punctuation">;</span>            level<span class="token operator">=</span>rear<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p>遍历二叉树，将非线性化转化为线性化</p><p>指针域里如果有左孩子，则Lchild指向左孩子，如果没有则指向直接前驱；指针域里如果有右孩子，则Rchild指向右孩子，如果没有则指向直接后继。对于这种情况我们加tag域，<code>Ltag</code>，<code>Rtag</code>如果tag为0则表明指针域内是节点，tag为1则表明指针域内是直接前驱或直接后继。线索链表中，线索是指指向前后的指针。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiThrNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BiThrNode <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">;</span>    <span class="token keyword">int</span> Ltag<span class="token punctuation">,</span>Rtag<span class="token punctuation">;</span><span class="token punctuation">}</span>BiThrNode<span class="token punctuation">;</span></code></pre><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>若为根节点，则节点直接后继为空；如果是父节点的左孩子且父节点无右孩子，直接后继为父节点；若是父节点的左节点且父节点有右孩子，直接后继为右孩子按后序遍历的第一个节点。</p><p>添加一个头节点head，Lchild域和Rchild域附设指针last，工作指针的前驱</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 50</span><span class="token keyword">typedef</span> enmu<span class="token punctuation">{</span>Link<span class="token punctuation">,</span>Thread<span class="token punctuation">}</span> PointerTag<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiThrNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BiTreeNode <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">;</span>    PointerTag Ltag<span class="token punctuation">,</span>Rtag<span class="token punctuation">;</span><span class="token punctuation">}</span>BtThrNode<span class="token punctuation">;</span></code></pre><h6 id="先序线索化二叉树"><a href="#先序线索化二叉树" class="headerlink" title="先序线索化二叉树"></a>先序线索化二叉树</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">preorder_Threading</span><span class="token punctuation">(</span>BiThrNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiThrNode <span class="token operator">*</span>stack<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">;</span>    BiThrNode <span class="token operator">*</span>last<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchikd<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> p<span class="token operator">-></span>Ltag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token operator">-></span>Ltag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                p<span class="token operator">-></span>Lchild<span class="token operator">=</span>last<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                    last<span class="token operator">-></span>Rtag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    last<span class="token operator">-></span>Rtag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    last<span class="token operator">-></span>Rchild<span class="token operator">=</span>p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            last<span class="token operator">=</span>p<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        last<span class="token operator">-></span>Rtag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后为叶子节点</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="中序线索化二叉树"><a href="#中序线索化二叉树" class="headerlink" title="中序线索化二叉树"></a>中序线索化二叉树</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">inorder_Threading</span><span class="token punctuation">(</span>BiThrNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiThrNode <span class="token operator">*</span>stack<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">;</span>    BiThrNode <span class="token operator">*</span>last<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">||</span>top<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> p<span class="token operator">-></span>Ltag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                 p<span class="token operator">-></span>Ltag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                p<span class="token operator">-></span>Lchild<span class="token operator">=</span>last<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> last<span class="token operator">-></span>Rtag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    last<span class="token operator">-></span>Rtag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    last<span class="token operator">-></span>Rchild<span class="token operator">=</span>p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                last<span class="token operator">=</span>p<span class="token punctuation">;</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            last<span class="token operator">-></span>Rtag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="线索二叉树的先序遍历"><a href="#线索二叉树的先序遍历" class="headerlink" title="线索二叉树的先序遍历"></a>线索二叉树的先序遍历</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Preorder_Thread_bt</span><span class="token punctuation">(</span>BiThrNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiThrNode <span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Ltag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token keyword">else</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="线索二叉树的中序遍历"><a href="#线索二叉树的中序遍历" class="headerlink" title="线索二叉树的中序遍历"></a>线索二叉树的中序遍历</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">inorder_Thread_bt</span><span class="token punctuation">(</span>BiThrNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiThrNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>T<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Ltag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Rtag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Ltag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h4><h5 id="1-双亲表示法（顺序）-节点中加指示器"><a href="#1-双亲表示法（顺序）-节点中加指示器" class="headerlink" title="1.双亲表示法（顺序） 节点中加指示器"></a>1.双亲表示法（顺序） 节点中加指示器</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_SIZE 100;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> PTNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span>PTNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    PTNode Nodes<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span>Ptree<span class="token punctuation">;</span></code></pre><h5 id="2-孩子链表表示法"><a href="#2-孩子链表表示法" class="headerlink" title="2.孩子链表表示法"></a>2.孩子链表表示法</h5><p>（1）定长节点结构</p><p>指针域的数目是树的du；特点：指针域浪费显著，但是结构简单。</p><p>（2）不定长节点结构</p><p>操作不变</p><p>（3）复合链表结构</p><p>对于每个节点，孩子节点用单链表表示</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 100</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> listnode<span class="token punctuation">{</span>    <span class="token keyword">int</span> childnode<span class="token punctuation">;</span>    <span class="token keyword">struct</span>  listnode  <span class="token operator">*</span>next<span class="token punctuation">}</span>CTNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    CTNode <span class="token operator">*</span>firstchild<span class="token punctuation">;</span><span class="token punctuation">}</span>HNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头节点</span>type    HNode nodes<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span>CLinkList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头节点链表</span></code></pre><h5 id="3-孩子兄弟表示法（二叉树）"><a href="#3-孩子兄弟表示法（二叉树）" class="headerlink" title="3.孩子兄弟表示法（二叉树）"></a>3.孩子兄弟表示法（二叉树）</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> CSnode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> CSnode <span class="token operator">*</span>firstchild<span class="token punctuation">,</span><span class="token operator">*</span>nextsibing<span class="token punctuation">;</span><span class="token punctuation">}</span>CSNode<span class="token punctuation">;</span></code></pre><p>物理结构相同，指针解释不同</p><p>有定义，任何一颗树都有一颗右子树为空的二叉树对应；</p><h6 id="1-树转二叉树"><a href="#1-树转二叉树" class="headerlink" title="1.树转二叉树"></a>1.树转二叉树</h6><p>（1）加虚线，在树的每层按从左至右的顺序在兄弟节点间加线</p><p>（2）去掉实线除了最左边的第一个子节点父节点与子节点的连线全部去掉</p><h6 id="2-二叉树转树"><a href="#2-二叉树转树" class="headerlink" title="2.二叉树转树"></a>2.二叉树转树</h6><p>（1）加虚线，父节点与自己所有的右孩子连线</p><h6 id="3-森林转二叉树"><a href="#3-森林转二叉树" class="headerlink" title="3.森林转二叉树"></a>3.森林转二叉树</h6><p>二叉树的右子树必为空</p><p>森林中的第二棵树的根节点作为第一棵树的兄弟节点，则可导出森林。</p><p>设F=[T1,T2,…,Tn]是森林集合，二叉树B=（root，LB，RB）</p><p>（1）若n=0，则B是空树<br>（2）若n&gt;0，则二叉树B的根节点是森林下的根节点。</p><h6 id="二叉树转森林"><a href="#二叉树转森林" class="headerlink" title="二叉树转森林"></a>二叉树转森林</h6><p>将二叉树的根节点与其右节点以及右子树方向的所有右子节点的连线全部去掉，得到若干孤立的二叉树，每棵就是原来的二叉树。</p><h5 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h5><p>（1）先序遍历：先访问根节点，然后依次先序遍历完每棵子树，树的先序遍历就是对树转变成的二叉树的先序遍历；树的后序遍历就是对树转变成的二叉树的中序遍历</p><h5 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h5><p>F=[T1,T2,..,Tn]是森林，对F的遍历有两种方法</p><p>（1）先序遍历：按先序遍历树的方式依次遍历F中的每棵树</p><p>（2）中序遍历，按后序遍历的方式依次遍历F中的每棵树</p><h4 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h4><h5 id="二叉排序树（BST）"><a href="#二叉排序树（BST）" class="headerlink" title="二叉排序树（BST）"></a>二叉排序树（BST）</h5><p>二叉排序（搜索）树（Binary Sort Tree）或（Binary Serach Tree）的定义为：二叉排序树是空树或者是满足下列性质的二叉树。</p><p>（1）若左子树不为空，则左子树上所有的节点的值（关键字）都小于根节点的值；</p><p>（2）若右子树不为空，则右子树上所有的节点的值（关键字）都大于根节点的值；</p><p>（3）左右子树都分别是二叉搜索树。</p><p>结论：若按中序遍历一颗二叉排序树，所得到的节点序列是一个递增序列</p><h5 id="BST仍用二叉链表存储"><a href="#BST仍用二叉链表存储" class="headerlink" title="BST仍用二叉链表存储"></a>BST仍用二叉链表存储</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    KeyType Key<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BSTNode<span class="token punctuation">;</span></code></pre><h5 id="BST树的查找"><a href="#BST树的查找" class="headerlink" title="BST树的查找"></a>BST树的查找</h5><p>给定k值比较相等则成功</p><p>（1）k小于根节点，则k位于左子树；</p><p>（2）k大于根节点，则k位于右子树。</p><h6 id="递归算法-3"><a href="#递归算法-3" class="headerlink" title="递归算法"></a>递归算法</h6><pre class=" language-c"><code class="language-c">BSTNode <span class="token operator">*</span><span class="token function">BST_Search</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T<span class="token punctuation">,</span>KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EQ</span><span class="token punctuation">(</span>T<span class="token operator">-></span>key<span class="token punctuation">,</span>kry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> T<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>T<span class="token operator">-></span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>  <span class="token function">BST_Serach</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Lchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             <span class="token keyword">return</span> <span class="token function">BST_Serach</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Rchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="非递归算法-3"><a href="#非递归算法-3" class="headerlink" title="非递归算法"></a>非递归算法</h6><pre class=" language-c"><code class="language-c">BSTNode <span class="token operator">*</span><span class="token function">BST_Serach</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T<span class="token punctuation">,</span>KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>    BSTNode p<span class="token operator">=</span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>P<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">EQ</span><span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>p<span class="token operator">-></span>key<span class="token punctuation">)</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token keyword">else</span>             p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EQ</span><span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span>             <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>平均查找长度ASL和logn（树的深度）等数量级。</p><h6 id="BST树的插入"><a href="#BST树的插入" class="headerlink" title="BST树的插入"></a>BST树的插入</h6><p>（1）节点值相等不需要插入操作；<br>（2）x.key&lt; T-&gt;key ,x插入左子树；<br>（3）x.key&gt; T-&gt;key ,x插入右子树。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Insert_BST</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T<span class="token punctuation">,</span>keyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>    BSTNode <span class="token operator">*</span>x<span class="token punctuation">;</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token operator">-></span>key<span class="token operator">=</span>key<span class="token punctuation">;</span>    x<span class="token operator">-></span>Lchild<span class="token operator">=</span>x<span class="token operator">-></span>Rchild<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EQ</span><span class="token punctuation">(</span>t<span class="token operator">-></span>key<span class="token punctuation">,</span>x<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>x<span class="token operator">-></span>key<span class="token punctuation">,</span>T<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">Insert_BST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Lchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             <span class="token function">Insert_BST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>Rchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="非递归算法-4"><a href="#非递归算法-4" class="headerlink" title="非递归算法"></a>非递归算法</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Insert_BST</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T<span class="token punctuation">,</span>keyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>    BSTNode <span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token operator">-></span>key<span class="token operator">=</span>key<span class="token punctuation">;</span>    x<span class="token operator">-></span>Lchikd<span class="token operator">=</span>x<span class="token operator">-></span>Rchild<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        p<span class="token operator">=</span>T<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EQ</span><span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">,</span>x<span class="token operator">-></span>key<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">;</span>            q<span class="token operator">=</span>p<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>x<span class="token operator">-></span>key<span class="token punctuation">,</span>p<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>            <span class="token keyword">else</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>x<span class="token operator">-></span>key<span class="token punctuation">,</span>q<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>            q<span class="token operator">-></span>Lchild<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">else</span> q<span class="token operator">-></span>Rchild<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于一个无序序列可以通过构造一颗BST树来达到排序的目的。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ENDKEY 65535</span>BSTNode <span class="token operator">*</span><span class="token function">Create_BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    keyType key<span class="token punctuation">;</span>    BSTNode <span class="token operator">*</span>T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">:</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>key<span class="token operator">!=</span>ENDKEY<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Insert_BST</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="BST树的删除"><a href="#BST树的删除" class="headerlink" title="BST树的删除"></a>BST树的删除</h5><p>1.若是叶子节点，直接删除；</p><p>2.若p只有一颗子树，直接用其左（右）子树取代即可；</p><p>3.节点既有左子树又有右子树</p><p>用p的直接前驱代替p，即从p的左子树中值最大的S放在p，然后删除S，S是左子树中最右的节点且没有右子树删除同2；用p的直接后继代替p，即从p的右子树中值最小的S放在p，然后删除S，S是右子树中最左的节点且没有左子树删除同2；</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_BST</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T<span class="token punctuation">,</span>keyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>    BSTNode <span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">,</span><span class="token operator">*</span>f<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">EQ</span><span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token operator">=</span>p<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>p<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>  p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token keyword">else</span>  p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    s<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token operator">=</span>p<span class="token punctuation">;</span>        s<span class="token operator">=</span>p<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">-></span>Rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token operator">=</span>s<span class="token punctuation">;</span>            s<span class="token operator">=</span>s<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">-></span>key<span class="token operator">=</span>s<span class="token operator">-></span>key<span class="token punctuation">;</span>        p<span class="token operator">-></span>otherinfo<span class="token operator">=</span>s<span class="token operator">-></span>otherinfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Lchild<span class="token punctuation">;</span>    <span class="token keyword">else</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Rchild<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T<span class="token operator">=</span>q<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>Lchild<span class="token operator">==</span>s<span class="token punctuation">)</span> f<span class="token operator">-></span>Lchild<span class="token operator">=</span>q<span class="token punctuation">;</span>    <span class="token keyword">else</span> f<span class="token operator">-></span>Rchild<span class="token operator">=</span>q<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="平衡二叉树AVL"><a href="#平衡二叉树AVL" class="headerlink" title="平衡二叉树AVL"></a>平衡二叉树AVL</h5><p>平衡二叉树是空树或（1）左右子树深度之差的绝对值不大于1；（2）左子树和右子树也是AVL。平衡因子（Balance Factor）二叉树上节点的左子树深度减去其右子树的深度，因此AVL每个点的平衡因子只有1，0，-1。否则不是AVL，若果一颗二叉树既是BST又是AVL则称为平衡二叉排序树。</p><h6 id="节点定义："><a href="#节点定义：" class="headerlink" title="节点定义："></a>节点定义：</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BNode<span class="token punctuation">{</span>    KeyType key<span class="token punctuation">;</span>    <span class="token keyword">int</span> Bfactor<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//平衡因子</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">struct</span> BNode <span class="token operator">*</span>Lchild<span class="token punctuation">,</span><span class="token operator">*</span>Rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BSTNode<span class="token punctuation">;</span></code></pre><p>在AVLBST是查找过程一样，给定k值比较次数不会超过D，设深度为h，AVLBST最少节点树为Nn。平均查找长度为O（log2 n）</p><h6 id="平衡化旋转"><a href="#平衡化旋转" class="headerlink" title="平衡化旋转"></a>平衡化旋转</h6><p>如果一颗平衡二叉树中插入新节点，造成了不平衡，必须调整树的结构，使之平衡化，平衡化有两类：</p><p>（1）单旋（LL和RR）</p><p>（2）双旋（LR和RL）</p><p>插入一个新节点后，从插入位置回溯检查各点的平衡因子；</p><p>如果在某节点发现高度不平衡，停止，沿回溯路径取两层节点；</p><p>如果处一条直线，则单旋；</p><p>如果是一条折线，则双旋平衡化。</p><p>左单旋（RR）：在A的右子女c的右子树E中插入新节点，将A拉到c的左子树，c的左子树变成A的右子树。</p><h6 id="AVL的插入"><a href="#AVL的插入" class="headerlink" title="AVL的插入"></a>AVL的插入</h6><p>（1）判别不平衡</p><p>（2）找到不平衡的最小子树；</p><p>（3）判断旋转类型。</p><h6 id="AVL的删除"><a href="#AVL的删除" class="headerlink" title="AVL的删除"></a>AVL的删除</h6><p>1.最多只有一个子女节点：直接将子女节点接上，如果没有子女节点指NULL，将以节点X为根的子树高度减一；</p><p>2.如果有两个子女节点：找到直接前驱y，把y传递给x，转移为删除y；</p><p>3.必须沿x通向root的路径反向追踪高度对于各个点的影响。</p><h4 id="霍夫曼树（Huffman）"><a href="#霍夫曼树（Huffman）" class="headerlink" title="霍夫曼树（Huffman）"></a>霍夫曼树（Huffman）</h4><p>最优二叉树<br>1.节点路径：从Node到Node<br>2.路径长度：路上的分支数<br>3.树的路径长度：从根到每一个点的长度之和<br>4.节点的带权路径长度：从该点到根节点之间长度与权的乘积<br>5.树的带权路径长度：所有叶子节点的带权路径长度之和<code>WPL=w1*/1+w2*/2+...+wn*/n=Σwi*/i</code><br>6.Huffman树是WPL最小的树</p><h5 id="霍夫曼树的构造"><a href="#霍夫曼树的构造" class="headerlink" title="霍夫曼树的构造"></a>霍夫曼树的构造</h5><p>（1）根据n个权值[w1,w2,..,wn]构成n个二叉树的集合，F=[T1,T2,..,Tn],其中每棵只有root，没有左右子树；</p><p>（2）从F中找最小权值的两个作为左右子树，且新树根为两树权值之和；</p><p>（3）F中删除两个树，并将合成的新树加入F；</p><p>（4）重复（2）（3），注：权值小的作为左子树，权值大的作为右子树，如果相等则让深度小的作为左子树，深度大的作为右子树，这样可以保证Huffman树的唯一性。</p><h5 id="霍夫曼编码"><a href="#霍夫曼编码" class="headerlink" title="霍夫曼编码"></a>霍夫曼编码</h5><p>保证任意一个字符的编码都不是另一个编码的前缀，Huffman权值可以构造长度不等且译码不产生二义性的编码。由于每个字符都是叶子节点，所以不会有前缀相同的编码。</p><h5 id="霍夫曼树的实现"><a href="#霍夫曼树的实现" class="headerlink" title="霍夫曼树的实现"></a>霍夫曼树的实现</h5><h6 id="Huffman中没有度为1的节点"><a href="#Huffman中没有度为1的节点" class="headerlink" title="Huffman中没有度为1的节点"></a>Huffman中没有度为1的节点</h6><p>一颗有n个叶子节点的Huffman树中共有2n-1个节点可存于2n-1的数组中，<code>2n-1=2（n-1）+1</code>原因：求一个字符的编码需要从叶子节点出发走一条从叶子到根的路径</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_NODE 200</span>tyoedef <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Weight<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Parent<span class="token punctuation">,</span>Lchild<span class="token punctuation">,</span>Rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>HTNode<span class="token punctuation">;</span></code></pre><h6 id="Huffman树的生成"><a href="#Huffman树的生成" class="headerlink" title="Huffman树的生成"></a>Huffman树的生成</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Create_Huffman</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> n<span class="token punctuation">,</span>HTNode HT<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">unsigned</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>w<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Parent<span class="token operator">=</span>HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Lchild<span class="token operator">=</span>HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Rchild<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> w1<span class="token operator">=</span><span class="token number">32767</span><span class="token punctuation">,</span>w2<span class="token operator">=</span>w1<span class="token punctuation">;</span>        <span class="token keyword">int</span> p1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>p2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Parent<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>HT<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Weight<span class="token operator">&lt;</span>w1<span class="token punctuation">)</span><span class="token punctuation">{</span>                    w2<span class="token operator">=</span>w1<span class="token punctuation">;</span>                    p2<span class="token operator">=</span>p1<span class="token punctuation">;</span>                    w1<span class="token operator">=</span>HT<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Weight<span class="token punctuation">;</span>                    p1<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>HT<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Weight<span class="token operator">&lt;</span>w2<span class="token punctuation">)</span><span class="token punctuation">{</span>                    w2<span class="token operator">=</span>HT<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Weight<span class="token punctuation">;</span>                    p2<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Lchild<span class="token operator">=</span>p1<span class="token punctuation">;</span>            HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Rchild<span class="token operator">=</span>p2<span class="token punctuation">;</span>            HT<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>Parent<span class="token operator">=</span>k<span class="token punctuation">;</span>            HT<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>Parent<span class="token operator">=</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="huffman编码算法"><a href="#huffman编码算法" class="headerlink" title="huffman编码算法"></a>huffman编码算法</h6><p>根据权值，对叶子节点有两种处理方式</p><p>（1）从叶子节点到根节点处理，求每个叶子节点的对应编码；</p><p>（2）从根遍历整个树求所有编码；</p><p>求编码是先设一个通用的指向字符的指针变量，求得编码后再复制。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Huff_coding</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> n<span class="token punctuation">,</span>Hnode HT<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">unsigned</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>sp<span class="token punctuation">,</span>fp<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cd <span class="token punctuation">,</span><span class="token operator">*</span>HT<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    cd<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cd<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sp<span class="token operator">=</span>n<span class="token punctuation">;</span>        p<span class="token operator">=</span>k<span class="token punctuation">;</span>        fp<span class="token operator">=</span>HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>fp<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">=</span>fp<span class="token punctuation">,</span>fp<span class="token operator">=</span>HT<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从叶子到根节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>HT<span class="token punctuation">[</span>fp<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span>Lchild<span class="token punctuation">)</span> cd<span class="token punctuation">[</span><span class="token operator">--</span>sp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> cd<span class="token punctuation">[</span><span class="token operator">--</span>sp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span>            HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">trcpy</span><span class="token punctuation">(</span>HT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>cd<span class="token punctuation">[</span>sp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>cd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="问题与说明"><a href="#问题与说明" class="headerlink" title="问题与说明"></a>问题与说明</h3><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>CLion开发环境，C语言实现</p><h3 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h3>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验报告——队列</title>
      <link href="/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-dui-lie/"/>
      <url>/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-dui-lie/</url>
      
        <content type="html"><![CDATA[<ul><li>实验目的与要求</li><li>实验步骤与内容</li><li>问题与说明</li><li>备注</li><li>程序清单</li></ul><h3 id="实验目的与要求"><a href="#实验目的与要求" class="headerlink" title="实验目的与要求"></a>实验目的与要求</h3><p>1.理解队列的表示方式</p><p>2.实现队列的各项功能</p><p>3.使用顺序和链式实现队列</p><p>4.双向队列</p><h3 id="实验步骤与内容"><a href="#实验步骤与内容" class="headerlink" title="实验步骤与内容"></a>实验步骤与内容</h3><p>队列（Queue）是遵循“FIFO”即“先进先出”规则，队首为front，队尾rear。下面给出队列的ADT</p><pre class=" language-c"><code class="language-c">ADT Queue<span class="token punctuation">{</span>    数据对象<span class="token punctuation">:</span>D<span class="token operator">=</span><span class="token punctuation">{</span>ai<span class="token operator">|</span>ai∈ElemSet<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span> n≥<span class="token number">0</span><span class="token punctuation">}</span>    数据关系<span class="token punctuation">:</span>R<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>ai<span class="token number">-1</span><span class="token punctuation">,</span>ai<span class="token operator">></span><span class="token operator">|</span>ai<span class="token number">-1</span><span class="token punctuation">,</span>ai∈D<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span>    约定a1为队首，an为队尾    基本操作<span class="token punctuation">:</span> <span class="token function">CreattQue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">EmptyQue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">InsertQue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">DeleteQue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ADT Queue</code></pre><h4 id="队列的顺序表示及实现"><a href="#队列的顺序表示及实现" class="headerlink" title="队列的顺序表示及实现"></a>队列的顺序表示及实现</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_QUEUE_SIZE 100</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> queue<span class="token punctuation">{</span>    ElemType Queue_array<span class="token punctuation">[</span>MAX_QUEUE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span></code></pre><p>先加元素再加指针<br>先进：rear=rear+1</p><p>先出：front=front+1</p><p>初始化：front=rear=0（可以初始化为-1，充分利用空间）；</p><p>入队：插入rear，rear+1；</p><p>出队：删去front，front++；</p><p>队空front==rear；</p><p>队满：rear=MAXQUEUESIZE-1；</p><h5 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h5><p>将队列看成一个首尾相接的圆环，并称为循环队列(Circular Queue)当队首队尾指向上界时，加1操作如果是指向向量的下界。<code>i=(i+1)%MAX_QUEUE_SIZE</code>。</p><h4 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h4><p>1.队列的链式存储表示</p><p>队列的链式存储结构简称为链队列，它是限制仅在表头进行删除操作和表尾进行插入操作的单链表。</p><p>队列有两类不同的节点，数据元素节点，队列的队首指针和队尾指针。</p><h6 id="数据元素节点类型定义"><a href="#数据元素节点类型定义" class="headerlink" title="数据元素节点类型定义"></a>数据元素节点类型定义</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Qnode <span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Qnode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Qnode<span class="token punctuation">;</span></code></pre><h6 id="指针节点类型定义"><a href="#指针节点类型定义" class="headerlink" title="指针节点类型定义"></a>指针节点类型定义</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> link_queue<span class="token punctuation">{</span>    Qnode <span class="token operator">*</span>front<span class="token punctuation">,</span><span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.链队操作</p><h6 id="链队列的初始化"><a href="#链队列的初始化" class="headerlink" title="链队列的初始化"></a>链队列的初始化</h6><pre class=" language-c"><code class="language-c">LinkQueue <span class="token operator">*</span><span class="token function">Init_Queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">;</span>    Qnode <span class="token operator">*</span>p<span class="token punctuation">;</span>    Q<span class="token operator">=</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token punctuation">(</span>Qnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Qnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">=</span>Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> Q<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="入队（尾插）"><a href="#入队（尾插）" class="headerlink" title="入队（尾插）"></a>入队（尾插）</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">Insert_Queue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    Qnode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token punctuation">(</span>Qnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Qnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="出队（头删除）"><a href="#出队（头删除）" class="headerlink" title="出队（头删除）"></a>出队（头删除）</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">Delete_LinkQueue</span><span class="token punctuation">(</span>LnikQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>frornt<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="销毁队列"><a href="#销毁队列" class="headerlink" title="销毁队列"></a>销毁队列</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">DestoryQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>fornt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>front<span class="token operator">=</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h4><p>可以双端进行插入删除操作</p><h3 id="问题与说明"><a href="#问题与说明" class="headerlink" title="问题与说明"></a>问题与说明</h3><p>CLion，IDEA</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><h3 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h3><p>Deque Java实现</p><pre class=" language-Java"><code class="language-Java">import java.util.Iterator;import java.lang.*;import java.util.NoSuchElementException;import java.lang.IllegalArgumentException;import java.lang.UnsupportedOperationException;import edu.princeton.cs.algs4.StdOut;import edu.princeton.cs.algs4.StdIn;public class Deque<Item> implements Iterable<Item> {    private Node first;    private Node last;    private int n;    private class Node {        private Node next;        private Item item;        private Node front;    }    public Deque() {        first = null;        last = null;        n = 0;    } // construct an empty deque    public boolean isEmpty() {        return n == 0;    }  // is the deque empty?    public int size() {        return n;    }     // return the number of items on the deque    public void addFirst(Item item) {        if (item == null) throw new IllegalArgumentException();        Node oldfirst = first;        first = new Node();        first.item = item;        if (isEmpty()) last = first;        else {            oldfirst.front = first;            first.next = oldfirst;        }        n++;    }  // add the item to the front    public void addLast(Item item) {        if (item == null) throw new IllegalArgumentException();        Node oldlast = last;        last = new Node();        last.item = item;        if (isEmpty()) first = last;        else {            oldlast.next = last;            last.front = oldlast;        }        n++;        }   // add the item to the end    public Item removeFirst() {        if (isEmpty()) throw new NoSuchElementException();        Item item = first.item;        first=first.next;        n--;        if(isEmpty()) last=null;        else first.front = null;        return item;    }   // remove and return the item from the front    public Item removeLast() {        if (isEmpty()) throw new NoSuchElementException();        Item item = last.item;        last = last.front;        n--;        if(isEmpty()) first =null;        else last.next = null;        return item;    } // remove and return the item from the end    public Iterator<Item> iterator() {        return new ListIterator(first);    } // return an iterator over items in order from front to end    private class ListIterator implements Iterator<Item> {        private Node current;        public ListIterator(Node first) {            current = first;        }        public boolean hasNext() {            return current != null;        }        public void remove() {            throw new UnsupportedOperationException();            /*Not Supported*/        }        public Item next() {            if(!hasNext()) throw new java.util.NoSuchElementException();            Item item = current.item;            current = current.next;            return item;        }    }    public static void main(String[] args) {        Deque<String> deque = new Deque<String> ();        while(!StdIn.isEmpty()) {            String s = StdIn.readString();            if(!s.equals("-")) {                StdOut.println("1->deque.size()=" +deque.size());                deque.addFirst(s);                StdOut.println("2->deque.size()=" +deque.size());            }            else if(!deque.isEmpty()) {                StdOut.println(deque.removeFirst() + " ");                StdOut.println("3->deque.size()=" +deque.size());            }        }        StdOut.println("(" + deque.size() +" left on the deque)");    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验报告——栈</title>
      <link href="/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-zhan/"/>
      <url>/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-zhan/</url>
      
        <content type="html"><![CDATA[<ul><li>实验目的与要求</li><li>实验步骤与内容</li><li>问题与说明</li><li>备注</li><li>程序清单</li></ul><h3 id="实验目的与要求"><a href="#实验目的与要求" class="headerlink" title="实验目的与要求"></a>实验目的与要求</h3><p>1.了解栈的逻辑结构</p><p>2.熟悉各种方法构建栈</p><p>3.实现栈的基本操作</p><p>4.实现栈的应用</p><h3 id="实验步骤与内容"><a href="#实验步骤与内容" class="headerlink" title="实验步骤与内容"></a>实验步骤与内容</h3><p>栈(stack)由两个端点栈顶(top)和栈底(bottom)构成，遵循“先进后出”(FILO)或“后进先出”(LIFO)的规则，即只允许在一端插入或删除元素。</p><h5 id="栈的ADT："><a href="#栈的ADT：" class="headerlink" title="栈的ADT："></a>栈的ADT：</h5><pre class=" language-c"><code class="language-c">ADT stack<span class="token punctuation">{</span>    数据对象<span class="token punctuation">:</span>D<span class="token operator">=</span><span class="token punctuation">{</span>ai<span class="token operator">|</span>ai∈ElemSet<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n <span class="token punctuation">,</span> n≥<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    数据关系<span class="token punctuation">:</span>R<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>ai<span class="token number">-1</span><span class="token punctuation">,</span>ai<span class="token operator">></span><span class="token operator">|</span>ai<span class="token number">-1</span><span class="token punctuation">,</span>a∈D<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span><span class="token punctuation">;</span>    基本操作<span class="token punctuation">:</span>初始化，进栈，出栈，取栈顶元素，判断栈空、栈满等<span class="token punctuation">}</span>ADT stack</code></pre><h5 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h5><p>简称顺序栈，使用一维数组来储存，根据使用环境的不同又分为:</p><ul><li>静态顺序栈</li><li>动态顺序栈</li></ul><h5 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h5><h6 id="数制转化"><a href="#数制转化" class="headerlink" title="数制转化"></a>数制转化</h6><p>在2,,8,10进制间转化，遵循<code>n = (n div d) * d + n mod d</code>,出数的顺序是由低位到高位，所以用栈来储存数据，计算完成后弹数即为正序。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">conversion</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>    sqstack S<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">;</span>    S<span class="token operator">=</span><span class="token function">Init_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        k<span class="token operator">=</span>n<span class="token operator">%</span>d<span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">=</span>n<span class="token operator">/</span>d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h6><p>读左括号入栈，当读到右括号时弹出元素与左括号匹配。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> TRUE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE -1</span>sqstack S<span class="token punctuation">;</span>S<span class="token operator">=</span><span class="token function">Init_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Match_Brackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    chat ch<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">asc</span><span class="token punctuation">(</span>cj<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'('</span><span class="token operator">||</span>ch<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token operator">=</span><span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token string">'['</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">=</span><span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h6><p>递归调用，一般遵循这样的规则:</p><pre><code>F(n) = | 1 , n=0;       | n*F(n-1) , n&gt;0</code></pre><p>递归栈:<br>(1)栈为空则执行正常返回<br>(2)栈顶弹出一个工作记录<br>(3)赋值<br>(4)返回地址</p><h6 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h6><p>表达式由操作数，操作符和分界符构成。算术表达式分为三种分别是前缀表达式(infix)，中缀表达式(prefix)，后缀表达式(postfix)。所有表达式都遵循以下三个规则：</p><blockquote><p>1.优先级高的先计算；<br>2.优先级相同的从左向右计算；<br>3.括号从最内层开始计算。</p></blockquote><p>对于中缀表达式我们需要两个栈来求值，而后缀表达式只需要一个栈就可求值。所以计算表达式的值采用后缀表达式比较简单，易于理解。</p><blockquote><p>算法1：后缀表达式求值</p></blockquote><blockquote><blockquote><p>a)如果是运算数直接入栈</p></blockquote></blockquote><blockquote><blockquote><p>b)如果是运算符，先计算结果在将结果压栈</p></blockquote></blockquote><blockquote><p>算法2：利用转将中缀表达式转后缀表达式</p></blockquote><blockquote><p>人工方法</p><blockquote><p>(1)首先补全所有括号<code>(A+B)*D-E/(F+A*D)+C</code>=&gt;<code>((((A+B)*D)-(E/(F+(A*D))))+C)</code></p><p>(2)运算符全部提出到对应的括号外面</p></blockquote></blockquote><blockquote><p>机器方法</p><blockquote><p>首先表示出各个运算符的优先级</p></blockquote><p>| 操作符ch | # | ( | ^ | * / % | + - | )|<br>| :——: | :——: | :——: |<br>| isp栈内优先级 | 0 | 1 | 7 | 5 | 3 | 8 |<br>| icp栈外优先级 | 0 | 8 | 6 | 4 | 2 | 1 |</p><blockquote><p>操作符优先级相等的情况只出现在括号匹配或栈底的“#”与输入最后的“#”号匹配时。</p><p>操作符初始化，“#”进栈，读入中缀表达式首字符ch直到ch=“#”:</p><p>a)若ch是操作数，直接输出，读入下一个字符ch;</p><p>b)若ch是操作数，判断ch的优先级和位于栈顶的操作符op优先级，若(ch)&gt;(op)，令ch进栈，读入下一个字符(观察后面后是否有更高级的运算符);若(ch)&lt;(op)，退栈并输出(执行前保存栈内优先级最高的op);若(ch)==(op)，退栈但不输出（消括号）。</p></blockquote></blockquote><h3 id="问题与说明"><a href="#问题与说明" class="headerlink" title="问题与说明"></a>问题与说明</h3><p>C语言实现<br>CLion 集成开发环境</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><h3 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h3><h5 id="动态顺序栈"><a href="#动态顺序栈" class="headerlink" title="动态顺序栈"></a>动态顺序栈</h5><p>bottom表示栈底指针，固定不变；top表示栈顶指针。<code>top==bottom</code>表示栈空；<code>top-bottom=stacksize-1</code>表示栈满。<br>结点进栈时首先将数据元素保存到栈顶(top所指的当前位置)top+1，使top指向栈顶的下一个储存位置。结点出栈时，先top-1取栈顶元素。</p><h6 id="动态栈基本操作的实现"><a href="#动态栈基本操作的实现" class="headerlink" title="动态栈基本操作的实现"></a>动态栈基本操作的实现</h6><h6 id="栈的类型定义"><a href="#栈的类型定义" class="headerlink" title="栈的类型定义"></a>栈的类型定义</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> STACKSIZE 100</span><span class="token macro property">#<span class="token directive keyword">define</span> STACKINCRMENT 10</span><span class="token macro property">#typedeff int ElemType</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> sqstack<span class="token punctuation">{</span>    ElemType <span class="token operator">*</span>bottom<span class="token punctuation">;</span>    ElemType <span class="token operator">*</span>top<span class="token punctuation">;</span>    <span class="token keyword">int</span> stacksize<span class="token punctuation">;</span><span class="token punctuation">}</span>sqstack<span class="token punctuation">;</span></code></pre><h6 id="栈的初始化"><a href="#栈的初始化" class="headerlink" title="栈的初始化"></a>栈的初始化</h6><pre class=" language-c"><code class="language-c">status <span class="token function">Init_stack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sqstack S<span class="token punctuation">;</span>    s<span class="token punctuation">.</span>bottom<span class="token operator">=</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>STACKSIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token operator">=</span>S<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>stacksize<span class="token operator">=</span>STACKSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="压栈"><a href="#压栈" class="headerlink" title="压栈"></a>压栈</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">push</span><span class="token punctuation">(</span>sqstack s<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">-</span>S<span class="token punctuation">.</span>bottom<span class="token operator">==</span>s<span class="token punctuation">.</span>stacksize<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        S<span class="token punctuation">.</span>bottom<span class="token operator">=</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>stacksize<span class="token operator">+</span>STACKINCRMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        S<span class="token punctuation">.</span>top<span class="token operator">=</span>S<span class="token punctuation">.</span>bottom<span class="token operator">+</span>S<span class="token punctuation">.</span>stacksize<span class="token punctuation">;</span>        S<span class="token punctuation">.</span>stacksize <span class="token operator">+</span><span class="token operator">=</span> STACKINCRMENT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>S<span class="token punctuation">.</span>top<span class="token operator">=</span>e<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">pop</span><span class="token punctuation">(</span>sqstack S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>bottom<span class="token operator">==</span>S<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token operator">--</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token operator">*</span>S<span class="token punctuation">.</span>top<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="静态顺序栈"><a href="#静态顺序栈" class="headerlink" title="静态顺序栈"></a>静态顺序栈</h5><p>一维数组储存，栈底固定不变，而栈顶则随着进栈出栈而变化。top=0表示栈空，top=stacksize-1为栈满。结点进栈，首先执行top+1，是top指向新的栈顶位置，然后将数据元素保存到栈顶。结点出栈，首先取元素，然后执行top-1。为了避免浪费，可以在初始化时将top和bottom都设为-1。</p><h6 id="基本操作的实现"><a href="#基本操作的实现" class="headerlink" title="基本操作的实现"></a>基本操作的实现</h6><h6 id="栈的类型定义-1"><a href="#栈的类型定义-1" class="headerlink" title="栈的类型定义"></a>栈的类型定义</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_STACK_SIZE 100</span><span class="token macro property">#typedef int ElemType;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> sqstack<span class="token punctuation">{</span>    ElemType stack_array<span class="token punctuation">[</span>MAX_STAKC_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span>sqstack<span class="token punctuation">;</span></code></pre><h6 id="栈的初始化-1"><a href="#栈的初始化-1" class="headerlink" title="栈的初始化"></a>栈的初始化</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">Init_stakc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sqstack S<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token operator">=</span>S<span class="token punctuation">.</span>bottom<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> S<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">push</span><span class="token punctuation">(</span>sqstack S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">>=</span>MAX_STACK_SIZE<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR    S<span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>stack_array<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">pop</span><span class="token punctuation">(</span>sqstack S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> retunr ERROR<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token number">-1</span><span class="token punctuation">;</span>    e<span class="token operator">=</span>S<span class="token punctuation">.</span>srray_array<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="栈的链式储存表示"><a href="#栈的链式储存表示" class="headerlink" title="栈的链式储存表示"></a>栈的链式储存表示</h5><p>运算受限，其插入和删除只能在表头位置进行，栈顶指针top就是链表的头指针。</p><h6 id="链表的节点类型"><a href="#链表的节点类型" class="headerlink" title="链表的节点类型"></a>链表的节点类型</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Stack_Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Stacj_Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Stack_Node<span class="token punctuation">;</span></code></pre><h6 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h6><p>初始只有一个头节点head，head-&gt;next为NULL，栈空的条件为head-&gt;next==NULL;由于只有内存溢出时才会出现栈满的情况，通常不考虑这种情况。元素e进栈操作是将包含该元素的一个节点插入作为第一个数据节点，头插入栈删除第一个节点。</p><h6 id="链栈的初始化"><a href="#链栈的初始化" class="headerlink" title="链栈的初始化"></a>链栈的初始化</h6><pre class=" language-c"><code class="language-c">Stack_Node <span class="token function">Init_stack</span><span class="token punctuation">(</span>vodi<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack_Node <span class="token operator">*</span>top<span class="token punctuation">;</span>    top<span class="token operator">=</span><span class="token punctuation">(</span>Stack_Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack_Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>top<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    top<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="链栈的压栈"><a href="#链栈的压栈" class="headerlink" title="链栈的压栈"></a>链栈的压栈</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">push</span><span class="token punctuation">(</span>Stack_Node <span class="token operator">*</span>top<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack_Node <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token punctuation">(</span>Stack_Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack_Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    p<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span>top<span class="token operator">-></span>next<span class="token punctuation">;</span>    top<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="链栈的出栈"><a href="#链栈的出栈" class="headerlink" title="链栈的出栈"></a>链栈的出栈</h6><pre class=" language-c"><code class="language-c">Status <span class="token function">pop</span><span class="token punctuation">(</span>Stack_Node <span class="token operator">*</span>top<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack_Node <span class="token operator">*</span>p<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    p<span class="token operator">=</span>top<span class="token operator">-></span>next<span class="token punctuation">;</span>    e<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>    top<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验报告——链表</title>
      <link href="/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-lian-biao/"/>
      <url>/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-lian-biao/</url>
      
        <content type="html"><![CDATA[<ul><li>实验目的与要求</li><li>实验步骤与内容</li><li>问题与说明</li><li>备注</li><li>程序清单</li></ul><h3 id="实验目的与要求"><a href="#实验目的与要求" class="headerlink" title="实验目的与要求"></a>实验目的与要求</h3><p>1.掌握链表的各种实现形式（静态和动态）。</p><p>2.理解单链表，循环链表，双向链表的形式。</p><p>3.理解头插入法和尾插入法的异同。</p><p>4.会使用链表删除的几种变形。</p><p>5.会使用链表求解一些基本问题。</p><h3 id="实验步骤与内容"><a href="#实验步骤与内容" class="headerlink" title="实验步骤与内容"></a>实验步骤与内容</h3><h5 id="1-单链表"><a href="#1-单链表" class="headerlink" title="1.单链表"></a>1.单链表</h5><pre><code>单链表只有一个指针域，其头结点在第一个节点之前，不存内容。&lt;br&gt;</code></pre><h6 id="1-节点的描述"><a href="#1-节点的描述" class="headerlink" title="1.节点的描述"></a>1.节点的描述</h6><pre class=" language-c"><code class="language-c">  <span class="token keyword">typedef</span> <span class="token keyword">struct</span> Lnde <span class="token punctuation">{</span>      ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Lnode <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>Lnode<span class="token punctuation">,</span><span class="token operator">*</span>LinkLIst<span class="token punctuation">;</span></code></pre><h6 id="2-节点的实现"><a href="#2-节点的实现" class="headerlink" title="2.节点的实现"></a>2.节点的实现</h6><p> 节点是通过动态分配和释放来实现的，即按需分配，不需要时就实时释放掉。</p><p>| 函数名 | malloc() | realloc() | free() | sizeof() |<br>| —— |<br>| 作用 | 申请 | 增加 | 释放 | 大小 |<br>在c++里用<code>new</code>和<code>delete</code>实现。</p><p>动态分配</p><pre class=" language-c"><code class="language-c">p<span class="token operator">=</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Lnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//malloc分配了一个类型为Lnode的节点变量的空间，并将地址放入p中</span></code></pre><p>动态释放</p><pre class=" language-c"><code class="language-c"><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//系统回收由指针变量p所指向的内存区，p必须是最近一次使用调用malloc时的返回值</span></code></pre><h6 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h6><h5 id="1-节点赋值"><a href="#1-节点赋值" class="headerlink" title="(1)节点赋值:"></a>(1)节点赋值:</h5><pre class=" language-c"><code class="language-c">Lnode <span class="token operator">*</span>p<span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Lnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span></code></pre><h5 id="2-建立链表"><a href="#2-建立链表" class="headerlink" title="(2)建立链表"></a>(2)建立链表</h5><h6 id="A-头插入法建表"><a href="#A-头插入法建表" class="headerlink" title="A.头插入法建表"></a>A.头插入法建表</h6><p>头插入法建表，是在头结点处进行链表的构建，即链表中的元素顺序与原来的顺序为逆序。</p><pre class=" language-c"><code class="language-c"> Lnode <span class="token operator">*</span><span class="token function">create_Linklist</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    Lnode <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    head<span class="token operator">=</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Lnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Lnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>        p<span class="token operator">-></span>next<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="B-尾插入法建表"><a href="#B-尾插入法建表" class="headerlink" title="B.尾插入法建表"></a>B.尾插入法建表</h6><p>尾插入法建表需要多一个last指针指向尾节点。</p><pre class=" language-c"><code class="language-c"> Lnode <span class="token operator">*</span><span class="token function">create_Linklist</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> data<span class="token punctuation">;</span>     Lnode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token operator">*</span>last<span class="token punctuation">;</span>     head<span class="token operator">=</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Lnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     head<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>     last<span class="token operator">=</span>head<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         p<span class="token operator">=</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Lnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         p<span class="token operator">-></span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>         p<span class="token operator">-></span>next<span class="token operator">=</span>last<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* equal to: p->next=NULL;*/</span>         last<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>         last<span class="token operator">=</span>p<span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p> 无论那种建表方式，如果节点为n个，时间为O(n);<br> 只要建表时存在勾连过程。如果没有直接后继，必须遵循“先右后左”的原则。先右后左就是指在链表的逻辑结构上的节点勾连时先勾连右边的节点。</p><h5 id="3-单链表查找"><a href="#3-单链表查找" class="headerlink" title="(3)单链表查找"></a>(3)单链表查找</h5><h6 id="A-按序号查找"><a href="#A-按序号查找" class="headerlink" title="A.按序号查找"></a>A.按序号查找</h6><p>取第i个元素，从链表的头节点出发，顺链表一直找到第i个为止。（顺序存储结构）。</p><pre class=" language-c"><code class="language-c">ElemType <span class="token function">Get_Elem</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    Lnode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">32768</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时返回为NULL表示p的data太大</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//时间复杂度为O(n)</span></code></pre><h6 id="B-按值查找"><a href="#B-按值查找" class="headerlink" title="B.按值查找"></a>B.按值查找</h6><p>遍历整个链表</p><pre class=" language-c"><code class="language-c">Lnode <span class="token operator">*</span><span class="token function">Locate_Elem</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span>L<span class="token punctuation">,</span>ElemType key<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>data<span class="token operator">!=</span>key<span class="token punctuation">)</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token operator">==</span>key<span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="4-单链表的插入"><a href="#4-单链表的插入" class="headerlink" title="(4)单链表的插入"></a>(4)单链表的插入</h5><p>插入ai-1与ai之间，先右后左。</p><ul><li>在第1个节点前插入q<pre class=" language-c"><code class="language-c">q<span class="token operator">-></span>next<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>head<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token punctuation">;</span></code></pre></li><li>在链表中间p后插入q<pre class=" language-c"><code class="language-c">q<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token punctuation">;</span></code></pre></li><li>在链表末尾插入q<pre class=" language-c"><code class="language-c">p<span class="token operator">-></span>next<span class="token operator">=</span>q <span class="token punctuation">,</span> q<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span> <span class="token punctuation">,</span> p<span class="token operator">=</span>q<span class="token punctuation">;</span></code></pre>算法描述<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Insert_Lnode</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> Lnode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>  p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>P<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the i doesnt exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>      q<span class="token operator">=</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Lnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      q<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>      q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>      p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="5-单链表的删除"><a href="#5-单链表的删除" class="headerlink" title="(5)单链表的删除"></a>(5)单链表的删除</h5><h6 id="A-按序号删除-（双指针法）"><a href="#A-按序号删除-（双指针法）" class="headerlink" title="A.按序号删除 （双指针法）"></a>A.按序号删除 （双指针法）</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_LinkList</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  Lnode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token punctuation">;</span>  q<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>q<span class="token punctuation">;</span>        q<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the i doesn't exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="B-按值删除（必须双指针）"><a href="#B-按值删除（必须双指针）" class="headerlink" title="B.按值删除（必须双指针）"></a>B.按值删除（必须双指针）</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_Linklist_value</span><span class="token punctuation">(</span>ElemType key<span class="token punctuation">,</span>Linklist <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">-></span>data <span class="token operator">!=</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>q<span class="token punctuation">;</span>        q<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>data<span class="token operator">==</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"not exeist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="4-循环链表"><a href="#4-循环链表" class="headerlink" title="4.循环链表"></a>4.循环链表</h5><p>整个链表的指针域构成一个环，判断是否为空链表的条件是<code>head-&gt;next==head</code>，判断是否是表尾<code>p-&gt;next==head</code>。</p><p>循环链表是带尾指针的，在表头插入新节点时间复杂度为O(1)；在表头删除节点O(1)；在表尾插入新节点O(1)；在表尾删除需要寻找前驱节点O(n)。</p><h5 id="5-双向链表"><a href="#5-双向链表" class="headerlink" title="5.双向链表"></a>5.双向链表</h5><p>拥有两个指针，一个指向pre，一个指向next。<br>双向链表的节点及其基本定义:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Dulnode <span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Dlnode <span class="token operator">*</span>prior<span class="token punctuation">,</span><span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Dulnode<span class="token punctuation">;</span></code></pre><p>双向链表的基本操作:</p><h6 id="1-双向链表的插入"><a href="#1-双向链表的插入" class="headerlink" title="(1)双向链表的插入"></a>(1)双向链表的插入</h6><p>将值为e的节点插入双向链表中，在插入时仅指出前驱节点，勾连时必须注意先后次序。</p><pre class=" language-c"><code class="language-c">S<span class="token operator">=</span><span class="token punctuation">(</span>Dulnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Dulnode<span class="token punctuation">)</span><span class="token punctuation">;</span>S<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>S<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">-></span>next<span class="token operator">-></span>prior<span class="token operator">=</span>S<span class="token punctuation">;</span>p<span class="token operator">-></span>next<span class="token operator">=</span>S<span class="token punctuation">;</span>S<span class="token operator">-></span>prior<span class="token operator">=</span>p<span class="token punctuation">;</span></code></pre><h6 id="2-双向链表的节点删除"><a href="#2-双向链表的节点删除" class="headerlink" title="(2)双向链表的节点删除"></a>(2)双向链表的节点删除</h6><p>设要删除的节点为p。删除时可以不引入新的辅助变量，可以先断链。</p><pre class=" language-c"><code class="language-c">p<span class="token operator">-></span>prior<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">-></span>next<span class="token operator">-></span>prior<span class="token operator">=</span>p<span class="token operator">-></span>prior<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="6-静态链表"><a href="#6-静态链表" class="headerlink" title="6.静态链表"></a>6.静态链表</h5><p>借助数组描述，静态链表有以下三个特性：连续空间段；通过修改指针域来实现插入删除；一次性分配储存空间。 </p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>component<span class="token punctuation">,</span>SLinkList<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cur为数组下表因此为整数</span></code></pre><h6 id="静态链表的查找"><a href="#静态链表的查找" class="headerlink" title="静态链表的查找"></a>静态链表的查找</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">locate_elem_SL</span><span class="token punctuation">(</span>SLinklist S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">=</span>S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">!=</span>e<span class="token punctuation">)</span>        i<span class="token operator">=</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="问题与说明"><a href="#问题与说明" class="headerlink" title="问题与说明"></a>问题与说明</h3><p>单链表删除的变形：</p><ul><li>A.删除值为key的所有节点<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_Linklist_node</span><span class="token punctuation">(</span>Linklist <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>  Lnode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span> q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>data<span class="token operator">==</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>          p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>          <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>          q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          p<span class="token operator">=</span>q<span class="token punctuation">;</span>          q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>B.删除所有值重复的节点</li></ul><p>第一种是O(n^2)的方法</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_Linklist_value</span><span class="token punctuation">(</span>Lnode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token punctuation">;</span>        ptr<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptr<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>data<span class="token operator">==</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                q<span class="token operator">-></span>next<span class="token operator">=</span>ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                ptr<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                q<span class="token operator">=</span>ptr<span class="token punctuation">;</span>                ptr<span class="token operator">=</span>ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二种是利用<code>map</code>来存值，只需要O(n)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_Linklist_value</span><span class="token punctuation">(</span>Linklist <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token punctuation">;</span>q<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">32767</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>q<span class="token operator">-></span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>q<span class="token operator">-></span>data<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>q<span class="token punctuation">;</span>            q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>约瑟夫问题</p><p>问题描述：n个人围成一圈，第一个人从1开始报数，报到第m个数的人出去，从下一个人开始从1开始重新报数，直到只剩下一个人。</p><p>第一种方法利用<code>count</code>计数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>List head<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    List p<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    p<span class="token operator">=</span>head <span class="token punctuation">;</span>    count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    k<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">--</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Winner"</span><span class="token operator">+</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二种方法：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Josephus</span><span class="token punctuation">(</span>List h<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span>p<span class="token operator">=</span>h<span class="token punctuation">,</span><span class="token operator">*</span>pre <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pre<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>pre<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Winner"</span><span class="token operator">+</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>C语言实现 Clion集成开发环境</p><h3 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h3><p>C语言实现</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mylist.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1000 </span><span class="token comment" spellcheck="true">//the longest length of linklist</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span>  LNode<span class="token punctuation">{</span>    ElemType  data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> LNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span> LinkList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span>LNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Status <span class="token function">GetElem_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// L is the header pointer of single link-list</span>    <span class="token comment" spellcheck="true">//when the ith element exist, the ith value arrange to e and return OK,otherwise return ERROR</span>    p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//initialize ,p point to the first node,j is counter</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//follow the pointer to search, until the p point to ith element or p is null</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the ith element doesn't exist</span>    e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// is ith element exist</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//GetElem_L</span><span class="token comment" spellcheck="true">//Algorithm 2.8</span>Status <span class="token function">ListInsert_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Insert the e above the ith element of the link-list</span>    p <span class="token operator">=</span> L<span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> p <span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// search the i-1th node</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">||</span>j<span class="token operator">></span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>s<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    s<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Algorithm 2.9</span>Status <span class="token function">ListDelete_l</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Delete the ith element and use e to return the value of ith element</span>    LNode <span class="token operator">*</span>q<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//search the ith element</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token operator">||</span> j<span class="token operator">></span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the delete location is not value</span>    q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>shixianshixian    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ListDelete_L</span><span class="token comment" spellcheck="true">//Algorithm 2.10</span><span class="token keyword">void</span> <span class="token function">CreatList_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// inverse input the n element ,establish a linklist</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//generate a new node</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        L<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//CreateList_L</span><span class="token comment" spellcheck="true">//Algorithm 2.11</span><span class="token keyword">void</span> <span class="token function">MergeList_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>La<span class="token punctuation">,</span>LinkList <span class="token operator">&amp;</span>Lb<span class="token punctuation">,</span>LinkList <span class="token operator">&amp;</span>Lc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// the La &amp; Lb element's values increasing</span>    <span class="token comment" spellcheck="true">// the new Link-list Lc is also increasing</span>    LNode <span class="token operator">*</span>pa <span class="token operator">=</span> La<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>pb <span class="token operator">=</span> Lb<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>pc <span class="token operator">=</span> La<span class="token punctuation">;</span>    Lc <span class="token operator">=</span> pc<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// using the header node of La as the header node of Lc</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pa <span class="token operator">&amp;&amp;</span> pb<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pa<span class="token operator">-></span>data <span class="token operator">&lt;=</span> pb<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            pc<span class="token operator">-></span>next<span class="token operator">=</span>pa<span class="token punctuation">;</span>            pc <span class="token operator">=</span> pa<span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            pc<span class="token operator">-></span>next <span class="token operator">=</span> pb<span class="token punctuation">;</span>            pc <span class="token operator">=</span> pb<span class="token punctuation">;</span>            pb <span class="token operator">=</span>pb<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    pc<span class="token operator">-></span>next <span class="token operator">=</span> pa<span class="token operator">?</span> pa<span class="token punctuation">:</span> pb<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Insert the extra list</span>    <span class="token function">free</span><span class="token punctuation">(</span>Lb<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// free the header node of Lb</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//MergeList_L</span><span class="token comment" spellcheck="true">//Algorithm 2.12</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>component<span class="token punctuation">,</span>SLinkList<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">LacateElem_SL</span><span class="token punctuation">(</span>SLinkList S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//find the first element which value equal to e of L</span>    <span class="token comment" spellcheck="true">//if find the element return the locate of the element.otherwise return 0</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&amp;&amp;</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">!=</span>e<span class="token punctuation">)</span> i <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LocateElem_SL</span><span class="token comment" spellcheck="true">//Example 2-3</span><span class="token keyword">void</span> <span class="token function">InitSpace_SL</span><span class="token punctuation">(</span>SLinkList <span class="token operator">&amp;</span>space<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//link the array space ,the head pointer is space[0].cur</span>    <span class="token comment" spellcheck="true">//"0" represent null pointer</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAXSIZE<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    space<span class="token punctuation">[</span>MAXSIZE<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// InitSpace_SL</span><span class="token comment" spellcheck="true">//Algorithm 2.14</span><span class="token keyword">int</span> <span class="token function">Malloc_SL</span><span class="token punctuation">(</span>SLinkList <span class="token operator">&amp;</span>space<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//if the another space is not empty,return the malloc node ,otherwise return 0</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span> space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Malloc_SL</span><span class="token comment" spellcheck="true">//Algorithm 2.15</span><span class="token keyword">void</span> <span class="token function">Free_Sl</span><span class="token punctuation">(</span>SLinkList <span class="token operator">&amp;</span>space <span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//put node which the tag is k into the another list</span>    space<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span> space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Free_SL</span><span class="token keyword">void</span> <span class="token function">differnece</span><span class="token punctuation">(</span>SLinkList <span class="token operator">&amp;</span>space <span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//input the A and B elements, establish a linklist represent the (A-B)U(B-A)</span>    <span class="token comment" spellcheck="true">//s is the head pointer</span>    <span class="token function">InitSpace_SL</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span>    S <span class="token operator">=</span> <span class="token function">Malloc_SL</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span>S<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token function">Malloc_SL</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span>space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        space<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>i<span class="token punctuation">;</span>        r<span class="token operator">=</span>i<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验报告——顺序表</title>
      <link href="/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-shun-xu-biao/"/>
      <url>/2018/12/11/shu-ju-jie-gou-shi-yan-bao-gao-shun-xu-biao/</url>
      
        <content type="html"><![CDATA[<ul><li>实验目的与要求</li><li>实验步骤与内容</li><li>问题与说明</li><li>备注</li><li>程序清单<br>实验题目：顺序表(SqList)<br>姓名：金正旭<br>指导教师： 刘铮</li></ul><h3 id="实验目的与要求"><a href="#实验目的与要求" class="headerlink" title="实验目的与要求"></a>实验目的与要求</h3><p>1.完成严蔚敏版《数据结构》上对线性表的基本操作，理解线性表的构造过程。</p><p>2.学会使用线性表增查改删各种功能，归纳下线性表作为线性结构的优缺点。</p><p>3.估计线性表各类操作的时间复杂度与空间复杂度。</p><p>4.掌握线性表的顺序存储结构。</p><p>5.掌握特殊矩阵的压缩方法</p><p>6.广义表的定义及理解</p><h3 id="实验步骤与内容"><a href="#实验步骤与内容" class="headerlink" title="实验步骤与内容"></a>实验步骤与内容</h3><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><p>顺序表的实现并不算很难，其基本思路和数组几乎完全一致，但是有一点很关键的不同的不同是顺序表不能有中间为空的item而数组可以。下面给出顺序表ADT。</p><p>顺序表ADT：</p><pre class=" language-c"><code class="language-c">ADT List<span class="token punctuation">{</span>    数据对象：D<span class="token operator">=</span><span class="token punctuation">{</span>ai<span class="token operator">|</span>ai∈ElemSet<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span> n≥<span class="token number">0</span><span class="token punctuation">}</span>    数据关系：R<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>ai<span class="token number">-1</span><span class="token punctuation">,</span>ai<span class="token operator">></span> <span class="token operator">|</span> ai<span class="token number">-1</span><span class="token punctuation">,</span>ai∈D，i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span>    基本操作：    <span class="token function">CreateList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DestroyList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListEmpty</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListLength</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DispList</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LocateElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ADT SqList<span class="token punctuation">;</span></code></pre><p>顺序表中元素的储存位置LOC（ai）之间<br></p><pre><code>LOC(ai+1) = LOC(ai)+/;&lt;br&gt;LOC(ai) = LOC(a1)+(i-1)×/&lt;br&gt;</code></pre><p>顺序表为随机存取结构，查找操作的时间复杂度是O(1)；<br><br>顺序表为静态结构(表一旦装满，不能扩充)</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_SIZE 100</span>    <span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> sqList<span class="token punctuation">{</span>        ElemType Elem_array<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>SqList<span class="token punctuation">;</span></code></pre><p>顺序表初始化：</p><pre class=" language-c"><code class="language-c">Status <span class="token function">Init_SqList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token operator">-></span>Elem_array<span class="token operator">=</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MAX_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token operator">-></span>Elem_array<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        L<span class="token operator">-></span>Length <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="顺序表的插入："><a href="#顺序表的插入：" class="headerlink" title="顺序表的插入："></a>顺序表的插入：</h6><p>1.L中i个到n个节点后移一位;<br><br>    2.将节点e插入到节点ai-1之后;<br><br>    3.顺序表长度加1.<br></p><pre class=" language-c"><code class="language-c">Status <span class="token function">Insert_SqList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>Length<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>Length <span class="token operator">>=</span> MAX_SIZE<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">:</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>Length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span>i<span class="token number">-1</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span> L<span class="token operator">-></span>Elem_array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-></span>Elem_array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>Elem_array<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    L<span class="token operator">-></span>Length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h6><p>设在顺序表中第i个元素之前插入结点为pi，</p><pre><code>Σ=Σpi*(n-i+1)  (1≤i≤n)Σinsert=n/2    时间复杂度为O(n)</code></pre><h6 id="顺序表的删除："><a href="#顺序表的删除：" class="headerlink" title="顺序表的删除："></a>顺序表的删除：</h6><pre class=" language-c"><code class="language-c">ElemType <span class="token function">Delete_SqList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    ElemType x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        x<span class="token operator">=</span>L<span class="token operator">-></span>Elem_array<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        L<span class="token operator">-></span>Elemarray<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-></span>Elem_array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="顺序表的查找定位删除："><a href="#顺序表的查找定位删除：" class="headerlink" title="顺序表的查找定位删除："></a>顺序表的查找定位删除：</h6><pre class=" language-c"><code class="language-c">ElemType <span class="token function">Delete_SqList_Locate</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span>ElemType key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length<span class="token operator">==</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   L<span class="token operator">-></span>Elem_array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-></span>Elem_array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="时间复杂度分析：-1"><a href="#时间复杂度分析：-1" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：<br></h6><p>设在顺序表中第i个位置找到相同key值的元素的概率为pi，且集合中元素key值互不相同。<br>首先要遍历整个元素对象集合并与key值比较</p><pre><code>Σcompare=(n+1)/2 O(n)</code></pre><p>然后将顺序表i后所有元素前移一位，并且长度减一</p><pre><code>Σdelete=(n-1)/2 O(n)</code></pre><p>所以总的时间复杂度为O(n)。</p><h4 id="特殊矩阵的压缩存储"><a href="#特殊矩阵的压缩存储" class="headerlink" title="特殊矩阵的压缩存储"></a>特殊矩阵的压缩存储</h4><p>数组是线性表的推广，对角矩阵，三角矩阵，对称矩阵可以使用特殊的数据结构优化存储空间。</p><h6 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h6><p>数组的逻辑结构是偶对<code>&lt;下标，元素&gt;</code>，及相同的数据类型。数组是随机存取结构且数组的个数是固定的。</p><h6 id="数组ADT"><a href="#数组ADT" class="headerlink" title="数组ADT"></a>数组ADT</h6><pre class=" language-c"><code class="language-c">ADT array<span class="token punctuation">{</span>    数据对象<span class="token punctuation">:</span>ji<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>bi<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>                     D<span class="token operator">=</span><span class="token punctuation">{</span>aj1j2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>jn<span class="token operator">|</span>n<span class="token operator">></span><span class="token number">0</span>称为数组的维数，bi是数组的长度，ji是数组元素第i维的下标，aj1j2j3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>jn∈ElemSet<span class="token punctuation">}</span>    数据关系<span class="token punctuation">:</span>R<span class="token operator">=</span><span class="token punctuation">{</span>R<span class="token punctuation">,</span>R1<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>Rn<span class="token punctuation">}</span>    Ri<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>    基本操作<span class="token punctuation">:</span>……<span class="token punctuation">}</span></code></pre><h3 id="问题与说明"><a href="#问题与说明" class="headerlink" title="问题与说明"></a>问题与说明</h3><p>严蔚敏老师给的是伪代码，其中的 &amp; 应该是想表示C++中引用的意思，这里为了让程序能够运行我把，书里的意思按另外的方法实现了。</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>C语言实现<br>CLion集成开发环境</p><h3 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h3><p>C语言实现</p><pre><code>#define MaxSize 50typedef char ElemType; typedef struct { ElemType data[MaxSize];     int length;    } SqList;      void CreateList(SqList *&amp;L,ElemType a[],int n）{    int i;    L=(SqList *)malloc(sizeof(SqList));    for(i=0;i&lt;n;i++)   L-&gt;data[i]=a[i];    L-&gt;length=n;}void InitList(SqList *&amp;L){    L=(SqList *)malloc(sizeof(SqList));    L-&gt;length=0;}void DestroyList(SqList *&amp;L){    free(L);    L=NULL;}int ListEmpty(SqList *L){    if(L-&gt;length) return 1;    return 0;}int ListLength(SqList *L){    return L-&gt;length;}void DispList(SqList *L){    int i=0;    for(i=0;i&lt;L-&gt;length;i++)   L-&gt;elem_array[i]=0;    L-&gt;length=0;    return OK;}int GetElem(SqList *L,int i,ElemType &amp;e);{    int j=0;    if(L-&gt;length==0) return  ERROR;    else if(i&lt;1 || i&gt;L-&gt;Length) return ERROR;    else e=L-&gt;elem_array[i-1];    return x;}int LocateElem(SqList *L, ElemType e){    int i=0;    if(!L-&gt;length) return ERROR;    for(i=0;i&lt;L-&gt;Length;i++)         if(L-&gt;elem_array[i]==e) break;    return i;}int ListInsert(SqList *&amp;L,int i,ElemType e){    int j;    if(i&lt;1 || i&gt;L-&gt;length-1) return ERROR;    if(L-&gt;length&gt;MAX_SIZE) return ERROR;    else {        for(j=L-&gt;length-1;j&gt;=i-1;--j) L-&gt;data[j+1]=L-&gt;data[j];        L-&gt;data[i-1]=e;        L-&gt;length++;    }    return OK;}int ListDelete(SqList *&amp;L,int i,ElemType &amp;e){    int j;    if(!L-&gt;length) return ERROR;    else if(i&lt;1 || i&gt;L-&gt;length) return ERROR;    else {        e=elem_array[i-1];        for(j=L-&gt;length-1;j&gt;=i-1;--j) L-&gt;elem_arrray[j+1]=L-&gt;elem_array[j];    }    return OK;    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下CentOS 7.x系统U盘制作</title>
      <link href="/2018/12/05/centos-7-x-xi-tong-u-pan-zhi-zuo/"/>
      <url>/2018/12/05/centos-7-x-xi-tong-u-pan-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<p>CentOS是红帽(RedHat)旗下RHEL的社区化版本，稳得一批。</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li>所需工具及资源</li><li>开始安装<h3 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h3></li><li>VMware workstations</li><li>CentOS 7.x iso镜像</li></ul><h4 id="VMware-workstations"><a href="#VMware-workstations" class="headerlink" title="VMware workstations"></a>VMware workstations</h4><p>Ubuntu 下安装VMware和Win平台下区别不大，网络上有不少免费使用VMware的方法，在这里还是呼吁大家使用正版或者开源软件。特别注意的一点是VMware等虚拟机程序需要在BIOS关闭Sercute Boot选项这样虚拟机才能正常工作，如果你启动不了虚拟机程序最好检查自己的BIOS中有没有关闭Sercute Boot选项。</p><h3 id="CentOS-镜像下载"><a href="#CentOS-镜像下载" class="headerlink" title="CentOS 镜像下载"></a>CentOS 镜像下载</h3><p><a href="https://www.centos.org/download/" target="_blank" rel="noopener">CentOS</a>官网提供了两种下载选项<code>DVD ISO</code>和<code>Minimal ISO</code>，我们是制作随身的系统应该是需要图形界面辅助的，建议大家下载DVD版，这样在后续的安装过程中比较方便。</p><p>根据你自己的机器类型选择下载文件，这里推荐<a href="http://mirrors.aliyun.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" target="_blank" rel="noopener">阿里云的镜像</a>，是属于速度比较快的下载源。如果你有自己的境外VPS服务建议你通过自己的服务器下载这样速度会有较大提升。</p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h4><p>首先打开VMware，点击左上角<code>File</code>选择<code>New Virtual Machine</code>，选择经典安装方式即可。</p><img src="https://s2.ax1x.com/2019/02/19/kcbmNR.png" alt="Typecial" width="40%"><p>然后点击<code>next</code>，在下一页面选择操作系统的类型，我们点选<code>Linux</code>和<code>CentOS 7 64-bit</code></p><img src="https://s2.ax1x.com/2019/02/19/kcbn41.png" alt="CetnOS chose" width="40%"><p>继续<code>next</code>，我们选择稍后安装操作系统</p><img src="https://s2.ax1x.com/2019/02/19/kcbM36.png" alt="later" width="40%"><p>然后一路next，这样虚拟机的配置就完成了。在刚创建的虚拟机页面上打开编辑虚拟机设置。打开以后首先配置内存和处理器，根据你个人机器的实际内存选择即可。</p><p>然后打开USB设置，将USB选项中把所有选项都打钩，选择USB3.0，点击<code>Save</code>保存退出。</p><img src="https://s2.ax1x.com/2019/02/19/kcbEB4.png" alt="later" width="40%"><p>在点击<code>DVD/CD(IDE)</code>选择下载的CentOS的iso镜像地址，点击<code>Save</code>保存退出。</p><img src="https://s2.ax1x.com/2019/02/19/kcbeE9.png" alt="later" width="40%"><h4 id="安装CentOS"><a href="#安装CentOS" class="headerlink" title="安装CentOS"></a>安装CentOS</h4><p>好了，配置完成之后我们就可以正式进入安装环节了！打开虚拟机<br>键盘切换到<code>Install CentOS 7</code>但是不要回车选择，点一下<code>Tab</code>键，键盘输入<code>inst.gpt</code>然后回车进入安装界面。</p><h5 id="CentOS基本配置"><a href="#CentOS基本配置" class="headerlink" title="CentOS基本配置"></a>CentOS基本配置</h5><p>首先选择语言，建议大家选择英文系统，Linux环境下的依赖关系一直是个让人头疼的问题，引入中文可能会搞出一些莫名奇妙的报错信息。而且如果你有过使用Linux的经验，这点英文的难度应该也不算太大。</p><p>进入下图界面以后西安设置好你的时区<code>Date and Time</code>和语言包<code>language</code>，语言包建议增加中文包支持。</p><p>然后点击，选择<code>Serve with GUI</code>带图形界面的服务器，右侧的选项里勾选兼容性程序库和基本开发环境</p><h5 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h5><p>选择好这些配置以后，开始调整分区设置打开 ，选择你要安装CentOS的U盘，如果没有特殊学习要求直接选择自动分区，接受退出安装即可。<br>如果希望自己分配空间，选择自主分配空间，点击<code>Done</code>会自动进入分区页，点击<code>+</code>即可新建分区。</p><img src="https://s2.ax1x.com/2019/02/19/kcbVHJ.png" alt="parition" width="40%"><p>按照自己的意愿选择好分区方式。点击<code>Done</code>完成分区设置，点击右下角AC开始安装。</p><img src="https://s2.ax1x.com/2019/02/19/kcbK9x.png" alt="accept" width="40%"><h5 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h5><p>密码有两个分别是root密码和用户密码，如果密码小于5位要连续点两次<code>Done</code>才能生效。</p><p>下面就是静静的等待了，这是一段比较漫长的时间，你可以离开电脑去健个身洗洗澡回来应该就差不多了。</p><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>选择接受协议后就可以开始使用你的CentOS 7了。<br>参考:<a href="http://linux.vbird.org/" target="_blank" rel="noopener">鸟哥的Linux教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java+MySQL构建学生信息管理系统</title>
      <link href="/2018/12/03/java-mysql-gou-jian-xue-sheng-xin-xi-guan-li-xi-tong/"/>
      <url>/2018/12/03/java-mysql-gou-jian-xue-sheng-xin-xi-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>学生信息管理系统，应付一般的课堂大作业应该足够了。</p><ul><li>体系框架</li><li>实现思路</li><li>数据库设计</li><li>界面设计</li><li>设计模式</li><li>源代码文件</li></ul><h3 id="体系框架"><a href="#体系框架" class="headerlink" title="体系框架"></a>体系框架</h3><img src="https://s2.ax1x.com/2019/02/19/kcb3uD.gif" alt="tea" width="60%"><img src="https://s2.ax1x.com/2019/02/19/kcbYEd.gif" alt="stu" width="60%"><p>登录系统实现学生和教师的同一客户端登录，通过访问数据库中不同的数据表区分，实现增查改删学籍信息，增查改删成绩信息，修改个人登录密码等功能。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><img src="https://s2.ax1x.com/2019/02/19/kcbaCt.gif" alt="score" width="60%"><img src="https://s2.ax1x.com/2019/02/19/kcbtUA.gif" alt="score" width="60%"><img src="https://s2.ax1x.com/2019/02/19/kcbN4I.gif" alt="score" width="60%">通过`JDBCHelper`实现所有通过数据库的功能，这样将数据库连接与界面设计隔离开。有利于代码的复用。### 数据库设计<img src="https://s2.ax1x.com/2019/02/19/kcbGHH.gif" alt="数据库设计" width="60%"><p>数据库内有两张表，分别为教师表和学生表，学生表中储存学籍、成绩等个人信息，学生初始密码为姓名，可以再个人中心中实现自我更改</p><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><p>通过<code>new</code>新类来弹出其他窗口。</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>ＤＡＯ设计模式</p><h3 id="源代码文件"><a href="#源代码文件" class="headerlink" title="源代码文件"></a>源代码文件</h3><p>Student.java</p><pre class=" language-Java"><code class="language-Java">package com.jason.bean;import java.util.Date;public class Student{    private int id;    private int student_id;    private String name;    private int age;    private String sex;    private Date birthday;    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public int getStudent_id() {        return student_id;    }    public void setStudent_id(int student_id) {        this.student_id = student_id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    public String getSex() {        return sex;    }    public void setSex(String sex) {        this.sex = sex;    }    public Date getBirthday() {        return birthday;    }    public void setBirthday(Date birthday) {        this.birthday = birthday;    }}</code></pre><p>JDBCHelper.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>xdevapi<span class="token punctuation">.</span>SqlDataResult<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCHelper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//JDBC driver and database URL</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> Successfulsign<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/info"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//database user name and password</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String USER <span class="token operator">=</span> <span class="token string">"teacher"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String PASS <span class="token operator">=</span> <span class="token string">"teacher"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String username<span class="token punctuation">;</span>    <span class="token keyword">static</span> String userpass<span class="token punctuation">;</span>    <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> title <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"学号"</span><span class="token punctuation">,</span><span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token string">"性别"</span><span class="token punctuation">,</span><span class="token string">"班级"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> title2 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"学号"</span><span class="token punctuation">,</span><span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token string">"高等数学"</span><span class="token punctuation">,</span><span class="token string">"线性代数"</span><span class="token punctuation">,</span><span class="token string">"C程序语言设计"</span><span class="token punctuation">,</span><span class="token string">"Java面向对象程序设计"</span><span class="token punctuation">,</span><span class="token string">"操作系统"</span><span class="token punctuation">,</span><span class="token string">"编译原理"</span><span class="token punctuation">,</span><span class="token string">"计算机网络"</span><span class="token punctuation">,</span><span class="token string">"数据结构"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserpass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userpass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//enroll the JDBC driver</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// open URL;</span>            con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sqlquery</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String s2<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.print(s);</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>s <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                username <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                userpass <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Successfully get user and password from sql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> userpass <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Successfulsign <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                Successfulsign <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//e1.printStackTrace();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSuccessfulsign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Successfulsign<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JTable <span class="token function">scrollpanel</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JTable ret <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSetMetaData rsmd<span class="token punctuation">;</span>        Vector colum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vector rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//String sql = "select * from student";</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>title<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                colum<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>title<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Vector currow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String engclassname <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token function">Tans2cn</span><span class="token punctuation">(</span>engclassname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rows<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>currow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span>colum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JTable <span class="token function">scrollpanelsocrce</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JTable ret <span class="token punctuation">;</span>        Vector colum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vector rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>title2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                colum<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>title2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Vector currow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rows<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>currow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span>colum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JTable <span class="token function">scrollpanelsocrcestat</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> score<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        JTable ret <span class="token punctuation">;</span>        Vector colum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vector rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>title2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                colum<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>title2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                Vector currow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currow<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                score<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">+=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rows<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>currow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Vector curr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"平均成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                score<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> count<span class="token punctuation">;</span>                curr<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rows<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"请补全学生信息"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span>colum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">Tans2cn</span><span class="token punctuation">(</span>String engname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String cnname<span class="token punctuation">;</span>        String engclassname<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>engname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"CS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnname <span class="token operator">=</span> <span class="token string">"计算机科学与技术"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>engname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"NP"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnname <span class="token operator">=</span> <span class="token string">"网络工程"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>engname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DMT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnname <span class="token operator">=</span> <span class="token string">"数字媒体技术"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>engname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"FB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnname <span class="token operator">=</span> <span class="token string">"金融大数据"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>engname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"FI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnname <span class="token operator">=</span> <span class="token string">"金融信息化"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>engname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnname <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>engname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnname <span class="token operator">=</span> <span class="token string">"女"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cnname <span class="token operator">=</span> engname<span class="token punctuation">;</span>        <span class="token keyword">return</span> cnname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addstuinfo</span><span class="token punctuation">(</span>String stu_name<span class="token punctuation">,</span>String stu_sex<span class="token punctuation">,</span>String stu_id<span class="token punctuation">,</span>String stu_class<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"insert into student values(?,?,?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>stu_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>stu_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>stu_sex<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>stu_class<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"insert have"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updatestu</span><span class="token punctuation">(</span>String oldid<span class="token punctuation">,</span>String stu_name<span class="token punctuation">,</span>String stu_sex<span class="token punctuation">,</span>String stu_id<span class="token punctuation">,</span>String stu_class<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//ps = con.prepareStatement("update student set stu_id=?,stu_sex=?,stu_pass=?,stu_naem=?,stu_class=? where stu_id=?");</span>            ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"update student set stu_sex=?,stu_name=?,stu_class=?,stu_pass=?,stu_id=? where stu_id=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>stu_sex<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>stu_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>stu_class<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>stu_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>oldid<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//ps.setString(2,stu_sex);</span>            <span class="token comment" spellcheck="true">//ps.setString(3,stu_name);</span>            <span class="token comment" spellcheck="true">//ps.setString(4,stu_name);</span>            <span class="token comment" spellcheck="true">//ps.setString(5,stu_class);</span>            <span class="token comment" spellcheck="true">//ps.setString(6,oldid);</span>            <span class="token comment" spellcheck="true">//ps.executeUpdate();</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deletstuinfo</span><span class="token punctuation">(</span>String oldid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"delete from student where stu_id=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>oldid<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"删除成功"</span><span class="token punctuation">,</span><span class="token string">"提示"</span><span class="token punctuation">,</span>JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">UpdatePass</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span>String signid<span class="token punctuation">,</span>String newpass<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sql<span class="token operator">=</span><span class="token string">"UPDATE "</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">" SET "</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">"_pass=? WHERE "</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">"_id=?"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            sql <span class="token operator">=</span> <span class="token string">"UPDATE "</span> <span class="token operator">+</span> <span class="token string">"student"</span> <span class="token operator">+</span> <span class="token string">" SET "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"_pass=? WHERE "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"_id=?"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>newpass<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>signid<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"修改成功"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Updatescore</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            String sql<span class="token operator">=</span><span class="token string">"UPDATE student SET CALCU="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",LA="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",CPL="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",JPL="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>                    <span class="token operator">+</span><span class="token string">",OS="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",CPTT="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",CN="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",DS="</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" WHERE stu_id="</span><span class="token operator">+</span>s<span class="token punctuation">;</span>            ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// JOptionPane.showMessageDialog(null, "修改成功", "提示", JOptionPane.WARNING_MESSAGE);</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//  e.printStackTrace();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>StudentDao.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deleteStudent</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span>    Student <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Enroll.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>frame<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enroll</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JLabel userlab<span class="token punctuation">,</span>passlab<span class="token punctuation">,</span>power<span class="token punctuation">,</span>numberid<span class="token punctuation">,</span>back<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton sign_in<span class="token punctuation">,</span>reset<span class="token punctuation">;</span>    <span class="token keyword">private</span> JRadioButton tea<span class="token punctuation">,</span>stu<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTextField username<span class="token punctuation">,</span>userid<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPasswordField password <span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel all<span class="token punctuation">,</span>head<span class="token punctuation">,</span>up<span class="token punctuation">,</span>med<span class="token punctuation">,</span>down<span class="token punctuation">,</span>last<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageIcon imageIcon<span class="token punctuation">;</span>    <span class="token keyword">private</span> Image image<span class="token punctuation">;</span>    <span class="token keyword">private</span> Color background<span class="token punctuation">;</span>    ButtonGroup bg<span class="token punctuation">;</span>    <span class="token keyword">static</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">static</span> String sqlusername<span class="token punctuation">;</span>    <span class="token keyword">static</span> String sqluserpass<span class="token punctuation">;</span>    <span class="token keyword">static</span> Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span>null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Enroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tea<span class="token punctuation">)</span><span class="token punctuation">;</span>        bg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>numberid<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        sign_in<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reset<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        up<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        up<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span><span class="token punctuation">;</span>        med<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>passlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        med<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>med<span class="token punctuation">)</span><span class="token punctuation">;</span>        last<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>power<span class="token punctuation">)</span><span class="token punctuation">;</span>        last<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tea<span class="token punctuation">)</span><span class="token punctuation">;</span>        last<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        down<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sign_in<span class="token punctuation">)</span><span class="token punctuation">;</span>        down<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">;</span>        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>down<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"登录系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        back <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>imageIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>        numberid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"教工号/学号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        power <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"选择"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userlab <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        passlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"教师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sign_in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"重置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        up <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        med <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        down <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//java.net.URL imgURL = TeacherPanel.class.getResource("/com/jason/img/qq_pic_merged_1542550853587.jpg");</span>        <span class="token comment" spellcheck="true">//imageIcon = new ImageIcon(imgURL);</span>        background <span class="token operator">=</span> null<span class="token punctuation">;</span>        up<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberid<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        power<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        tea<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        userlab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        passlab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        userid<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        username<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        password<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        sign_in<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        reset<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        tea<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        userlab<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        passlab<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        sign_in<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        reset<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        up<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        med<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        down<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>        last<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果选中教师登录</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tea<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">tealogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">stulogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"重置"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stulogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"Please enter your count information"</span><span class="token punctuation">,</span><span class="token string">"Tip"</span><span class="token punctuation">,</span>JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"Please enter your username"</span><span class="token punctuation">,</span><span class="token string">"Tip"</span><span class="token punctuation">,</span>JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"Please enter your password"</span><span class="token punctuation">,</span><span class="token string">"Tip"</span><span class="token punctuation">,</span>JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            String s2 <span class="token operator">=</span> userid<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">sqlquery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM student WHERE stu_id="</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>jdbcHelper<span class="token punctuation">.</span><span class="token function">isSuccessfulsign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//System.out.print("no bug hereeeeeeeeeeeeeeee");</span>                sqluserpass <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">getUserpass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sqlusername <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//System.out.print("no bug here");</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sqlusername<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sqluserpass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Successfully Sign In"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Successfully Sign In"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">new</span> <span class="token class-name">StudentPanel</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Couldn't find you count\n Try again"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Couldn't find you count\n Try again"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">tealogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Please enter your admin count information"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Please enter your admin username"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Please enter your admin password"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            String s2 <span class="token operator">=</span> userid<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">sqlquery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM admin WHERE admin_id="</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcHelper<span class="token punctuation">.</span><span class="token function">isSuccessfulsign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sqluserpass <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">getUserpass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sqlusername <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlusername<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sqluserpass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//System.out.print("Successfully Sign In");</span>                    JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Successfully admin Sign In"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">new</span> <span class="token class-name">TeacherPanel</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Couldn't find you count\n Try again"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"Couldn't find you admin count\n Try again"</span><span class="token punctuation">,</span> <span class="token string">"Tip"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userid<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>StudentPanel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>frame<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">.</span>GPAPanel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ProfileControl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">.</span>lessonControl<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JMenuBar menuBar<span class="token punctuation">;</span>    <span class="token keyword">private</span> JMenu lessoncontrol<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> GPAcontrol<span class="token punctuation">;</span>    <span class="token keyword">private</span> JMenuItem serachGPA<span class="token punctuation">,</span>statGPA<span class="token punctuation">;</span>    <span class="token keyword">private</span> JMenuItem lessoncontrolitem<span class="token punctuation">,</span> Personalcontrolitem<span class="token punctuation">,</span>SignOut<span class="token punctuation">;</span>    <span class="token keyword">private</span> Font font<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageIcon img<span class="token punctuation">;</span>    <span class="token keyword">private</span> JLabel icon<span class="token punctuation">;</span>    <span class="token keyword">private</span> String signid<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StudentPanel</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        signid <span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"学生信息管理系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">1270</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lessoncontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lessoncontrolitem<span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serachGPA<span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>statGPA<span class="token punctuation">)</span><span class="token punctuation">;</span>        profile<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Personalcontrolitem<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lessoncontrol<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GPAcontrol<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuBar<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>icon<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"课程管理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">lessonControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"个人中心"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">ProfileControl</span><span class="token punctuation">(</span>signid<span class="token punctuation">,</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"查询成绩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">GPAPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"成绩统计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">GPAPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"退出系统"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL imgURL <span class="token operator">=</span> TeacherPanel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/com/jason/img/qq_pic_merged_1542552134500.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Font font <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        icon<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>imgURL<span class="token punctuation">)</span><span class="token punctuation">;</span>        icon<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lessoncontrol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"课程管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        profile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"个人中心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"成绩管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachGPA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"查询成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statGPA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"成绩统计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lessoncontrolitem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"课程管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Personalcontrolitem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"个人中心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SignOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"退出系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachGPA<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statGPA<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lessoncontrolitem<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Personalcontrolitem<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SignOut<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lessoncontrol<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        profile<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        serachGPA<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        statGPA<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        lessoncontrolitem<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        Personalcontrolitem<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>TeacherPanel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>frame<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JMenuBar menuBar<span class="token punctuation">;</span>    <span class="token keyword">private</span> JMenu stucontrol<span class="token punctuation">,</span>GPAcontrol<span class="token punctuation">,</span>profile<span class="token punctuation">;</span>    <span class="token keyword">private</span> JMenuItem addGPA<span class="token punctuation">,</span> updateGPA<span class="token punctuation">,</span> serachGPA<span class="token punctuation">,</span> statGPA<span class="token punctuation">;</span>    <span class="token keyword">private</span> JMenuItem stucontrolitem<span class="token punctuation">,</span> Signout<span class="token punctuation">,</span>Personalcontrolitem<span class="token punctuation">;</span>    <span class="token keyword">private</span> Font font<span class="token punctuation">;</span>    <span class="token keyword">private</span> String signid<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageIcon img<span class="token punctuation">;</span>    <span class="token keyword">private</span> JLabel icon<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TeacherPanel</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        signid<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"学生信息管理系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">1300</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//this.setAlwaysOnTop(true);</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stucontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stucontrolitem<span class="token punctuation">)</span><span class="token punctuation">;</span>        profile<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Personalcontrolitem<span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addGPA<span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updateGPA<span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serachGPA<span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>statGPA<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stucontrol<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GPAcontrol<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Signout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuBar<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>icon<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"学籍管理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">ControlPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"增加成绩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">GPAControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"修改成绩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">GPAControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"查询成绩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">GPAControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"成绩统计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">GPAstatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"个人中心"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">ProfileControl</span><span class="token punctuation">(</span>signid<span class="token punctuation">,</span><span class="token string">"tea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"退出系统"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL imgURL <span class="token operator">=</span> TeacherPanel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/com/jason/img/qq_pic_merged_1542550853587.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Font font <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        icon<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>imgURL<span class="token punctuation">)</span><span class="token punctuation">;</span>        icon<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuBar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stucontrol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"学籍管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"成绩管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addGPA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"增加成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateGPA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"修改成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachGPA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"查询成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statGPA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"成绩统计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Signout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"退出系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        profile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"个人中心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stucontrolitem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"学籍管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Personalcontrolitem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"个人中心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addGPA<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateGPA<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachGPA<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statGPA<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Signout<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stucontrolitem<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Personalcontrolitem<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        GPAcontrol<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        addGPA<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        updateGPA<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        serachGPA<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        statGPA<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        stucontrolitem<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        Personalcontrolitem<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AddSource.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddScore</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> JLabel idlab<span class="token punctuation">,</span>id<span class="token punctuation">,</span>namelab<span class="token punctuation">,</span>name<span class="token punctuation">;</span>    <span class="token keyword">private</span> JLabel CALCU<span class="token punctuation">,</span>LA<span class="token punctuation">,</span>CPL<span class="token punctuation">,</span>JPL<span class="token punctuation">,</span>OS<span class="token punctuation">,</span>CPTT<span class="token punctuation">,</span>CN<span class="token punctuation">,</span>DS<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTextField getCALCU<span class="token punctuation">,</span>getLA<span class="token punctuation">,</span>getCPL<span class="token punctuation">,</span>getJPL<span class="token punctuation">,</span>getOS<span class="token punctuation">,</span>getCPTT<span class="token punctuation">,</span>getCN<span class="token punctuation">,</span>getDS<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel butp<span class="token punctuation">,</span>namep<span class="token punctuation">,</span>idp<span class="token punctuation">,</span>pCALCU<span class="token punctuation">,</span>pLA<span class="token punctuation">,</span>pCPL<span class="token punctuation">,</span>pJPL<span class="token punctuation">,</span>pOS<span class="token punctuation">,</span>pCPTT<span class="token punctuation">,</span>pCN<span class="token punctuation">,</span>pDS<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton right<span class="token punctuation">,</span>back<span class="token punctuation">;</span>    <span class="token keyword">private</span> String oldid<span class="token punctuation">,</span>oldname<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AddScore</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oldid <span class="token operator">=</span> s<span class="token punctuation">;</span>        jdbcHelper<span class="token punctuation">.</span><span class="token function">sqlquery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM student WHERE stu_id="</span><span class="token punctuation">,</span>oldid<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oldname <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"修改成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">680</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>namelab<span class="token punctuation">)</span><span class="token punctuation">;</span>namep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        idp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idlab<span class="token punctuation">)</span><span class="token punctuation">;</span>idp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        pCALCU<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>CALCU<span class="token punctuation">)</span><span class="token punctuation">;</span>pCALCU<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getCALCU<span class="token punctuation">)</span><span class="token punctuation">;</span>        pLA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LA<span class="token punctuation">)</span><span class="token punctuation">;</span>pLA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getLA<span class="token punctuation">)</span><span class="token punctuation">;</span>        pCPL<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>CPL<span class="token punctuation">)</span><span class="token punctuation">;</span>pCPL<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getCPL<span class="token punctuation">)</span><span class="token punctuation">;</span>        pJPL<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>JPL<span class="token punctuation">)</span><span class="token punctuation">;</span>pJPL<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getJPL<span class="token punctuation">)</span><span class="token punctuation">;</span>        pOS<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>OS<span class="token punctuation">)</span><span class="token punctuation">;</span>pOS<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getOS<span class="token punctuation">)</span><span class="token punctuation">;</span>        pCPTT<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>CPTT<span class="token punctuation">)</span><span class="token punctuation">;</span>pCPTT<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getCPTT<span class="token punctuation">)</span><span class="token punctuation">;</span>        pCN<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>CN<span class="token punctuation">)</span><span class="token punctuation">;</span>pCN<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getCN<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDS<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>DS<span class="token punctuation">)</span><span class="token punctuation">;</span>pDS<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        butp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>butp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>namep<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>idp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pCALCU<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pLA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pCPL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pJPL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pCPTT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pCN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>pDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>butp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        idlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"学号: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>oldid<span class="token punctuation">)</span><span class="token punctuation">;</span>        namelab<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>oldname<span class="token punctuation">)</span><span class="token punctuation">;</span>        CALCU<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"高等数学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LA<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"线性代数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CPL<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"C语言程序设计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPL<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"Java面向对象程序设计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OS<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"操作系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CPTT<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"编译原理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"计算机网络"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DS<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"数据结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getCALCU<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getLA<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getCPL<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getJPL<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getOS<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getCPTT<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getCN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getDS<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"确认修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        back <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"放弃修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pCALCU<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pLA<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pCPL<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pJPL<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pOS<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pCPTT<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pCN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pDS<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        butp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        back<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"确认修改"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> score <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getCALCU<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getLA<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getCPL<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getJPL<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getOS<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getCPTT<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getCN<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getDS<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zhixing yu ci"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">Updatescore</span><span class="token punctuation">(</span>oldid<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"放弃修改"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Addstu.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Addstu</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JLabel stu_id<span class="token punctuation">,</span>stu_name<span class="token punctuation">,</span>stu_class<span class="token punctuation">,</span>stu_sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTextField getstu_id<span class="token punctuation">,</span>getstu_name<span class="token punctuation">;</span>    <span class="token keyword">private</span> JComboBox getstu_class<span class="token punctuation">,</span>getstu_sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton add<span class="token punctuation">,</span>reset<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token punctuation">,</span>p5<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Addstu</span><span class="token punctuation">(</span>String engname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"添加学籍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">1220</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_name<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_sex<span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_class<span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_class<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        p5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>p5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_id<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"学号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_class <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"班级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_sex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_name <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_sex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_sex<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_sex<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"确认添加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"清空重置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reset<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        reset<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_sex<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_id<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_name<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_class<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"确认添加"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String id <span class="token operator">=</span> getstu_id<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> getstu_name<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> getstu_class<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String classname <span class="token operator">=</span> <span class="token function">Trans2eng</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            String sex <span class="token operator">=</span> <span class="token function">Trans2eng</span><span class="token punctuation">(</span>getstu_sex<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">addstuinfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>id<span class="token punctuation">,</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"添加信息成功"</span><span class="token punctuation">,</span><span class="token string">"提示"</span><span class="token punctuation">,</span>JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            getstu_id<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            getstu_name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"清空重置"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            getstu_id<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            getstu_name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">Trans2eng</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        String classname <span class="token operator">=</span> s<span class="token punctuation">;</span>        String engclassname<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"NP"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"DMT"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FB"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FI"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"M"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"F"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            engclassname<span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> engclassname<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ControlPanel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>table<span class="token punctuation">.</span>JTableHeader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControlPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> JLabel serchlab<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTableHeader jTableHeader<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTable jTable<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton addstu<span class="token punctuation">,</span>updatestu<span class="token punctuation">,</span>deletstu<span class="token punctuation">,</span>serachstu<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel updatepanel<span class="token punctuation">,</span>initpanel<span class="token punctuation">,</span>head<span class="token punctuation">,</span>body<span class="token punctuation">,</span>foot<span class="token punctuation">;</span>    <span class="token keyword">private</span> JScrollPane spstu<span class="token punctuation">;</span>    <span class="token keyword">private</span> JComboBox classselect<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> title <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"学号"</span><span class="token punctuation">,</span><span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token string">"年龄"</span><span class="token punctuation">,</span><span class="token string">"性别"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ControlPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"学籍管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">680</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>spstu<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTable<span class="token operator">=</span>jdbcHelper<span class="token punctuation">.</span><span class="token function">scrollpanel</span><span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//jTable=jdbcHelper.classinfo("计算机科学与技术");</span>        jTableHeader <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serchlab<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classselect<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serachstu<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>spstu<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addstu<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updatestu<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>deletstu<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>foot<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>initpanel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updatepanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"添加学籍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updatestu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"修改学籍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deletstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"删除学籍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setStu_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachstu<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addstu<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updatestu<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deletstu<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serchlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"查询班级学生  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTable <span class="token operator">=</span> null<span class="token punctuation">;</span>        jTableHeader<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setStu_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span><span class="token string">"select * from student where stu_class='"</span><span class="token operator">+</span><span class="token function">Trans2eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//jTable = jdbcHelper.classinfo(Trans2eng());</span>            jTable <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">scrollpanel</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            jTableHeader <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spstu<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"添加学籍"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Addstu</span><span class="token punctuation">(</span><span class="token function">Trans2eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"修改学籍"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Updatestu</span><span class="token punctuation">(</span>jTable<span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jTable<span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> nice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"请选择学籍信息"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"删除学籍"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> rows <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Deletstuinfo</span><span class="token punctuation">(</span>jTable<span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> th<span class="token punctuation">)</span> <span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"请选择学籍信息"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">Trans2eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String classname <span class="token operator">=</span> classselect<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String engclassname<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"NP"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"DMT"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FB"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FI"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            engclassname<span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> engclassname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addstu<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        updatestu<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        deletstu<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        serachstu<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        serchlab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ControlPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Deletstuinfo.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deletstuinfo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JButton right<span class="token punctuation">,</span>no<span class="token punctuation">;</span>    <span class="token keyword">private</span> JLabel tip<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel but<span class="token punctuation">,</span>lab<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">private</span> String arg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Deletstuinfo</span><span class="token punctuation">(</span>String oldid<span class="token punctuation">)</span><span class="token punctuation">{</span>        arg <span class="token operator">=</span> oldid<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"学籍管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">780</span><span class="token punctuation">,</span><span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>lab<span class="token punctuation">)</span><span class="token punctuation">;</span>        but<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        but<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>but<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lab<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"是"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"否"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"确认删除这条信息？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        no<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        tip<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"是"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">deletstuinfo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"否"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>GPAControl.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>table<span class="token punctuation">.</span>JTableHeader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GPAControl</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JLabel searchlab<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTable jTable<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton addsroce<span class="token punctuation">,</span>updatescore<span class="token punctuation">,</span>serachscore<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel initpanel<span class="token punctuation">,</span>head<span class="token punctuation">,</span>foot<span class="token punctuation">;</span>    <span class="token keyword">private</span> JScrollPane spstu<span class="token punctuation">;</span>    <span class="token keyword">private</span> JComboBox classselect<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTableHeader jTableHeader<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GPAControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"成绩管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">680</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTable<span class="token operator">=</span>jdbcHelper<span class="token punctuation">.</span><span class="token function">scrollpanelsocrce</span><span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTableHeader <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>searchlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classselect<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serachscore<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>spstu<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addsroce<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updatescore<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>foot<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>initpanel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addsroce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"添加成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updatescore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"修改成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachscore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setStu_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachscore<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addsroce<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updatescore<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        searchlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"查询班级成绩  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTable<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setStu_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">Trans2eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String classname <span class="token operator">=</span> classselect<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String engclassname<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"NP"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"DMT"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FB"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FI"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            engclassname<span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> engclassname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addsroce<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        updatescore<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        serachscore<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchlab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String sql <span class="token operator">=</span><span class="token string">"select * from student where stu_class='"</span><span class="token operator">+</span><span class="token function">Trans2eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>            jTable <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">scrollpanelsocrce</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            jTableHeader <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spstu<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"添加成绩"</span><span class="token punctuation">)</span><span class="token operator">||</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"修改成绩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">AddScore</span><span class="token punctuation">(</span>jTable<span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> nice<span class="token punctuation">)</span><span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"请选择学生信息"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//nice.printStackTrace();</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>GPAstatic.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>model<span class="token punctuation">.</span>element<span class="token punctuation">.</span>Element<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>table<span class="token punctuation">.</span>JTableHeader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GPAstatic</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JLabel searchlab<span class="token punctuation">,</span>gpastatic<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTable jTable<span class="token punctuation">,</span>footTable<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton serachscore<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel initpanel<span class="token punctuation">,</span> head<span class="token punctuation">,</span> foot<span class="token punctuation">;</span>    <span class="token keyword">private</span> JScrollPane spstu<span class="token punctuation">,</span>spstat<span class="token punctuation">;</span>    <span class="token keyword">private</span> JComboBox classselect<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTableHeader jTableHeader<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GPAstatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"成绩管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">680</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTable <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">scrollpanelsocrce</span><span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTableHeader <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spstat<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>footTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>searchlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classselect<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serachscore<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gpastatic<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>spstat<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>spstu<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>foot<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>initpanel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gpastatic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"平均成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initpanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachscore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spstat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setStu_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachscore<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        searchlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"查询班级成绩  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTable <span class="token operator">=</span> null<span class="token punctuation">;</span>        footTable <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setStu_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classselect<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">Trans2eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String classname <span class="token operator">=</span> classselect<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String engclassname<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"NP"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"DMT"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FB"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FI"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> engclassname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serachscore<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchlab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from student where stu_class='"</span> <span class="token operator">+</span> <span class="token function">Trans2eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>            jTable <span class="token operator">=</span> jdbcHelper<span class="token punctuation">.</span><span class="token function">scrollpanelsocrcestat</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            jTableHeader <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spstu<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ProfileControl.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>TeacherPanel<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfileControl</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JPanel body<span class="token punctuation">,</span> pass<span class="token punctuation">,</span> head<span class="token punctuation">,</span> headleft<span class="token punctuation">,</span> headright<span class="token punctuation">,</span> foot<span class="token punctuation">,</span> namepanel<span class="token punctuation">,</span> idpanel<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton right<span class="token punctuation">,</span> back<span class="token punctuation">;</span>    <span class="token keyword">private</span> JLabel namelab<span class="token punctuation">,</span> naem<span class="token punctuation">,</span> idlab<span class="token punctuation">,</span> id<span class="token punctuation">,</span> oldpasslab<span class="token punctuation">,</span> newpasslab<span class="token punctuation">,</span> icon<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageIcon image<span class="token punctuation">;</span>    <span class="token keyword">private</span> String signid<span class="token punctuation">,</span> isteaorstu<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTextField oldpass<span class="token punctuation">,</span> newpass<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProfileControl</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isteaorstu <span class="token operator">=</span> s2<span class="token punctuation">;</span>        signid <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"个人中心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">1220</span><span class="token punctuation">,</span> <span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        idpanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        headright<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idpanel<span class="token punctuation">)</span><span class="token punctuation">;</span>        namepanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>namelab<span class="token punctuation">)</span><span class="token punctuation">;</span>        namepanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>naem<span class="token punctuation">)</span><span class="token punctuation">;</span>        headright<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>namepanel<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>headright<span class="token punctuation">)</span><span class="token punctuation">;</span>        headleft<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>headleft<span class="token punctuation">)</span><span class="token punctuation">;</span>        pass<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>oldpasslab<span class="token punctuation">)</span><span class="token punctuation">;</span>        pass<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>oldpass<span class="token punctuation">)</span><span class="token punctuation">;</span>        pass<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newpasslab<span class="token punctuation">)</span><span class="token punctuation">;</span>        pass<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newpass<span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        foot<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>foot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isteaorstu<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"tea"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            namelab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"教师姓名: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"教工号: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">sqlquery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM admin WHERE admin_id="</span><span class="token punctuation">,</span> signid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            naem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>jdbcHelper<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>signid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            namelab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"学生姓名: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"学号: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">sqlquery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM student WHERE stu_id="</span><span class="token punctuation">,</span> signid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            naem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>jdbcHelper<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>signid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        oldpass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newpass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oldpasslab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"      旧密码:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newpasslab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"      新密码:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namepanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idpanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headleft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headright <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"确认修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        back <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"退出修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        back<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL imgURL <span class="token operator">=</span> ProfileControl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/com/jason/img/download.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>imgURL<span class="token punctuation">)</span><span class="token punctuation">;</span>        icon<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        back<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        namelab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        naem<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        idlab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        id<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        oldpasslab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        newpasslab<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"确认修改"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldpass<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> newpass<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"无效操作"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                String sql<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isteaorstu<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"tea"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sql <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    sql <span class="token operator">=</span> <span class="token string">"stu"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                jdbcHelper<span class="token punctuation">.</span><span class="token function">sqlquery</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> signid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldpass<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jdbcHelper<span class="token punctuation">.</span><span class="token function">getUserpass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String newpasswprd <span class="token operator">=</span> newpass<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    jdbcHelper<span class="token punctuation">.</span><span class="token function">UpdatePass</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> signid<span class="token punctuation">,</span> newpasswprd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> JOptionPane<span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"退出修改"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Updatestu.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>JDBCHelper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Updatestu</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JLabel stu_id<span class="token punctuation">,</span>stu_name<span class="token punctuation">,</span>stu_class<span class="token punctuation">,</span>stu_sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> JTextField getstu_id<span class="token punctuation">,</span>getstu_name<span class="token punctuation">;</span>    <span class="token keyword">private</span> JComboBox getstu_class<span class="token punctuation">,</span>getstu_sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> JButton add<span class="token punctuation">,</span>reset<span class="token punctuation">;</span>    <span class="token keyword">private</span> JPanel p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token punctuation">,</span>p5<span class="token punctuation">;</span>    <span class="token keyword">private</span> JDBCHelper jdbcHelper<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cardid<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Updatestu</span><span class="token punctuation">(</span>String stuid<span class="token punctuation">,</span>String oldname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cardid<span class="token operator">=</span>stuid<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"修改学籍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">1560</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_id<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>cardid<span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>oldname<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_name<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_sex<span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu_class<span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getstu_class<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        p5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>p5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_id<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"学号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_class <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"班级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_sex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_name <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_sex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_class<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_sex<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getstu_sex<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"确认修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"清空重置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reset<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Font fontlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font fontbut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        reset<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontbut<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_sex<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_id<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_name<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_class<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>fontlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"确认修改"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">ConnecttoSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String id <span class="token operator">=</span> getstu_id<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> getstu_name<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> getstu_class<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String classname <span class="token operator">=</span> <span class="token function">Trans2eng</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            String sex <span class="token operator">=</span> <span class="token function">Trans2eng</span><span class="token punctuation">(</span>getstu_sex<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jdbcHelper<span class="token punctuation">.</span><span class="token function">updatestu</span><span class="token punctuation">(</span>cardid<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>id<span class="token punctuation">,</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"修改信息成功"</span><span class="token punctuation">,</span><span class="token string">"提示"</span><span class="token punctuation">,</span>JOptionPane<span class="token punctuation">.</span>WARNING_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"清空重置"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            getstu_id<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            getstu_name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">Trans2eng</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        String classname <span class="token operator">=</span> s<span class="token punctuation">;</span>        String engclassname<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"NP"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"数字媒体技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"DMT"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融大数据"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FB"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"金融信息化"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"FI"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"M"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            engclassname <span class="token operator">=</span> <span class="token string">"F"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            engclassname<span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> engclassname<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>test.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>run<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>Enroll<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jason<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>TeacherPanel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Enroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new TeacherPanel();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java图文并茂设计计算器</title>
      <link href="/2018/12/03/java-tu-wen-bing-mao-she-ji-ji-suan-qi/"/>
      <url>/2018/12/03/java-tu-wen-bing-mao-she-ji-ji-suan-qi/</url>
      
        <content type="html"><![CDATA[<ul><li>体系框架 </li><li>实现思路</li><li>中缀表达式转后缀表达式</li><li>LinkList实现栈相关功能</li><li>界面设计</li><li>源代码文件</li></ul><h3 id="体系框架"><a href="#体系框架" class="headerlink" title="体系框架"></a>体系框架</h3><p>实现复杂四则运算，小数点，Java swing设计界面，通过<code>JMenu</code>来切换鼠标输入和键盘输入模式。<br><img src="https://s2.ax1x.com/2019/02/19/kcbljO.gif" alt="计算器演示" width="60%"></p><p>整个文件由三个类构成，分别是MyCalcutor.java(界面类)，Postfix.java（计算类）,test.java（功能类）。通过在MyCalcutor.java(界面类)中实例化Postfix.java（计算类）来达到计算用户输入并输出的功能。<br>API of Postfix</p><pre><code>class Postfix    Type       Method    void      setStr(String str)  //将得到的字符串分成单个字符储存到链表里    double    getResult() //获得计算结果    void      transferToPostfix(LinkedList&lt;String&gt; list) //转化为后缀表达式    double    calculate() //根据后缀表达式计算结果    boolean   isOperator(String oper) //判断是否操作符    int       priority(String s) //计算操作符的优先级    double    cal(double num1,double num2,String operator)//执行运算符所代表的运算</code></pre><p>API of Postfix:</p><pre><code>class MyCalcutor extends JFrame implements ActionListener    Type      Method    void      MyCalcutor() //构造方法    void      actionPerformed(ActionEvent e) //监听方法     void      init() //初始化方法被构造方法调用    void      setChar() //设置字体方法被init方法调用内部类class AWT_ONVALUECHANGED implements TextListener     void      textValueChanged(TextEvent t)</code></pre><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>总体思路是获得用户输入的字符串并计算该字符串所表示算数表达式的值。细分功能有：小数点运算，多零输入，（）运算，高级数学运算（平方，开根，求模等）等。<br>第一步，将算数表达式分割，给按钮“=”添加监听，当用户发事件“=”时将输入的字符串传递给Postfix类，Postfix的setStr将算数运算式由字符串转换成单个字符组成的链表，再通过调用transferToPostfix方法得到后缀表达式，此时再通过calculate方法计算表达式的值即可。整个运算过程就结束了。</p><p>通过<code>JFrame</code>来创造页面，通过监听<code>JMenu</code>切换不同的<code>JPanel</code>实现鼠标和键盘的切换。<br>通过内部类<code>AWT_ONVALUECHANGED</code>实现<code>TextListener</code>接口来监控键盘输入页面的键盘输入，当在用户键入换行符时自动计算表达式的值。</p><h3 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h3><p>所谓中缀表达式就是像我们平时书写的算式一样，但是后缀表达式表达方式则是将数字放在前符号放在后，所有计算按运算符出现的顺序，严格从从左向右进行，这恰好符合我们对用栈来计算值的想法不谋而合。读后缀表达式时，如果读到操作数就将它压入栈S中，如果读到n元操作符，则取出由栈顶向下的n个元素按操作符运算，再将运算的结果代替原栈顶的n项，压入栈S中。剩下的运算符中，若其优先级高于其它所有的运算符，直接入栈。</p><p>将中缀表达式转换为后缀表达式的是<code>transferToPostfix</code>,举个例子:</p><pre><code>9+1*3+(3+4)*3</code></pre><p>转换为后缀表达式就是:</p><pre><code>9 1 3 * + 3 3 4 + * +</code></pre><p>但是如果想要计算高位的数字就要在数字中加上特殊符号来分割数字。这个在转化为后缀表达式是在转换之前对中缀表达式进行处理，因为中缀表达式的形式比较适合分割数字。</p><h3 id="LinkList实现栈相关功能"><a href="#LinkList实现栈相关功能" class="headerlink" title="LinkList实现栈相关功能"></a>LinkList实现栈相关功能</h3><p>实际上使用Linklist和Stack都可以实现，将后缀表达式与栈进行数据交换。将构造方法<code>MyCalcutor</code>传来的中缀表达式中数值和符号全部分隔开然后按原有顺序存储到链表里，然后通过Linklist的迭代器把数值按照后缀表达式表示规则，将字符使用StringBuilder类对象sb储存成后缀表达式。</p><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><p>采用<code>BorderLayout</code>布局同时实实现将已计算表达式储存到上方<code>JTextArea</code>中采用滚动条浏览设置为不可编辑。中间为<code>JTextFiled</code>可以编辑，后是实时显示结果采用<code>JTestArea</code>，下方的<code>JButton</code>采用<code>GridLayout</code>布局并增加<em>Donate</em>按键打开本人的个人网站。</p><center><img src="https://s2.ax1x.com/2019/02/19/kcbwgf.png" alt="初始页面" width="40%">初始页面</center>      <center><img src="https://s2.ax1x.com/2019/02/19/kcbDKS.png" alt="复杂运算滚动条" width="40%">复杂运算滚动条</center><center><img src="https://s2.ax1x.com/2019/02/19/kcb0v8.png" alt="键盘输入" width="40%">键盘输入</center>### 源代码文件MyCalcutor.java```javaimport javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.TextEvent;import java.awt.event.TextListener;import java.util.Stack;<p>public class MyCalcutor extends JFrame implements ActionListener{</p><pre><code>private JPanel panel = new JPanel();private JPanel BasicMode = new JPanel(new BorderLayout());private JPanel KeyBoardMode = new JPanel(new GridLayout(4, 1));private JMenuBar bar = new JMenuBar();private JMenu menu = new JMenu(&quot;Menu&quot;);private JMenuItem itemInitial = new JMenuItem(&quot;BasicMode&quot;);private JMenuItem itemChange = new JMenuItem(&quot;KeyboardMode&quot;);private JButton bnum[] = new JButton[10];private JButton minus = new JButton(&quot;-&quot;);private JButton plus = new JButton(&quot;+&quot;);private JButton mult = new JButton(&quot;*&quot;);private JButton div = new JButton(&quot;÷&quot;);private JButton equl = new JButton(&quot;=&quot;);private JButton mod = new JButton(&quot;%&quot;);private JButton sqrt = new JButton(&quot;√&quot;);private JButton pow = new JButton(&quot;^&quot;);private JButton setzero = new JButton(&quot;C&quot;);private JButton rightres = new JButton(&quot;)&quot;);private JButton leftres = new JButton(&quot;(&quot;);private JButton ret = new JButton(&quot;&lt;-&quot;);private JButton dot = new JButton(&quot;.&quot;);private JButton donate = new JButton(&quot;Donate&quot;);private JLabel pi = new JLabel(&quot;上方可以切换输入模式&quot;);private JTextArea front = new JTextArea(4, 10);private JScrollPane front2 = new JScrollPane(front);private JTextArea in = new JTextArea(4, 10);private JTextArea out = new JTextArea(4, 10);private JTextArea head = new JTextArea(4, 10);//private JTextArea kym_front = new JTextArea();private TextArea kym_front = new TextArea();//private JTextField kym_in = new JTextField();private JTextField kym_out = new JTextField();private java.awt.TextArea kym_in = new java.awt.TextArea();private Font font2 = new Font(&quot;TimesRoman&quot;, Font.ITALIC, 20);private Font font = new Font(&quot;TimesRoman&quot;, Font.BOLD, 30);private JPanel up = new JPanel(new BorderLayout());private JPanel med = new JPanel(new GridLayout(4, 6));private JPanel down = new JPanel(new FlowLayout());//private StackCal stackCal = new StackCal();private Postfix cal = new Postfix();class AWT_ONVALUECHANGED implements TextListener {    public void textValueChanged(TextEvent t) {        String inputkeyboard;        inputkeyboard = kym_in.getText();        int inputlen = inputkeyboard.length();        if (inputlen &gt; 1) {            if ((inputkeyboard.charAt(inputlen - 1)) == &#39;\n&#39;) {                StringBuffer argstocal = new StringBuffer(inputkeyboard);                String args = argstocal.substring(0, inputlen - 1);                cal.setStr(args);                kym_front.append(args + &quot;=&quot; + cal.getResult() + &quot;\n&quot;);                kym_in.setText(&quot;&quot;);                kym_out.setText(&quot;Result:&quot; + &quot;\n&quot; + cal.getResult() + &quot;&quot;);            }        }    }}MyCalcutor() {    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    setVisible(true);    setLayout(new BorderLayout());    setBackground(Color.black);    setSize(700, 840);    init();    front.setText(&quot;&quot;);    panel.add(BasicMode);    add(panel);    head.setFont(new Font(&quot;TimesRoman&quot;, Font.ITALIC, 22));    head.append(&quot;  Input your own expression in orange area and press ENTER.\n\n&quot; +            &quot;                 The result will explain in blue area.\n\n&quot; +            &quot;                But please obey the rule of expression.\n\n&quot; +            &quot;                       Enjoy the KeyboardMode :)&quot;);    out.append(&quot;Result:&quot;);    kym_out.setText(&quot;Result:&quot;);}public void actionPerformed(ActionEvent e) {    if (e.getSource() == itemChange) {    //改变图形化界面为“KeyBoardMode”的界面。        panel.removeAll();        panel.add(KeyBoardMode);          //切换代码。        panel.validate();        repaint();    } else if (e.getSource() == itemInitial) {//改变图形化界面为“BasicMode”界面。        panel.removeAll();        panel.add(BasicMode);        panel.validate();        repaint();    } else if (e.getSource() == bnum[0]) {        in.setText(in.getText() + &quot;0&quot;);    } else if (e.getSource() == bnum[1]) {        in.setText(in.getText() + &quot;1&quot;);    } else if (e.getSource() == bnum[2]) {        in.setText(in.getText() + &quot;2&quot;);    } else if (e.getSource() == bnum[3]) {        in.setText(in.getText() + &quot;3&quot;);    } else if (e.getSource() == bnum[4]) {        in.setText(in.getText() + &quot;4&quot;);    } else if (e.getSource() == bnum[5]) {        in.setText(in.getText() + &quot;5&quot;);    } else if (e.getSource() == bnum[6]) {        in.setText(in.getText() + &quot;6&quot;);    } else if (e.getSource() == bnum[7]) {        in.setText(in.getText() + &quot;7&quot;);    } else if (e.getSource() == bnum[8]) {        in.setText(in.getText() + &quot;8&quot;);    } else if (e.getSource() == bnum[9]) {        in.setText(in.getText() + &quot;9&quot;);    } else if (e.getSource() == div) {        in.setText(in.getText() + &quot;÷&quot;);    } else if (e.getSource() == minus) {        in.setText(in.getText() + &quot;-&quot;);    } else if (e.getSource() == mult) {        in.setText(in.getText() + &quot;*&quot;);    } else if (e.getSource() == plus) {        in.setText(in.getText() + &quot;+&quot;);    } else if (e.getSource() == mod) {        in.setText(in.getText() + &quot;%&quot;);    } else if (e.getSource() == sqrt) {        in.setText(in.getText() + &quot;√&quot;);    } else if (e.getSource() == pow) {        in.setText(in.getText() + &quot;^&quot;);    } else if (e.getSource() == rightres) {        in.setText(in.getText() + &quot;)&quot;);    } else if (e.getSource() == leftres) {        in.setText(in.getText() + &quot;(&quot;);    } else if (e.getSource() == dot) {        in.setText(in.getText() + &quot;.&quot;);    } else if (e.getSource() == setzero) {        in.setText(&quot;&quot;);    } else if (e.getSource() == ret) {        String str1 = in.getText();        int strlen = str1.length();        String str2;        if (strlen != 0) {            str2 = str1.substring(0, strlen - 1);        } else {            str2 = &quot;&quot;;        }        in.setText(str2);    } else if (e.getSource() == donate) {        try {            String url = &quot;jinzhnegxu.online&quot;;            java.net.URI uri = java.net.URI.create(url);            // 获取当前系统桌面扩展            Desktop dp = Desktop.getDesktop();            // 判断系统桌面是否支持要执行的功能            if (dp.isSupported(Desktop.Action.BROWSE)) {                //File file = new File(&quot;D:\\aa.txt&quot;);                //dp.edit(file);// 　编辑文件                dp.browse(uri);// 获取系统默认浏览器打开链接                // dp.open(file);// 用默认方式打开文件                // dp.print(file);// 用打印机打印文件            }        } catch (NullPointerException er) {            // 此为uri为空时抛出异常            er.printStackTrace();        } catch (java.io.IOException er) {            // 此为无法获取系统默认浏览器            er.printStackTrace();        }    } else if (e.getSource() == equl) {        cal.setStr(in.getText());        front.append(in.getText() + &quot;=&quot; + cal.getResult() + &quot;\n&quot;);        in.setText(&quot;&quot;);        out.setText(&quot;Result:&quot; + &quot;\n&quot; + cal.getResult() + &quot;&quot;);    }}public void init() {    for (int i = 0; i &lt; bnum.length; i++) {        bnum[i] = new JButton(i + &quot;&quot;);        bnum[i].setFont(font);        bnum[i].setBorder(BorderFactory.createRaisedBevelBorder());        bnum[i].addActionListener(this);    }    front2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);    front.setEditable(false);    in.setEditable(false);    out.setEditable(false);    up.add(front2, BorderLayout.NORTH);    up.add(in, BorderLayout.CENTER);    up.add(out, BorderLayout.SOUTH);    BasicMode.add(up, BorderLayout.NORTH);    minus.addActionListener(this);    plus.addActionListener(this);    mult.addActionListener(this);    div.addActionListener(this);    equl.addActionListener(this);    mod.addActionListener(this);    sqrt.addActionListener(this);    pow.addActionListener(this);    setzero.addActionListener(this);    rightres.addActionListener(this);    leftres.addActionListener(this);    ret.addActionListener(this);    dot.addActionListener(this);    donate.addActionListener(this);    med.add(bnum[7]);    med.add(bnum[8]);    med.add(bnum[9]);    med.add(div);    med.add(ret);    med.add(setzero);    med.add(bnum[4]);    med.add(bnum[5]);    med.add(bnum[6]);    med.add(mult);    med.add(leftres);    med.add(rightres);    med.add(bnum[3]);    med.add(bnum[2]);    med.add(bnum[1]);    med.add(minus);    med.add(pow);    med.add(sqrt);    med.add(bnum[0]);    med.add(dot);    med.add(mod);    med.add(plus);    med.add(donate);    med.add(equl);    BasicMode.add(med, BorderLayout.CENTER);    down.add(pi);    BasicMode.add(down, BorderLayout.SOUTH);    kym_front.setEditable(false);    kym_in.setEditable(true);    kym_out.setEditable(false);    head.setEditable(true);    head.setLineWrap(true);    kym_in.setBackground(Color.orange);    kym_out.setBackground(Color.cyan);    KeyBoardMode.add(head);    KeyBoardMode.add(kym_front);    KeyBoardMode.add(kym_in);    KeyBoardMode.add(kym_out);    this.setChar();    itemInitial.addActionListener(this);    itemChange.addActionListener(this);    bar.add(menu);    menu.add(itemInitial);    menu.add(itemChange);    panel.setLayout(new GridLayout(1, 1));    add(panel);    panel.add(BasicMode);    setJMenuBar(bar);    kym_in.addTextListener(new AWT_ONVALUECHANGED());    /*kym_in.addTextListener(new TextListener() {        @Override        public void textValueChanged(TextEvent e) {            String inputkeyboard;            inputkeyboard = kym_in.getText();            int inputlen = inputkeyboard.length();            if ((inputkeyboard.charAt(inputlen-1)) == &#39;\n&#39;) {                StringBuffer argstocal = new StringBuffer(inputkeyboard);                String args = argstocal.substring(0,inputlen-1);                cal.setStr(args);                kym_front.append(args+ &quot;=&quot; + cal.getResult() + &quot;\n&quot;);                kym_in.setText(&quot;&quot;);                kym_out.setText(&quot;Result:&quot; + &quot;\n&quot; + cal.getResult() + &quot;&quot;);            }        }    });    */}private void setChar() {    out.setBackground(Color.ORANGE);    minus.setBorder(BorderFactory.createRaisedBevelBorder());    plus.setBorder(BorderFactory.createRaisedBevelBorder());    mult.setBorder(BorderFactory.createRaisedBevelBorder());    div.setBorder(BorderFactory.createRaisedBevelBorder());    equl.setBorder(BorderFactory.createRaisedBevelBorder());    mod.setBorder(BorderFactory.createRaisedBevelBorder());    sqrt.setBorder(BorderFactory.createRaisedBevelBorder());    pow.setBorder(BorderFactory.createRaisedBevelBorder());    setzero.setBorder(BorderFactory.createRaisedBevelBorder());    rightres.setBorder(BorderFactory.createRaisedBevelBorder());    leftres.setBorder(BorderFactory.createRaisedBevelBorder());    ret.setBorder(BorderFactory.createRaisedBevelBorder());    dot.setBorder(BorderFactory.createRaisedBevelBorder());    donate.setBorder(BorderFactory.createRaisedBevelBorder());    //pi.setBorder(BorderFactory.createRaisedBevelBorder());    front.setBorder(BorderFactory.createRaisedBevelBorder());    in.setBorder(BorderFactory.createRaisedBevelBorder());    out.setBorder(BorderFactory.createRaisedBevelBorder());    kym_in.setFont(font);    kym_front.setFont(font);    kym_out.setFont(font);    minus.setFont(font);    plus.setFont(font);    mult.setFont(font);    div.setFont(font);    equl.setFont(font);    mod.setFont(font);    sqrt.setFont(font);    pow.setFont(font);    setzero.setFont(font);    rightres.setFont(font);    leftres.setFont(font);    ret.setFont(font);    dot.setFont(font);    donate.setFont(font2);    pi.setFont(font);    front.setFont(font);    in.setFont(font);    out.setFont(font);    head.setFont(font2);}</code></pre><p>}</p><pre><code>Postfix.java```javaimport java.util.Iterator;import java.util.LinkedList;public class Postfix {    //用于记录操作符    private static LinkedList&lt;String&gt; operators=new LinkedList&lt;&gt;();    //用于记录输出    private static LinkedList&lt;String&gt; output=new LinkedList&lt;&gt;();    //用于展示后缀表达式    private static StringBuilder sb=new StringBuilder();    private String str;    private double result;    public void setStr(String str) {        this.str = str;        LinkedList&lt;String&gt; list = new LinkedList&lt;&gt;();        StringBuffer num = new StringBuffer();        for(int i=0;i&lt;str.length();i++){                list.add(str.charAt(i) + &quot;&quot;);        }        transferToPostfix(list);        result=calculate();    }    public double getResult() {        return result;    }    //中缀表达式转为后缀表达式    public void transferToPostfix(LinkedList&lt;String&gt; list){        Iterator&lt;String&gt; it=list.iterator();        String pro = null;        boolean flag = true;        while (it.hasNext()) {            String s = it.next();            if (isOperator(s)) {                if (operators.isEmpty()) {                    operators.push(s);                }                else {                    //如果读入的操作符为非&quot;)&quot;且优先级比栈顶元素的优先级高或一样，则将操作符压入栈                    if (priority(operators.peek())&lt;=priority(s)&amp;&amp;!s.equals(&quot;)&quot;)) {                        operators.push(s);                    }                    else if(!s.equals(&quot;)&quot;)&amp;&amp;priority(operators.peek())&gt;priority(s)){                        while (operators.size()!=0&amp;&amp;priority(operators.peek())&gt;=priority(s)                                &amp;&amp;!operators.peek().equals(&quot;(&quot;)) {                            if (!operators.peek().equals(&quot;(&quot;)) {                                String operator=operators.pop();                                sb.append(operator).append(&quot;#&quot;);                                output.push(operator);                            }                        }                        operators.push(s);                    }                    //如果读入的操作符是&quot;)&quot;，则弹出从栈顶开始第一个&quot;(&quot;及其之前的所有操作符                    else if (s.equals(&quot;)&quot;)) {                        while (!operators.peek().equals(&quot;(&quot;)) {                            String operator=operators.pop();                            sb.append(operator).append(&quot;#&quot;);                            output.push(operator);                        }                        //弹出&quot;(&quot;                        operators.pop();                    }                }            }            //读入的为非操作符            else {                if(flag||isOperator(pro)) {                    sb.append(s).append(&quot;#&quot;);                    output.push(s);                    flag=false;                }else{                    sb.append(s);jiaohuan                    output.push(s);                }            }            pro=s;        }        if (!operators.isEmpty()) {            Iterator&lt;String&gt; iterator=operators.iterator();            while (iterator.hasNext()) {                String operator=iterator.next();                sb.append(operator).append(&quot;#&quot;);                output.push(operator);                iterator.remove();            }        }    }    //根据后缀表达式计算结果    public double calculate(){        LinkedList&lt;String&gt; mList=new LinkedList&lt;&gt;();        String[] postStr=sb.toString().split(&quot;#&quot;);        for (String s:postStr) {            if (isOperator(s)){                if (!mList.isEmpty()){                    double num1;//=Double.valueOf(mList.pop());                    double num2;//=Double.valueOf(mList.pop());                    double newNum;                    if(s.equals(&quot;√&quot;)){                        num1=Double.valueOf(mList.pop());                        newNum=cal(num1,0,s);                        num1=0.0;num2=0.0;                    }else if(s.equals(&quot;.&quot;)){                        num1=Double.valueOf(mList.pop());                        if(!mList.isEmpty())                            num2=Double.valueOf(mList.pop());                        else                            num2=0.0;                        while(num1&gt;1){                            num1 =num1/10;                        }                        newNum = cal(num2, num1, s);                        num1=0.0;num2=0.0;                    }else {                        num1=Double.valueOf(mList.pop());                        num2=Double.valueOf(mList.pop());                        if (s.equals(&quot;/&quot;)||s.equals(&quot;÷&quot;)&amp;&amp;num2==0.0){                            System.out.println(&quot;除数不能为0&quot;);                            return 0.0;                        }                        newNum = cal(num2, num1, s);                        num1=0.0;num2=0.0;                    }                    mList.push(String.valueOf(newNum));                }            }            else {                //数字则压入栈中                mList.push(s);            }        }        if (!mList.isEmpty()){            //System.out.println(&quot;result: &quot;+mList.pop());            return Double.parseDouble(mList.pop());        }        return 0.0;    }    //判断是否操作符    public boolean isOperator(String oper){        if (oper.equals(&quot;+&quot;)||oper.equals(&quot;-&quot;)||oper.equals(&quot;/&quot;)||oper.equals(&quot;*&quot;)||oper.equals(&quot;√&quot;)||oper.equals(&quot;.&quot;)                ||oper.equals(&quot;(&quot;)||oper.equals(&quot;)&quot;)||oper.equals(&quot;%&quot;)||oper.equals(&quot;^&quot;)||oper.equals(&quot;÷&quot;)) {            return true;        }        return false;    }    //计算操作符的优先级    public int priority(String s){        switch (s) {            case &quot;-&quot;:return 1;            case &quot;+&quot;:return 1;            case &quot;*&quot;:return 2;            case &quot;/&quot;:return 2;            case &quot;%&quot;:return 2;            case &quot;÷&quot;:return 2;            case &quot;^&quot;:return 3;            case &quot;√&quot;:return 3;            case &quot;.&quot;:return 3;            case &quot;(&quot;:return 4;            case &quot;)&quot;:return 4;            default :return 0;        }    }    public double cal(double num1,double num2,String operator){        switch (operator){            case &quot;+&quot;:return num1+num2;            case &quot;-&quot;:return num1-num2;            case &quot;*&quot;:return num1*num2;            case &quot;/&quot;:return num1/num2;            case &quot;÷&quot;:return num1/num2;            case &quot;^&quot;:return Math.pow(num1,num2);            case &quot;√&quot;:return Math.sqrt(num1);            case &quot;.&quot;:return num1+num2;            default :return 0;        }    }}</code></pre><p>test.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyCalcutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Ubuntu+Gtihub打造你的个人博客</title>
      <link href="/2018/11/30/hexo-ubuntu-gtihub-da-zao-ni-de-ge-ren-bo-ke/"/>
      <url>/2018/11/30/hexo-ubuntu-gtihub-da-zao-ni-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>搭建自己的个人博客是一件很有趣的事，可是网上教程大多是关于Windows系统下通过Hexo搭建博客的教程，对于Linux重度用户来说十分不友好这里趁着熟悉，为大家整理一份相近的教程。主要解决Ubuntu下git免密hexo部署等问题。</p><ul><li>环境配置</li><li>域名购买及连接</li><li>hexo 基本操作</li><li>Markdown语法</li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>Github</li><li>Node.js</li><li>Hexo</li></ul><h3 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h3><p>使用apt命令通过ppa源安装分布式版本控制工具git:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> add-apt-repository ppa:git-core/ppa$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span></code></pre><p>在终端中输入</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> --version</code></pre><p>验证是否安装成功，若出现</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> version 2.17.1</code></pre><p>则安装完成。然后开始配置SSH，首先打开终端输入</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"yournaem@github.com"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"youremail@github.com"</span></code></pre><p>将后缀改为你的账户名和Github绑定邮箱，不用输入<code>@github.com</code>。</p><p>新建一个终端输入:</p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"your_email@example.com"</span></code></pre><p>按要求设置密码等，回车后会在主目录下生成两个文件<code>id_rsa</code>和<code>id_rsa.pub</code>，复制<code>id_rsa.pub</code>中的内容，打开Github中settings页面找到<code>SSH and GPG keys</code>设置，点击<code>New SSH key</code>,填写title，然后将内容复制到key中，确认。在终端下输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.com</code></pre><p>收到提示信息<code>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</code>即配置SSH成功。<br>可是在blog更新时每次输入密码是很麻烦的，所以打开终端，输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">touch</span> .git-credentials$ vim .git-credentials</code></pre><p>在文件中输入:</p><pre><code>https://{username}:{password}@github.com例如 https://jinzheng:123456@github.com</code></pre><p><code>:wq</code>保存后，在终端输入:</p><pre class=" language-bash"><code class="language-bash">$  <span class="token function">git</span> config --global credential.helper store</code></pre><p>打开<code>.gitconfig</code>文件多了一行<code>[credential] helper = store</code>。此时密码配置完成。只要再输一次密码就会永久保存。</p><p>git安装完成后在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>官网注册账号后点击 new repository新建一个项目，注意项目名称为<code>username.github.io</code>这是标准格式，例如我的Github账号名为Jinzhengxu，那我的项目名称就是<code>jinzhengxu.github.io</code>这个不可以更改。此时在浏览器输入<code>username.github.io</code>就可以看到你的个人主页了。</p><p>完成以后在repository的主页左上角点击 <code>Clone or download</code> 选择SSH链接并复制。在终端下输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone git@github.com:username/username.github.io.git</code></pre><p>不要忘记修改成你自己的账户和仓库地址。等待仓库clone完成，<br>在终端下输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/username.github.io$ hexo init <span class="token punctuation">[</span>folder<span class="token punctuation">]</span></code></pre><h3 id="Node-js配置"><a href="#Node-js配置" class="headerlink" title="Node.js配置"></a>Node.js配置</h3><p>我们使用编译安装的方法来安装Node.js，虽然这样比较麻烦但是可以不用考虑安装其他的安装模块。而且Linux系统下依赖关系比较复杂，常用的前端库<code>event-stream</code>就植入了恶意代码，所以尽量还是编译安装。</p><p>Node.js<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载地址</a>，我们使用Linux系统，所以选择下载Source Code源代码。</p><p>打开终端转到下载源代码文件的目录下，输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token comment" spellcheck="true"># tar xvf node-v10.13.0.tar.gz</span>$ <span class="token function">cd</span> node-v10.13.0$ ./configure$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span>  $ <span class="token function">cp</span> /usr/local/bin/node /usr/sbin/ </code></pre><p>安装完成后，在终端下输入:</p><pre class=" language-bash"><code class="language-bash">$ node -v</code></pre><p>显示版本号<code>v10.13.0</code>即安装成功。接下来更新npm:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> -v$ nom <span class="token function">install</span> -g <span class="token function">npm</span></code></pre><p>等待安装完成即可。</p><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>在终端下输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g$ <span class="token function">npm</span> <span class="token function">install</span> hexo -g</code></pre><p>在终端窗口，定位到Hexo站点目录下:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> username.github.io$ hexo init <span class="token punctuation">[</span>folder<span class="token punctuation">]</span></code></pre><p>测试网站，继续输入:</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo s</code></pre><p>在浏览器里打开<code>localhost:4000</code>就能看到网站了。<br>然后将Github的仓库和本地个人仓库连接起来，打开Hexo创建的博客主目录下的<code>.config.yml</code>文件，在文件的最后将文件修改为</p><pre><code>deploy:  type: git  repo: https://github.com/Username/username.github.io.git  branch: master</code></pre><p>将repo的地址更换为你自己的仓库地址。然后<code>:wq</code>保存退出，在终端下输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>安装git插件，然后顺序执行:</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d</code></pre><p>此时在浏览器输入<code>username.github.io</code>就可以看到你的Hexo主页了。</p><h2 id="域名购买及连接"><a href="#域名购买及连接" class="headerlink" title="域名购买及连接"></a>域名购买及连接</h2><p>国内主要的域名服务商就是腾讯云和阿里云万网，都可以选择，万网操作比较简单,千万注意购买域名的英文名是否是你想要的，域名属于即时服务一旦购买无法撤回。</p><p>打开阿里云管理控制台，找到域名，进入解析，在解析中添加三条:<br><img src="http://pj5rgjk03.bkt.clouddn.com/18-12-3/18250294.jpg" alt="添加解析" title="添加解析"><br>然后登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的个人域名。</p><p>找到hexo blog目录下的<code>source</code>文件夹打开新建一个文件<code>CNAME</code>，在其中填写上刚刚购买的域名，可以省略掉<code>www.</code>这样可以在浏览器中免除输入<code>www.</code>。</p><p>完成后，打开终端输入:</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d</code></pre><p>此时在浏览器中输入你的域名，就可以打开你的个人网站啦。</p><h2 id="Hexo-基本操作"><a href="#Hexo-基本操作" class="headerlink" title="Hexo 基本操作"></a>Hexo 基本操作</h2><ul><li>Hexo操作</li><li>Hexo主题<h3 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h3><pre><code>npm install hexo -g  #安装Hexonpm update hexo -g   #升级 hexo init            #初始化博客</code></pre>命令简写:<pre><code>hexo n &quot;new_test_site&quot; == hexo new &quot;new_test_site&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</code></pre>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><br>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a><br>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a><br>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a><h3 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h3>从<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>你可以寻找你喜欢的主题，我使用的是NexT主题，在blog位置打开终端输入:<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next.git thmems/next</code></pre>将<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT</a>下载到themes下的next文件夹，在blog目录打开站点配置文件<code>_config.yml</code>中<code>themes</code>修改为：<pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next</code></pre>打开next文件夹目录下的<code>_config.yml</code>,通过注释掉不同的选项，你可以设置自己的样式:<pre><code># Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini</code></pre>也可以修改<code>menu</code>下的注释来添加模块组:<pre><code>menu:home: / || homeabout: /about/ || usertags: /tags/ || tagscategories: /categories/ || tharchives: /archives/ || archive#schedule: /schedule/ || calendar#sitemap: /sitemap.xml || sitemap#commonweal: /404/ || heartbeat</code></pre>举例来说，假如我要添加目录categories，首先将<code>_config.yml</code>文件中categories前的<code>#</code>删掉，然后在blog打开终端，输入:<pre class=" language-bash"><code class="language-bash">$ hexo new page <span class="token string">"categories"</span></code></pre><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2>Markdown是一款轻量级的语言，利用Markdown写出的博文不会和HTML一样有许多标签，比较贴近文本的自然形式。在<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">这里</a>你可以找到许多Markdown的介绍和实例。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序专题</title>
      <link href="/2018/10/14/pai-xu-zhuan-ti/"/>
      <url>/2018/10/14/pai-xu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基础排序"><a href="#1-基础排序" class="headerlink" title="1.基础排序"></a>1.基础排序</h3><p>我们查看一个元素那个元素有一条记录，我们要排序的信息准确地说，记录中有一部分叫做关键字（主键），我们要讲记录根据关键字进行排列。这就是排序问题。在Java中，元素通常都是对象，对主键的抽象是通过一种内置的机制（Comparable接口）来实现的。</p><h3 id="1-1-排序类算法模板"><a href="#1-1-排序类算法模板" class="headerlink" title="1.1 排序类算法模板"></a>1.1 排序类算法模板</h3><pre><code>public class Example {    public static void sort(Comparable\[\] a){        //algr2.1 or 2.2 or 2.3 or others    }    private static boolean less(Comparable v,Comparable w)    {    return v.compareTo(w) &lt; 0;}    private static void exch(Comparable\[\] a,int i,int j)    {   Comparable t =a\[i\];a\[i\]=a\[j\];a\[j\] =t;}    private void show(Comparable\[\] a)    { //在单行中打印数组        for(int i=0;i&lt;a.length;i++)            StdOut.print(a\[i\]+&quot; &quot;);        StdOut.println();    }    public static boolean isSorted(Comparable\[\] a)    { //测试数组元素是否有序        for(int i = 1;i&lt;a.length;i++)            if(less(a\[i\],a\[i-1\])) return false;        return true;    }    public static void main(String\[\] args)    {//从标准输入读取字符串，将它们排序并输出            String\[\] a = In.readString();            sort(a);            assert isSorted(a);            show(a);    }}</code></pre><h3 id="1-1-1排序成本模型"><a href="#1-1-1排序成本模型" class="headerlink" title="1.1.1排序成本模型"></a>1.1.1排序成本模型</h3><p>在研究排序算法时我们计算比较和交换的次数，对于不交换元素的算法，我们计算访问数组的次数。</p><h3 id="1-1-2数据类型"><a href="#1-1-2数据类型" class="headerlink" title="1.1.2数据类型"></a>1.1.2数据类型</h3><p>排序算法适用于任何实现了Comparable接口的数据类型，像Integer，String，Double都实现了comparable接口。在创建自己的数据类型时，我们要保证实现Comparable接口，要做到这一点，只需要实现一个compareTo()方法来定义目标类型对象的自然次序（natrual order）。</p><pre><code>public class Date implements Compareable&lt;Date&gt;{    private final int day;    private final int month;    private final int year;    public Date(int d,int m,int y)    { day=d;month=m;year=y;}    public int day(){ return day;}    public int month(){ return month;}    public int year(){ return year;}    public int compareTo(Date that)    {        if( this.year &gt; that.year) return +1;        if( this.year &lt; that.year) return -1;        if( this.month &gt; that.month) return +1;        if( this.month &lt; that.month) return -1;        if( this.year &gt; that.year) return +1;        if( this.year &lt; that.year) return -1;        return 0;    }    public String toString()    { return month+&quot;/&quot;+day+&quot;/&quot;+year;}}</code></pre><h3 id="1-1-2-1全序关系"><a href="#1-1-2-1全序关系" class="headerlink" title="1.1.2.1全序关系"></a>1.1.2.1全序关系</h3><p>自反性(Totality): for all v ,v=v; 反对称性(Antisymmetry)：if v&lt;=w and w&lt;=v,then v=w; 传递性(Transitivity)： if v&lt;=w,and w&lt;=x,then v&lt;=x.</p><h3 id="1-2选择排序"><a href="#1-2选择排序" class="headerlink" title="1.2选择排序"></a>1.2选择排序</h3><p>找到一个最小的元素并将它和未排序序列的第一个元素交换。每次交换都能排定一个位置因此交换的从次数是N。对于长度为N的数组选择排序需要(N^2)/2次比较和N次交换。选择排序有两个很鲜明的特点：1.运行时间和输入无关2.数据移动是最少的。 好了，不扯这些学术的，选择排序其实就是个冒泡排序，在没排序的元素里找到一个最小的元素然后把它排到前面仅此而已。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-10-14-21-21-29.png" alt="Screenshot from 2018-10-14 21-21-29"></p><pre><code>public class Selection{ public static void sort(Comparable\[\] a) { int N = a.length; for (int i = 0; i &lt; N; i++) { int min = i; for (int j = i+1; j &lt; N; j++) if (less(a\[j\], a\[min\])) min = j; exch(a, i, min); } } private static boolean less(Comparable v, Comparable w) { /\* as before */ } private static void exch(Comparable\[\] a, int i, int j) { /\* as before */ }}</code></pre><h3 id="1-1-3插入排序"><a href="#1-1-3插入排序" class="headerlink" title="1.1.3插入排序"></a>1.1.3插入排序</h3><p>顾名思义，插入排序其实有点像选择排序的逆过程，跟着index走走走，碰到一个元素把它跟已排序的数组元素比较，直到找到一个比他大的元素，然后插到他前面，要是没有比他大的就扔到最后。</p><pre><code>public class Insertion{ public static void sort(Comparable\[\] a) { int N = a.length; for (int i = 0; i &lt; N; i++) for (int j = i; j &gt; 0; j--) if (less(a\[j\], a\[j-1\])) exch(a, j, j-1); else break; } private static boolean less(Comparable v, Comparable w) { /\* as before */ } private static void exch(Comparable\[\] a, int i, int j) { /\* as before */ }}</code></pre><p>但是考虑一种特殊的情况那就是如果我们要排序的数组是一个部分有序的数组，那插入排序可能比别的排序算法都要快。BTW，想要提高插入排序的速度并不难，只要在内循环中将较大的元素都向右移而不是交换两个元素（这样访问数组的次数就能cut掉一半）。这个特性为shell排序埋下伏笔。疯狂暗示。</p><h3 id="1-3比较两种算法"><a href="#1-3比较两种算法" class="headerlink" title="1.3比较两种算法"></a>1.3比较两种算法</h3><p>光说不行，给出一个能计算时间的class</p><pre><code>public class SortCompare{     public static void main(String\[\] alg,Double\[\] a){         Stopwatch timer = new Stopwatch();         if(alg.equals(&quot;Insertion&quot;)) Insertion.sort(a);         if(alg.equals(&quot;Selection&quot;)) Selection.sort(a);         if(alg.equals(&quot;Shell&quot;))     Shell.sort(a);         if(alg.equals(&quot;Merge&quot;))     Merge.sort(a);         if(alg.equals(&quot;Quick&quot;))     Quick.sort(a);         if(alg.equals(&quot;Heap&quot;))      Heap.sort(a);     }     public static double timeRandomInput(String alg,int N,int T){         double total =0.0;         double\[\] a = new Double\[N\];         for(int t =0 ;t &lt; T; t++){            for(int i =0;i &lt; N;i++){                a\[i\] = StdRandom,uniform();             total += time(alg,a);         }         return total;     }     public static void main(String\[\] args){          String alg1 = arg\[0\];          String alg2 = arg\[1\];          int N = Integer.parseInt(args\[2\]);          int T = Integer.parseInt(args\[3\]);          double t1 = timeRandomInput(alg1,N,T);          double t2 = timeRandomInput(alg2,N,T);          StdOut.printf(&quot;For %d random doubles\\n    %s is&quot;,N,alg1);          StdOut,printf(&quot; %.1f times faster than %s\\n&quot;, t2/t1,alg2);     }}</code></pre><h3 id="1-3-1如何打乱一个数组"><a href="#1-3-1如何打乱一个数组" class="headerlink" title="1.3.1如何打乱一个数组"></a>1.3.1如何打乱一个数组</h3><p>方法很简单给已有的数组每个元素产生一个随机数，然后将这些数组元素按照随机数大小排列即可。BUT，我们真的要付出一个完整排序的时间来打乱数组吗？可不可以找到一个更6的方法，absolutely！而且这个算法只需要线性的时间。首先index i遍历数组每次在0和i之间产生一个随机数，然后交换i和随机数位置的元素即可。给下class：</p><pre><code>public class StdRandom{ ... public static void shuffle(Object\[\] a) { int N = a.length; for (int i = 0; i &lt; N; i++) { int r = StdRandom.uniform(i + 1); exch(a, i, r); } }}</code></pre><p>会有人在选择数组位时随机选择0~N之间的数，这实际上是不能实现随机排序的。为啥？你该恶补离散了骚年，赶紧翻出《Discrete Mathematics and it’s Application》偷偷看。</p><h3 id="1-4希尔排序Shell"><a href="#1-4希尔排序Shell" class="headerlink" title="1.4希尔排序Shell"></a>1.4希尔排序Shell</h3><p>希尔排序其实是插入排序和其他排序的一种结合，首先假设我们有一个数组，我们先将他部分排序按照不同的增量，这样就获得了一个比较小的数组来进行排序，这恰恰是插入排序所擅长的部分。<img src="https://jason87459473.files.wordpress.com/2018/10/e5b18fe5b995e688aae59bbe94.png" alt="屏幕截图(94).png"> 如上图所示，数组有15个元素，按照增量4对数组（h有序数组）进行分离然后对着四个元素排序，我们计算增量的公式有很多种，推荐一个1/2（3^k-1），这是一个递增序列。 希尔排序更高效的原因是他权衡了子数组的规模和有序性（通过前面给的那个公式），排序之前每个h子数组都很短，排序之后数组是部分有序的，这两种情况都很适合希尔排序。（子数组的有序情况取决于递增序列的选择）。 给出希尔排序的代码~~（WordPress写代码好麻烦连个tab键都用不了，先下个vs code，蓝瘦，安一波发现Java的extension是RedHat 提供的啊，最近刚被？IBM收购不是，闭源系统祖师爷收购开源先锋23333）。</p><pre><code>public class Shell{public static void sort (Comparable \[\]){       int N=a.length();       int h=1;       while(h&lt;N/3) h =3*h+1; //1,4,13,40,121........       while(h&gt;=1){       //make the array be h-sorted array       for(inti=h;i&lt;N;i++){       //insert the element a\[i\] to a\[i-h\],a\[i-2\*h\],a\[i-3\*h\]...       for(intj= i;j &gt;= h &amp;&amp;less(a\[j\],a\[j-h\]); j-=h)       exch(a,j,j-h);       }       h=h/3;      }   }}</code></pre><p>希尔排序的运行时间是不到平方级的，对插入排序的一个小小改变就突破了平方级的限制，这就是算法的精妙之处，BTW，最坏情况是和N^2/3成正比。 放图<img src="https://jason87459473.files.wordpress.com/2018/10/e5b18fe5b995e688aae59bbe95.png" alt="屏幕截图(95)"></p><h3 id="1-5归并排序Merge"><a href="#1-5归并排序Merge" class="headerlink" title="1.5归并排序Merge"></a>1.5归并排序Merge</h3><p>归并排序算法的思想很简单就是一个分治法的思想，只要将数组一分为二，然后不断将小数组分下去对每个小数组排序然后对两个小数组合并最终会得到一个完整排序的数组，但是归并排序需要一个辅助数组aux[]。</p><pre><code>public class Merge{    private static void merge(Comparable\[\] a,Comparable\[\] aux,int lo,int mid,int hi){        assert isSorted(a,lo,mid);        assert isSorted(a,mid+1,hi);        for(int k=lo;k &lt;= hi;k++)            aux\[k\]=a\[k\];        int i=lo,j=mid+1;        for(int k=lo;k&lt;=hi;k++){            if(i&gt;mid) a\[k\]=aux\[j++\];            else if(j&gt;hi) a\[k\]=aux\[i++\];            else if(less(aux\[j\],aux\[i\])) a\[k\]=aux\[j++\];            else a\[k\]=aux\[i++\];        }        assert isSorted(a,lo,hi);    }}</code></pre><p>解释一下assetion语句，在Java里arrest提供了一种检查代码的方法，通过assert你可以表示自己想干什么，在Java里assert接受一个boolean，默认是禁用的。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-14-23-40-581.png" alt="Screenshot from 2018-11-14 23-40-58"> 所以你可以在编程时开启assert方法，然后在最后关闭这不会对最终的代码有任何影响。 归并排序对于任何数组包括倒序的情况都有同样的时间复杂度，nlogn。 假设你要对10亿个元素排序如果你使用插入排序，那么你可能需要300年，但归并排序只需要半个小时。 这张图很好解释了归并排序 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-15-00-00-09.png" alt="Screenshot from 2018-11-15 00-00-09"> <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-15-00-02-38.png" alt="Screenshot from 2018-11-15 00-02-38"> 学习过离散数学我们知道第一个等式的原因就是，当建设N是2的幂次时，每次分治都会产生两个小数组的时间和一次总的比较的时间。 下面这种方法是两边同时除以n，比较偏数学 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-15-00-06-571.png" alt="Screenshot from 2018-11-15 00-06-57"> 或者下面这种数学归纳法的方式 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-15-00-10-40.png" alt="Screenshot from 2018-11-15 00-10-40"> 归并排序的时间复杂度很棒，但是空间复杂度不很友好，你需要至少一半的空间来储存辅助数组，虽然有方法来实现原地排序的Merge但是方法太过复杂。所以有几个小trick可以提高Merge算法的性能，第一个在数组元素的个数小于一定值时，采用插入排序。</p><pre><code>if(hi &lt;= lo+CUTOFF -1){    Insertion.sort(a,lo,hi);    return;}</code></pre><p>另一种方法是不是每次豆浆数组copy进辅助数组，而是两个数组的互相充当对方的辅助数组，这样就节省了一半的copy操作的时间。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-15-00-25-43.png" alt="Screenshot from 2018-11-15 00-25-43"> 还有一种方法是在排序前先检查是否已经数组有序。这样即使每个元素都需要检查也只需要线性复杂度的时间。</p><pre><code>if(!less(a\[mid+1\],a\[mid\])) return;public class Merge{    private static void merge(Comparable\[\] a,Comparable\[\] aux,int lo,int mid,int hi){        assert isSorted(a,lo,mid);        assert isSorted(a,mid+1,hi);        for(int k=lo;k &lt;= hi;k++)            aux\[k\]=a\[k\];        int i=lo,j=mid+1;        for(int k=lo;k&lt;=hi;k++){            if(i&gt;mid) a\[k\]=aux\[j++\];            else if(j&gt;hi) a\[k\]=aux\[i++\];            else if(less(aux\[j\],aux\[i\])) a\[k\]=aux\[j++\];            else a\[k\]=aux\[i++\];        }        assert isSorted(a,lo,hi);    }    private static void sort(Comparable\[\] a,Comparable\[\] aux ,int lo,int hi){        if(hi &lt;= lo+CUTOFF -1){            Insertion.sort(a,lo,hi);            return;        }        int mid = lo+(hi-lo)/2;        sort(aux,a,lo,mid);        sort(aux,a，mid+1,hi);        if(!less(a\[mid+1\],a\[mid\])) return;        merge(a,aux,lo,mid,hi);    }    public static void sort(Comparable\[\] a){        aux = new Comparable\[a.length\];        sort(a,aux,0,a.length-1);    }}</code></pre><h3 id="1-5-1自底向上的归并排序（Bottom-up-Merge-sort）"><a href="#1-5-1自底向上的归并排序（Bottom-up-Merge-sort）" class="headerlink" title="1.5.1自底向上的归并排序（Bottom-up Merge sort）"></a>1.5.1自底向上的归并排序（Bottom-up Merge sort）</h3><p>自底向上的方法与递归不同，我们将每个数组中的元素都看作一个已经排序的长度为1的数组，然后将这些元素按二元组排序，然后按四元组排序。最终通过Merge我们会获得一个完全有序的数组。下面是递归和自底向上两种方法直观的比较。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-15-00-00-09.png" alt="Screenshot from 2018-11-15 00-00-09"><img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-09-25-11.png" alt="Screenshot from 2018-11-18 09-25-11"> 这样做的好处是可以遍历整个数组但是不用递归操作。所以自底向上的时间复杂度最差是logn。 上代码</p><pre><code>public class MergeBU {    private static Comparable\[\] aux;    private static void merge(Comparable\[\] a,int lo,int mid,int hi){        //as before    }    private static void sort(Comparable\[\] a){        int N = a.length;        aux = new Comparable\[N\];        for(int sz=1;sz&lt;N;sz=sz+sz)            for(int lo=0;lo&lt;N-sz;lo+=sz+sz)                merge(a,lo,lo+sz-1,Math.min(N-1,lo+sz+sz-1));                //此处将最后一组元素可能会少于sz的情况考虑不会出现数组越界    }}</code></pre><h3 id="2-凸包convex-hull"><a href="#2-凸包convex-hull" class="headerlink" title="2 凸包convex hull"></a>2 凸包convex hull</h3><p>这个必须要讲一下哈，2018徐州ICPC的最后一题233当时看出来了，但是不会葛立恒扫描法当场gg，还好最后混了个银嘻嘻。 凸包的定义就是平面上一组点的集合，凸包是恰好能将全部点囊括进去的凸多边形。 <img src="https://jason87459473.files.wordpress.com/2018/10/e5b18fe5b995e688aae59bbe96.png" alt="屏幕截图(96).png"> like this。凸包的计算可以引申出许多有趣的问题，例如，徐州m题是求一个最小个数的点的集合刚好把另一组点囊括进去。或者是求两点之间跨越障碍物的最小距离例如： <img src="https://jason87459473.files.wordpress.com/2018/10/e5b18fe5b995e688aae59bbe97.png" alt="屏幕截图(97)"> 或者是寻找一组点之间距离最远的两点。但是这些问题都离不开凸包的求解，而凸包求解中应用的葛立恒扫描法( Graham scan)的关键部分就是排序。 凸包的顶点相对于具有最低y坐标的点p以极角的递增顺序出现。 只能通过逆时针转动来穿过凸包。 将p点作为起点也就是y坐标最低的点，然后按照从p到其他点极角的大小排序，然后在遍历的过程中我们直接舍弃那些无法产生逆时针旋转的角，例如1 2 3时 3到4无法产生逆时针旋转的角所以我们将其舍去，然后4到5也无法产生逆时针旋转的角所以舍去4 ，以此类推。</p><p><img src="https://jason87459473.files.wordpress.com/2018/10/e5b18fe5b995e688aae59bbe981.png" alt="屏幕截图(98)"> 这是葛立恒扫描法在处理简并问题式的数学过程 <img src="https://jason87459473.files.wordpress.com/2018/10/e5b18fe5b995e688aae59bbe99.png" alt="屏幕截图(99)"> 不多bb，上一小段代码</p><pre><code>public class Point2D{ private final double x; private final double y; public Point2D(double x, double y) { this.x = x; this.y = y; } ... public static int ccw(Point2D a, Point2D b, Point2D c) { double area2 = (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x); if (area2 &lt; 0) return -1; // clockwise else if (area2 &gt; 0) return +1; // counter-clockwise else return 0; // collinear }}</code></pre><p>葛立恒扫描法用两种方法对点进行排序</p><pre><code>Stack&lt;Point2D&gt; hull = new Stack&lt;Point&gt;();Arrays.sort(p,Point2D.Y_ORDER);    //此时点p\[0\]是y坐标最小的点Arrays.sort(p,p\[0\].BY\_POLAR\_ORDER);//此时数组按照p\[0\]极角大小排序hull.push(p\[0\]);hull.push(p\[1\]);          //将这两个点压栈for(int i =2 ;i&lt;N;i++){    Point2D top = hull.pop();    while(Point2D.cww(hull.peek(),top,p\[i\])&lt;=0)//通过ccw方法判断两个点事逆时针的         top=hull.pop();         hull.push(top);         hull.push(p\[i\]);   //将p\[i\] 压栈}</code></pre><h3 id="3排序复杂度"><a href="#3排序复杂度" class="headerlink" title="3排序复杂度"></a>3排序复杂度</h3><p>计算复杂性是我们研究算法解决问题X的性能的一个重要指标。 计算模型：可允许的操作。 花费（cost）：操作的计数。(# compare) 上界（upperbound）：是指一些（some）算法对于问题X的花费。 下界（lowerbound）：是指所有（all）算法对于问题X的花费。 最优算法：可以用最小花费解决问题X的算法。 对于我们目前的排序问题来说，计算模型是决策树（decision tree）（只允许通过比较这种方式访问数据），花费是对比较的次数计数，上界是nlogn由mergersort得来，下界为止，最优算法也未知。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-10-28-56.png" alt="Screenshot from 2018-11-18 10-28-56.png"><img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-10-32-27.png" alt="Screenshot from 2018-11-18 10-32-27.png"> 决策树模型。所以我们提出，排序的下界是lg(N!)<del>Nlg(N),假设数组由n个不同的值a1到an组成，最坏的情况由决策树的高度h决定，高度为h的二叉树最多有2^h个叶子，因为只有N！种不同的排序，所以至少有N！片叶子。所以有2^h≥#leaves≥N!,由斯图灵公式（Stirling formula）我们得到h≥lg(N!)</del>Nlg(N),所以对于排序问题，可以得到下界也为Nlg(N)，最优算法为mergesort。 但是在这几种情况下，下限可能不成立，（1）数组初始有序（2）主键的分布（3）主键的表示形式。 例如：（1）对于部分有序的数组，插入排序可能只需要N-1次比较； （2）有重复的主键，三分快排会更快； （3）数字主键，比较数字和字符比字符串要快得多。 学习的过程是实践和理论结合，在只有比较操作的层面Mergesort是最优，可是在空间复杂度上，，Mergesort并不是最优。以刚刚的理论为知道，我们能否设计出一个算法可以使得比较的次数为1/2×Nlg(N)，或者在时间复杂度和空间复杂度都是最优？这是值得我们去思考的。</p><h3 id="4比较器（comparators）"><a href="#4比较器（comparators）" class="headerlink" title="4比较器（comparators）"></a>4比较器（comparators）</h3><p>在实际问题里我们常常要对同一组数据按不同的主键值排序，像Comparable接口使用的是元素的自然顺序</p><pre><code>public class Date implements Comparable {     private final int month, day, year;     public Date(int m, int d, int y) {     month = m; day = d; year = y;     }     …     public int compareTo(Date that) {        if (this.year &lt; that.year ) return -1;        if (this.year &gt; that.year ) return +1;       if (this.month &lt; that.month) return -1;       if (this.month &gt; that.month) return +1;       if (this.day &lt; that.day ) return -1;       if (this.day &gt; that.day ) return +1;        return 0;     } }</code></pre><p>接下来是使用可改变排序的Comparator接口</p><pre><code>public interface Comparator&lt;Key&gt;             int comparator(Key v,Key w)</code></pre><p>要注意的是所有的排序必须是之前我们讨论过得全序序列，例如，对于一个字符串，我们可以有以下几种排序方法：</p><p>Natural order 自然序列. Now is the time<br>Case insensitive 不区分大小写. is Now the time<br>Spanish 西班牙语. café cafetero cuarto churro nube ñoño<br>British phone book . McKinley Mackintosh</p><p>演示几种系统排序的方法</p><pre><code>String\[\] a; ... Arrays.sort(a); ... Arrays.sort(a, String.CASE\_INSENSITIVE\_ORDER); ... Arrays.sort(a, Collator.getInstance(new Locale(&quot;es&quot;))); ... Arrays.sort(a, new BritishPhoneBookOrder());</code></pre><p>最重要的是将数据类型的定义与两个被比较的对象的定义分开。 下面用Comparator代替Comparable来实现一个使用我们插入排序：</p><pre><code>public static void sort(Object\[\] a, Comparator comparator) {        int N = a.length;        for (int i = 0; i &lt; N; i++)            for (int j = i; j &gt; 0 &amp;&amp; less(comparator, a\[j\], a\[j - 1\]); j--)                exch(a, j, j - 1);    }    private static boolean less(Comparator c, Object v, Object w) {        return c.compare(v, w) &lt; 0;    }    private static void exch(Object\[\] a, int i, int j) {        Object swap = a\[i\];        a\[i\] = a\[j\];        a\[j\] = swap;    }</code></pre><p>在实际使用中首先定义一个内部类实现Comparator接口然后再实现compare（）方法，下面给出一个完全的实列：</p><pre><code>import java.util.Comparator;public class Student{    public static final Comparator&lt;Student&gt; BY_NAME = new ByName();    public static final Comparator&lt;Student&gt; BY_SECTION = new BySection();    private final String name;        private final int section;    private static class ByName implements Comparator&lt;Student&gt;{        public int compare(Student v,Student w)        { return v.name.compareTo(w.name);}    }    private static class BySection implements Comparator&lt;Student&gt;{        public int compare(Student v,Student w)        { return v.section - w.section;}    }}</code></pre><h3 id="4-1极角顺序"><a href="#4-1极角顺序" class="headerlink" title="4.1极角顺序"></a>4.1极角顺序</h3><p>给定一个点p，根据与点p极角的顺序来对其他点排序。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-20-46-41.png" alt="Screenshot from 2018-11-18 20-46-41.png"> 在Graham scan中得到应用，可以通过高中学习的三角函数的方法来判断极角大小，可是计算三角函数的花费是很高的，所以采用上面提到的ccw()方法：</p><p>1.如果p1高于p点而p2低于q点，那p1的极角更小；<br>2.如果p1低于p点而p2高于q点，那p1的极角更大；<br>3，其他情况根据ccw(p,p1,p2)来判断。</p><p>老规矩上代码：</p><pre><code>import java.util.Comparator;public class Point2D{    public final Comparator&lt;Point2D&gt; POLAR_ORDER = new PolarOrder();    private final double x,y;    private static int ccw(Point2D a,Point2D b,Point2D c)    { /\*as in previous lecyure \*/}    private class PolarOrder implements Comparator&lt;Point2D&gt;    {        public int compare(Point2D q1,Point2D q2)        {            double dy1 = q1.y - y;            double dy2 = q2.y - y;            if      (dy1 == 0 &amp;&amp; dy2 == 0){} //p,p1,p2 在一条线上            else if (dy1 &gt;= 0 &amp;&amp; dy2 &lt; 0) return -1; //q1高于p点，q2低于p点            else if (dy2 &gt;= 0 &amp;&amp; dy1 &lt; 0) return +1; //q1低于p，q2高于p            else return -ccw(Point2D.this,q1,q2); //从内部类中访问调用点        }    }}</code></pre><h3 id="5-稳定性"><a href="#5-稳定性" class="headerlink" title="5.稳定性"></a>5.稳定性</h3><p>一个排序算法称为稳定的当它在主键值相同时可以保留这些元素在原序列的相对位置。在我们之前提到的排序算法中，只有插入排序和归并排序是稳定的，选择排序，shell排序和快速排序都是不稳定的排序方法。下图是一个直观的例子。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-23-48-17.png" alt="Screenshot from 2018-11-18 23-48-17.png"> 插入排序是稳定的因为相同键值的元素永远不会被放到前一个元素前。 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-23-52-02.png" alt="Screenshot from 2018-11-18 23-52-02.png"> 选择排序是不稳定的 <img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-23-53-11.png" alt="Screenshot from 2018-11-18 23-53-11.png"><img src="https://jason87459473.files.wordpress.com/2018/10/screenshot-from-2018-11-18-23-55-36.png" alt="Screenshot from 2018-11-18 23-55-36.png"> Mergesort也是稳定的，我们可以设置如果键值相同则统一从左侧序列获取。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>背包，栈和队列，Dijstra</title>
      <link href="/2018/09/26/bei-bao-zhan-he-dui-lie-dijstra/"/>
      <url>/2018/09/26/bei-bao-zhan-he-dui-lie-dijstra/</url>
      
        <content type="html"><![CDATA[<h3 id="1-栈与队列"><a href="#1-栈与队列" class="headerlink" title="1.栈与队列"></a>1.栈与队列</h3><p>堆：先进后出 栈：先进先出dfgv <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-26-23-16-05.png" alt="Screenshot from 2018-09-26 23-16-05.png"></p><h4 id="1-1栈"><a href="#1-1栈" class="headerlink" title="1.1栈"></a>1.1栈</h4><p>先看一个简单的例子：Stack of String 下面给出API</p><pre><code>public class StackOfString()             StackOfString()  生成一个空栈        void push()           在栈中加入一个新字符串      String pop()            删除并返回最近添加的一个字符串     boolean isEmpty()        栈是否为空          int size()           栈中字符串个数</code></pre><p>“-”符号代表remove</p><pre><code>public static void main(String\[\] args){ StackOfStrings stack = new StackOfStrings(); while (!StdIn.isEmpty()) { String s = StdIn.readString(); if (s.equals(&quot;-&quot;)) StdOut.print(stack.pop()); else stack.push(s); }}</code></pre><h4 id="1-1-1堆栈：链表表示法"><a href="#1-1-1堆栈：链表表示法" class="headerlink" title="1.1.1堆栈：链表表示法"></a>1.1.1堆栈：链表表示法</h4><p><img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-26-23-55-44.png" alt="Screenshot from 2018-09-26 23-55-44.png"> 上图描述了链表构造的栈是如何工作的。</p><h4 id="1-1-1-1链表栈的Java实现"><a href="#1-1-1-1链表栈的Java实现" class="headerlink" title="1.1.1.1链表栈的Java实现"></a>1.1.1.1链表栈的Java实现</h4><p>首先构造内部类：</p><pre><code>public class LinkedListOfStack {    private Node first = null;    private class Node {        String item;        Node next;    }    public boolean isEmpty() {        return first == null;    }    public void push(String item) {        Node oldfist = first;   //save link to the list         first = new Node();     //create a new node for the beginning        first.item = item;        first.next = oldfist;   //set the instance variables in the new node    }    public String pop() {        String item = first.item; // save item to return        first = first.next;      // delete first node        return item;            // return save item    }}</code></pre><p>1.1.1.2 链表法的性能 每个操作需要花费常数的时间，一个有N个元素的链表需要40N Bite <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-00-24-48.png" alt="Screenshot from 2018-09-27 00-24-48.png"></p><h4 id="1-1-2-栈的数组实现"><a href="#1-1-2-栈的数组实现" class="headerlink" title="1.1.2 栈的数组实现"></a>1.1.2 栈的数组实现</h4><p>通过数组实现栈就更加容易了，首先声明一个数组（注意这里数组的长度一般不会给出，我们稍后介绍可变数组）。这样push()操作即为为S[N]赋值，而pop()操作即为将S[N-1]取出并置零。</p><h4 id="1-1-2-1数组法的Java实现"><a href="#1-1-2-1数组法的Java实现" class="headerlink" title="1.1.2.1数组法的Java实现"></a>1.1.2.1数组法的Java实现</h4><pre><code>public class FixedCapacityStackOFStrings {private String\[\] s;private int N = 0;public FixedCapacityStackOFStrings(int capacity){s = new String\[capacity\];}public boolean isEmpty(){return N==0;}public void push(String item){s\[N++\]=item;}public String pop(){String item = s\[N--\];s\[N\] = 0;return item;}}</code></pre><p>1.2可变数组 首先可能会考虑每次当数组长度增加的时候，新建一个n+1的数组然后将原数组复制到新数组内部并添加新元素。可是这样无疑会产生大量不必要的操作，所以我们在每次扩大的时候将新数组设定为原数组两倍的大小。那么何时将数组减小呢，毕竟维护一个大数组需要使用大量的内存，在N变为原来的二分之一是缩小数组似乎是个办法，但是考虑一种名为“抖动”的情况，这种情况下N在二分之一处不停加一减一，使得新建数组的操作十分频繁，于是我们定义缩小数组在四分之一时，这样既能避免频繁新建数组了。</p><pre><code>public class ResizingArrayStackOfStrings{private String\[\] s;private int N;public void ResizingArrayStackOfStrings(){s = new String\[1\];}public void push(String item){if(N==s.length) resize(2*s.length);s\[N++\]=item;}private void resize(int capacity){String\[\] copy = new String\[capacity\];for(int i =0;i&lt;N;i++){copy\[i\] = s\[i\];}s=copy;}public String pop(){String item = s\[--N\];s\[N\] = null;if(N&gt;0 &amp;&amp; N==s.length/4) resize(s.length/2);return item;}}</code></pre><p>下面来分析可变数组实现的栈的性能：在最坏的情况下pop和push操作都是N。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-21-30-28.png" alt="Screenshot from 2018-09-27 21-30-28.png"> <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-21-31-02.png" alt="Screenshot from 2018-09-27 21-31-02.png"> <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-21-31-05.png" alt="Screenshot from 2018-09-27 21-31-05.png"> 空间复杂度：在8N-32N之间<img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-20-55-52.png" alt="Screenshot from 2018-09-27 20-55-52.png"></p><h4 id="1-2队列"><a href="#1-2队列" class="headerlink" title="1.2队列"></a>1.2队列</h4><p>队列遵循先进先出的原则，下面给出队列的API：</p><pre><code> public class QueueOfStrings              QueueOfStrings()       生成一个新数组         void enqueue(String item) 在队列中新插入一个元素       String dequeue()       删除并返回最早进入队列的元素      boolean isEmpty()            返回队列是否为空          int size()                队列中元素的数量</code></pre><h4 id="1-2-1队列的链表实现"><a href="#1-2-1队列的链表实现" class="headerlink" title="1.2.1队列的链表实现"></a>1.2.1队列的链表实现</h4><p><img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-21-58-24.png" alt="Screenshot from 2018-09-27 21-58-24.png"></p><pre><code>public class LinkedQueueOfStrings {    private class Node {        String item;        Node next;    }    private Node first,last;    public boolean isEmpty(){        return first==null;    }    public void enqueue(String item){        Node oldlast = last;        last = new Node();        last.item = item;        last.next=null;        if(isEmpty()) first=last;        else oldlast.next=last;    }    public String dequeue() {        String item = first.item;        first = first.next;        if(isEmpty()) last=null;        return item;    }}</code></pre><h4 id="1-2-2队列的可变数组实现"><a href="#1-2-2队列的可变数组实现" class="headerlink" title="1.2.2队列的可变数组实现"></a>1.2.2队列的可变数组实现</h4><pre><code>public class ResizingArrayQueueOfStrings{    private String\[\] s=new String\[2\];    private int head =0;    private int tail =0;    public boolean isEmpty(){        return head==tail;    }    public void enqueue(String item){        s\[tail++\]=item;        if(tail==s.length-1&amp;&amp;(tail-head)==s.length-1){            String\[\] news = new String\[s.length*2\];            int count=0;            for(int i=head;i&lt;=tail;i++){                news\[count++\]=s\[i\];            }            s=news;            head = 0;            tail = (s.length/2-1);        }else if(tail==s.length-1&amp;&amp;(tail-head)&lt;s.length-1){            for(int i=0;i&lt;(tail-head);i++){                s\[i\]=s\[head+i\];            }            tail -= head;            head =0;        }    }    public String dequeue(){        String item = s\[head\];        s\[head\]=null;        head++;        if((tail-head)&lt;(s.length/4)){            String\[\] news = new String\[s.length/2\];            for(int i=0;i&lt;(tail-head);i++){                news\[i\]=s\[head+i\];            }            tail -= head ;            head =0;        }        return item;    }}</code></pre><h3 id="2-泛型"><a href="#2-泛型" class="headerlink" title="2.泛型"></a>2.泛型</h3><p>我们实现了针对字符串的栈实现，但是我们不仅仅只有字符串需要栈的数据结构，所以我们引入泛型的概念。</p><h4 id="2-1Java泛型实现链表栈"><a href="#2-1Java泛型实现链表栈" class="headerlink" title="2.1Java泛型实现链表栈"></a>2.1Java泛型实现链表栈</h4><p><img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-23-36-17.png" alt="Screenshot from 2018-09-27 23-36-17.png"> 2.2Java泛型实现数组栈 注意Java不允许泛型数组，所以改用对象数组实现 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-27-23-38-48.png" alt="Screenshot from 2018-09-27 23-38-48.png"> 使用泛型来构造可以使客户端调用采用自动封装 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-28-00-16-44.png" alt="Screenshot from 2018-09-28 00-16-44.png"></p><h3 id="3-迭代器"><a href="#3-迭代器" class="headerlink" title="3.迭代器"></a>3.迭代器</h3><p>使用Java实现java.lang.Iterable(可遍历类)的接口，这将会使得代码更加紧凑。Iterable可以返回一个Iterator迭代器，Iterator迭代器是一个有hasnext(),next(),remove()方法的类，其中我们不使用remove()方法，因为这容易成为调试隐患。这样大费周章是为了能够在客户端使用极为精简的代码来遍历集合中的元素，即for-reach语句。如：</p><p>for( String:stack)</p><p>即可遍历集合中的所有元素。如果不使用迭代器的话我们会有许多不必要的出入站栈操作。</p><h4 id="3-1迭代器实现链表栈："><a href="#3-1迭代器实现链表栈：" class="headerlink" title="3.1迭代器实现链表栈："></a>3.1迭代器实现链表栈：</h4><pre><code>import java.util.Iterator;public class Stack implements Iterable{ ... public Iterator iterator() { return new ListIterator(); } private class ListIterator implements Iterator { private Node current = first; public boolean hasNext() { return current != null; } public void remove() { /* not supported */ } public Item next() { Item item = current.item; current = current.next; return item; } }}</code></pre><h4 id="3-2迭代器实现数组栈："><a href="#3-2迭代器实现数组栈：" class="headerlink" title="3.2迭代器实现数组栈："></a>3.2迭代器实现数组栈：</h4><pre><code>import java.util.Iterator;public class Stack implements Iterable{ … public Iterator iterator() { return new ReverseArrayIterator(); } private class ReverseArrayIterator implements Iterator { private int i = N; public boolean hasNext() { return i &gt; 0; } public void remove() { /* not supported */ } public Item next() { return s\[--i\]; } }}</code></pre><h3 id="4-背包"><a href="#4-背包" class="headerlink" title="4.背包"></a>4.背包</h3><p>有时候我们不考虑集合元素顺序，所以可以采用背包，背包就是栈除去pop()操作或队列除去dequeue()操作，下面给出背包的API：</p><pre><code>public class Bag implements Iterable                  Bag()        create an empty bag             void add(Item x)  insert a new item onto bag              int size()       number of items in bag         Iterable iterator()   iterator for all items in bag</code></pre><h3 id="5-Dijstra算法"><a href="#5-Dijstra算法" class="headerlink" title="5.Dijstra算法"></a>5.Dijstra算法</h3><p><img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-28-11-35-20.png" alt="Screenshot from 2018-09-28 11-35-20.png"> 给出一个表达式：( 1 + ( ( 2 + 3 ) * ( 4 * 5 ) ) ) ，如何计算他的值，将数值存入数值栈，将符号存入符号栈，其中左括号忽略，每次遇到右括号将数值栈中取出两个数，符号栈中取出一个数运算并将结果存入数值栈中。 5.1Java实现Dijstra</p><pre><code>public class Evaluate{    public static void main(String\[\] args){        Stack&lt;String&gt; ops = new Stack&lt;String&gt;();        Stack&lt;Double&gt; vals = new Stack&lt;Double&gt;();        while(!StdIn.isEmpty()){            String s = StdIn.readString();            if(s.equals(&quot;)&quot;));            else if(s.equals(&quot;*&quot;)) ops.push(s);            else if(s.equals(&quot;+&quot;)) ops.push(s);            else if(s.equals(&quot;-&quot;)) ops.push(s);            else if(s.equals(&quot;/&quot;)) ops.push(s);            else if(s.equals(&quot;)&quot;)){                String op = ops.pop();                if(op==&quot;*&quot;) vals.push(vals.pop()*vals.pop());                else if(op==&quot;+&quot;) vals.push(vals.pop()+vals.pop());                else if(op==&quot;-&quot;) vals.push(vals.pop()-vals.pop());                else if(op==&quot;/&quot;) vals.push(vals.pop()/vals.pop());            }            else vals.push(Double.parseDouble(s));        }        StdOut.println(vals.pop());    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析</title>
      <link href="/2018/09/24/suan-fa-fen-xi/"/>
      <url>/2018/09/24/suan-fa-fen-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-24-21-49-46.png" alt="Screenshot from 2018-09-24 21-49-46.png"></p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2018/09/18/bing-cha-ji/"/>
      <url>/2018/09/18/bing-cha-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="1-dynamic-connectivity"><a href="#1-dynamic-connectivity" class="headerlink" title="1.dynamic connectivity"></a>1.dynamic connectivity</h4><p><img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-17-22-12-02.png" alt="Screenshot from 2018-09-17 22-12-02"> 首先我们考虑如图所示的问题，在图中我们可以看到执行所有的操作后得到最终结果，由于执行过程中我们可以动态加入连通分量，所以称之为动态连通。 上图中的结果可以容易得到，但当图中节点数量增大时，我们需要程序辅助判断。我们现在给出几个比较明显的假设，首先，每个节点p都链接到p本身；其次，如果p连接到q，则q也连接到p；最后，如果p连接到q，q连接到r，则p也连接到r。 将互相连接的节点视为一个集合，如果两个节点同时存在于同一个集合之中则可以确定两点之间连通，即初始化的空图为n个single set，每次执行一次union操作相当于将集合合并，这样对于节点之间是否连接我们可以给出一个判断。 下面给出UF的API：</p><p>public class UF<br>________________________________________________________<br>UF(int N)             初始化并查集数据结构中的n个对象<br>void union（int p，int q） 在p和q之间连接<br>boolean connected（int p，int q） 判断pq是否连通<br>int find（int p）        在0到n-1中寻找与p相等的值<br>int count（）            计数</p><p>下面给出调用UF的一个列子：</p><pre><code>import main.java.edu.princeton.cs.algs4.*;public class Main{    public static void main(String\[\] args)    {        int N = StdIn.readInt();        UF uf = new UF(N);        while (!StdIn.isEmpty())        {            int p = StdIn.readInt();            int q = StdIn.readInt();            if (!uf.connected(p, q))            {                uf.union(p, q);                StdOut.println(p + &quot; &quot; + q);            }        }    }}</code></pre><h4 id="2-quick-find"><a href="#2-quick-find" class="headerlink" title="2.quick-find"></a>2.quick-find</h4><p>下面考虑如何实现并查集的数据结构，将各个点视为一个数组，将数组中所存值视为该组节点的共同标志。每次union的操作都会将两个待合并子集的标志合并，即数组中保存的值修改为同一值。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-20-16-53.png" alt="Screenshot from 2018-09-18 20-16-53"> <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-20-19-27.png" alt="Screenshot from 2018-09-18 20-19-27.png"> 下面给出Quick-Find的Java代码实现：</p><p>import main.java.edu.princeton.cs.algs4.*;</p><p>public class QuickFindUF {<br>    private int[] id;<br>    public QuickFindUF(int N){<br>        id = new int [N];<br>        for(int i=0;i&lt;N;i++)<br>            id[i]=i;<br>    }</p><pre><code>public boolean connected(int p,int q){    return id\[p\]==id\[q\];}public void union(int p,int q){    int pid = id\[p\];    int qid = id\[q\];    for(int i=0;i&lt;id.length;i++)        if(id\[i\] == pid)            id\[i\] = qid;}</code></pre><p>}</p><p>但是我们可以发现Quick—Find算法对于数据较大的情况表现不好，初始化需要n步操作，union操作需要n步操作，寻找需要一次操作。这将会需要n^2操作去执行n个对象的合并操作。</p><h4 id="3-quick-union"><a href="#3-quick-union" class="headerlink" title="3.quick-union"></a>3.quick-union</h4><p>Linus 说过“坏的程序员担心他们的代码，而好的程序员则担心他们的数据结构及它们之间的关系。下面我们考虑一种更为合理的数据结构来表示节点之间的关系。 首先将节点之间的连接化为一颗树，这样节点之间就具有了一种全新的数据结构，将每个节点的父节点位置储存在数组中，这样id【i】 的值即为其父节点，而节点i的根节点的值是id[id[id[…id[i]…]]]. 这时判断节点是否连通的条件是它们是否拥有同一个父节点。而union操作则是将该树的根节点成为另一颗树的子节点。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-20-47-39.png" alt="Screenshot from 2018-09-18 20-47-39.png">下面给出Quick-Union的java实现：</p><pre><code>import main.java.edu.princeton.cs.algs4.*;public class QuickUnionUf {    private int\[\] id;    public QuickUnionUf(int N){        id =new int \[N\];        for(int i=0;i&lt;N;i++)            id\[i\]=i;    }    private int root(int i){        while(id\[i\]!= i) i = id\[i\];        return i;    }    public boolean connected(int p,int q){        return root(p)==root(q);    }    public void union(int p,int q){        int i= root(p);        int j= root(q);        id\[i\] = j;    }}</code></pre><p>这样依然存在问题，在Quick-Find算法中树太过平面，union操作太昂贵，而在Quick——Union算法中树变得过于高，union操作的最坏情况是n，而find操作太过昂贵。</p><h4 id="4-解决办法"><a href="#4-解决办法" class="headerlink" title="4.解决办法"></a>4.解决办法</h4><h5 id="4-1带权"><a href="#4-1带权" class="headerlink" title="4.1带权"></a>4.1带权</h5><p>带权的方法仍然采用quick-Union算法的思想不过在带权（weighting）中我们总是将较小的树放在较高的树下面，即总是将较小树的根节点修改为较高树的子节点。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-07-54.png" alt="Screenshot from 2018-09-18 21-07-54.png"> 我们再来比较一下两种方法产生的树<img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-09-38.png" alt="Screenshot from 2018-09-18 21-09-38.png"> 明显带权算法产生的树更加扁平。 下面给出带权算法的java实现：</p><pre><code>import main.java.edu.princeton.cs.algs4.*;public class QuickUnionUf {    private int\[\] id;    private int\[\] sz;    public QuickUnionUf(int N){        id =new int \[N\];        for(int i=0;i&lt;N;i++) {            id\[i\] = i;            sz\[i\] = i;        }    }    private int root(int i){        while(id\[i\]!= i) i = id\[i\];        return i;    }    public boolean connected(int p,int q){        return root(p)==root(q);    }    public void union(int p,int q){        int i= root(p);        int j= root(q);        if(i==j) return;        if(sz\[i\]&lt;sz\[j\]){ id\[i\]=j; sz\[j\]+=sz\[i\];}        else {id\[j\] = i; sz\[i\]+=sz\[j\];}    }}</code></pre><p>分析带权算法我们发现find操作需要的时间与p和q的深度成正比，union操作则需要常数时间， 还可以发现每个节点的深度一定小于lgN。<img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-24-41.png" alt="Screenshot from 2018-09-18 21-24-41.png"> 那么为什么任意节点x的深度最多是N以2为底的对数呢？ 理解这个问题的关键在于观察节点的深度到底是在何时增加的 何时它在树中变得更深？ 当x所在的树，即图中的T1，与另一棵树，即图中的T2，合并的时候x的深度加1 好，之前我们说过只有在T2的大小 T2的大小大于等于T1的大小时才会发生这种情况 所以当x深度增加时 树的大小至少翻倍。这很关键，因为这意味着 包含x的树的大小最多可以翻N次倍因为如果从1开始 翻倍lg N次，就会得到N，而最后树中总共只有N个节点 这就是任意节点x的深度最多是N以2为底的对数的粗略证明 这对于这个算法的性能有着巨大的影响 现在，除了初始化总是需要正比于N的时间，合并和 “是否连接”或查询操作需要的时间都是正比于N以2为底的对数 这个算法能成比例适应大规模问题。当N从1百万变为10亿 花费的时间从20变为30，这就比较能接受了。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-32-17.png" alt="Screenshot from 2018-09-18 21-32-17.png"></p><h5 id="4-2路径压缩"><a href="#4-2路径压缩" class="headerlink" title="4.2路径压缩"></a>4.2路径压缩</h5><p>我们想办法进一步提高程序的性能。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-35-35.png" alt="Screenshot from 2018-09-18 21-35-35.png"> 经过路径压缩之后树变得扁平 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-37-11.png" alt="Screenshot from 2018-09-18 21-37-11.png"> 实现路径压缩只需在root方法中添加一行代码即可：</p><pre><code>private int root(int i){    while(id\[i\]!= i){      _ **id\[i\]=id\[id\[i\]\];**_        i = id\[i\];    }    return i;}</code></pre><p>这样我们便实现了路径压缩。合并起来即为WQUPC算法。 Hopcroft Ulman和Tarjan证明了如果 有N个对象，M个合并与查找操作的任意序列，需要访问数组 最多c(N + M lg* N)次。lg* N是个挺有意思的函数 它是使N变为1需要取对数的次数 它叫做<a href="https://zh.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3%E5%B0%8D%E6%95%B8" target="_blank" rel="noopener">迭代对数函数</a>。在真实世界中 可以认为是一个小于5的数，因为lg<em>（2^65536）=5 所以，这说明带路径压缩的带权快速合并算法 在真实世界中的时间复杂度是线性的，而实际上可以改进到 一个更有意思的函数，Ackermann函数，这个函数增长速度 比 lg</em> 还慢。另外一点要说明的是看起来这个算法的时间复杂度已经非常接近与N成正比的线性了 它与N乘一个关于N的增长非常缓慢的函数成正比。<img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-55-46.png" alt="Screenshot from 2018-09-18 21-55-46.png"></p><h4 id="5-并查集的应用"><a href="#5-并查集的应用" class="headerlink" title="5.并查集的应用"></a>5.并查集的应用</h4><p>・Percolation. ・Games (Go, Hex). ✓ Dynamic connectivity. ・Least common ancestor. ・Equivalence of finite state automata. ・Hoshen-Kopelman algorithm in physics. ・Hinley-Milner polymorphic type inference. ・Kruskal’s minimum spanning tree algorithm. ・Compiling equivalence statements in Fortran. ・Morphological attribute openings and closings. ・Matlab’s bwlabel() function in image processing. 下面考虑一个问题：渗透（Percolation） 给出问题的描述：1.有一个n×n的方格；2.每个方格开放的概率是p（闭合的概率是1-p）；3.一个系统称为可渗透的是顶层和底层被开放空格所连接。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-21-59-45.png" alt="Screenshot from 2018-09-18 21-59-45.png"> <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-22-11-18.png" alt="Screenshot from 2018-09-18 22-11-18.png"> ・p &gt; p<em>: 系统极有可能是是渗透的 ・p &lt; p</em>: 系统几乎不可能是渗透的； <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-22-12-30.png?w=688" alt="Screenshot from 2018-09-18 22-12-30.png">如何判断方格之间是否连通呢？我们将每个方格考虑成一个节点<img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-22-19-071.png" alt="Screenshot from 2018-09-18 22-19-07.png"> 节点之间的连通性可以用连接先表示，而系统是否连通可以加入两个虚拟点，如果这两点连通即可推出系统渗透。我们要运行的就是所谓的蒙特卡罗仿真 首先将整个网格初始化为闭合的，全是黑色的，然后随机加上开放的位 每次加上一个开放位后，检查 是否使系统变得渗滤的。持续这个过程直到 系统变得是渗滤的。我们可以证明系统变得渗滤时开放位的比例 是要求的阈值的估计。我们要做的是 将这个实验运行上百万次，这我们可以在计算机上完成 只要我们能够高效地计算当前系统是否渗滤 这就是蒙特卡罗仿真，这个计算问题 为这个尚无人知道如何求解的科学或者数学问题给出的解决办法。 <img src="https://jason87459473.files.wordpress.com/2018/09/screenshot-from-2018-09-18-22-21-591.png" alt="Screenshot from 2018-09-18 22-21-59.png"> [gallery ids=”49,50” type=”rectangular”]</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算几何初步</title>
      <link href="/2018/09/11/ji-suan-ji-he-chu-bu/"/>
      <url>/2018/09/11/ji-suan-ji-he-chu-bu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-精度"><a href="#1-精度" class="headerlink" title="1.精度"></a>1.精度</h4><p>计算几何与解析几何、向量代数等都有一定的关系，用一定的数据结构与算法来处理几何问题。但是计算几何跟数学的解析几何解决问题的首选方法还是有比较大的区别。计算几何，首先要注意“计算”二字，一定要注意精度问题。在很多题目中，精度设置是直接影响AC还是WA的关键因素。因此，第一，如需要使用浮点数，一般使用double而不用float；第二，浮点数判零的方法，精度最直接体现在这里（工程实践中浮点数也是这样判零的，或者说计算机中浮点数就应该这样判零）。</p><pre><code>double const EPS = 1E-6;#define is0(x) ( -EPS &lt;= (x) &amp;&amp; (x) &lt;= EPS )</code></pre><p>EPS的具体大小根据题意进行设置。在很多提交过程中，就是因为EPS设置不当而导致WA，与算法无关。既然精度是有可能导致WA的一个“非算法”因素，由此也确定了计算几何中的另外一条原则：尽量使用整数！！！使用整数，就可以不考虑精度问题，就可以完全只考虑算法问题。一般而言，绝大部分题目都会给出整点（也就是坐标为整数的点），这是整数解题的基础。而且有相当多的题目都存在整数型解法。只有少数题目输入是整点，但计算过程中必须使用浮点数。极少数题目从输入开始就必须使用浮点数。下面只说平面几何。计算几何最基本的数据结构就是点：</p><pre><code>struct point_t{ int x; int y;};</code></pre><h4 id="2-叉积点积"><a href="#2-叉积点积" class="headerlink" title="2.叉积点积"></a>2.叉积点积</h4><p>这个数据结构同时还可以表示向量，而计算几何中最常用的计算就是叉积，假设有2个三维向量p1、p2，坐标分别是(x1,y1,z1)、(x2,y2,z2)，则它们的叉积计算可使用行列式进行标记。</p><p><em>i</em></p><p><em>j</em></p><p><em>k</em></p><p>x1</p><p>y1</p><p>z1</p><p>x2</p><p>y2</p><p>z2</p><p>普遍使用的计算几何模板中，使用三个点计算叉积，代码如下：</p><p>//向量的叉积，表示OA×OB</p><pre><code>int cross(point_t const&amp;O,point_t const&amp; A,point_t const&amp; B){int xoa = A.x – O.x;int yoa = A.y – O.y;int xob = B.x – O.x;int yob = B.y – O.y;return xoa * yob - yoa * xob;}</code></pre><p>叉积是ACM计算几何最重要的判据，毫不夸张的说绝大部分解题过程都要用到叉积。而点积相对用的较少，点积隐含了两个向量夹角的余弦值。所以可做一个定性判断：点积为0，两向量垂直；为正，锐角；为负，钝角。仿照叉积，点积的实现如下：</p><pre><code>//向量的点积，表示OA·OBint dot(point_t const&amp;O,point_t const&amp; A,point_t const&amp; B){int xoa = A.x – O.x;int yoa = A.y – O.y;int xob = B.x – O.x;int yob = B.y – O.y;return xoa * xob + yoa * yob;}</code></pre><p>下面再举两个使用整数运算解决计算几何问题的例子（输入为整点）：判断两线段是否相交，判断两直线位置关系。 首先给出线段的数据结构，当然这个结构很多时候不一定会用到。</p><pre><code>struct lineseg_t {    point_t s;    point_t e;};</code></pre><p>两线段是否相交，需要经过快速排斥实验和跨立实验两个阶段的判断。所谓排斥实验是指如下图两个线段显然是不相交的。也就是说AB最大的x坐标还要比CD最小的x坐标小，那显然不相交。此类可能性共有4种。这个判断背后有一个简单的几何定理，两线段相交，则它们在任意直线上的投影必有重合部分；反过来，如果存在一条直线，两条线段在其上的投影不重合，则这两条线段不相交。排斥实验就是用x轴和y轴作为投影用的直线。 <img src="https://img-blog.csdn.net/20140605212309562?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjA2MTM0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt> 通过排斥实验的线段也不一定相交，这个时候要做跨立实验。所谓跨立如下图，CD跨过了AB，但AB没有跨过CD，所以AB和CD不相交。必须互相跨立才能保证线段相交。判断是否跨立很简单，所谓CD跨过AB，其实就是点C、点D在直线AB的两侧，则从AD到AB的旋向与从AB到AC的旋向一致。而旋向一致也就是叉积AD×AB和AB×AC的正负一致。反过来，AB没有跨过CD，CA到CD与CD到CB的旋向显然是不一致的。这是一个等价关系，所以可以用叉积判断是否跨立。 <img src="https://img-blog.csdn.net/20140605212804343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjA2MTM0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt> 所以，最后判断两条线段是否相交，可以写成如下函数：</p><pre><code>bool isInter(point\_t const&amp;A,point\_t const&amp;B, point\_t const&amp;C,point\_t const&amp;D){    return max(A.x, B.x) &gt;= min(C.x, D.x)         &amp;&amp; max(A.y, B.y) &gt;= min(C.y, D.y)         &amp;&amp; max(C.x, D.x) &gt;= min(A.x, B.x)         &amp;&amp; max(C.y, D.y) &gt;= min(A.y, B.y)         &amp;&amp; cross(A, C, B) * cross(A, B, D) &gt;= 0         &amp;&amp; cross(C, A, D) * cross(C, D, B) &gt;= 0 ;}</code></pre><p>前4个实现排斥实验，后2个实现跨立实验，很显然只要输入为整数，这个实现只用到了整数运算。下面考虑计算直线的位置关系（平面几何）。直线一般用如下数据结构表示：</p><pre><code>struct line_t{    int a,b,c;//表示ax+by+c=0,一般使得a、b、c互质}</code></pre><p>题目一般不会直接给出直线方程，而是通过2点确定一条直线，同样只要给定的是整点，就能很方便的确定整型的直线参数。仍然使用叉积，计算行列式如下：</p><p>a</p><p>b</p><p>c</p><p>x1</p><p>y1</p><p>1</p><p>x2</p><p>y2</p><p>1</p><p>很容易得到 a = y1 - y2,  b = x2 - x1,  c = x1y2 - x2y1。然后可以考虑求三者的最大公约数做一个归约（并非必须，有的题目这么做以后会方便处理，而有的题目完全不需要这么做）。给定2条直线，求其位置关系也可以使用叉积，计算行列式如下： 也很容易算到：x = b1c2 - b2c1,  y = a2c1 - a1c2,  t = a1b2 - a2b1。如果三者全为0，两直线重合；t为0，两直线平行；否则两直线相交且交点为(x/t, y/t)。很明显，上述过程中除了最后一步给出交点的具体坐标之外，其余运算全部是整数运算。 所以计算几何在条件允许的情况下，优先只用整数运算，而很多情况下的确可以做到这一点。总的来说，这个极大提高AC的机会，既避免精度问题，又避免了潜在的TLE（浮点运算以及三角函数、反三角函数显然比整数运算慢的多）。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>次方求模、二分幂，快速幂，矩阵快速幂，快速乘</title>
      <link href="/2018/09/10/ci-fang-qiu-mo-er-fen-mi-kuai-su-mi-ju-zhen-kuai-su-mi-kuai-su-cheng/"/>
      <url>/2018/09/10/ci-fang-qiu-mo-er-fen-mi-kuai-su-mi-ju-zhen-kuai-su-mi-kuai-su-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="1-二分幂"><a href="#1-二分幂" class="headerlink" title="1.二分幂"></a>1.二分幂</h4><p>要求 a^n，如果知道了 a^(n/2) 次方的话，再来个平方就可以了。 即 如果n是偶数，则A=a^(n/2) ； A=A*A.。 如果n是奇数 , 则A=a^((n-1)/2) ； A=a*A*A。 这就一下子差不多就节省了n/2-1次乘法运算 那么按照这个思路就能运用分治的思想,那么复杂度就有原来的O(n)，降低为O(lgn)。</p><pre class=" language-c++"><code class="language-c++">long long int pow(int a,int n)//求a的n次幂{    if (n==0)        return 1;    if (n==1)        return a;    long long int ans=pow(a,n/2);//从函数的功能区理解递归    ans*=ans;    if (n%2==1)        ans*=a;    return ans;}</code></pre><h4 id="2-快速幂算法"><a href="#2-快速幂算法" class="headerlink" title="2.快速幂算法"></a>2.快速幂算法</h4><p>快速幂 , 矩阵快速幂 在算大指数次方时是很高效的，他的基本原理是二进制。快速乘也是用了二进制。 大家首先要认识到这一点：任何一个整数N，都能用二进制来表示。。 那么对于a^n ， n一定可以用二进制表示。 比如a^156,而156(10)=10011100(2) 那么 A=a156=a10011100a156=a10011100 =a27∗1+26∗0+25∗0+24∗1+23∗1+22∗1+21∗0+20∗0a27∗1+26∗0+25∗0+24∗1+23∗1+22∗1+21∗0+20∗0 =(a27∗1)∗(a26∗0)∗(a25∗0)∗(a24∗1)∗(a23∗1)∗(a22∗1)∗(a21∗0)∗(a20∗0)(a27∗1)∗(a26∗0)∗(a25∗0)∗(a24∗1)∗(a23∗1)∗(a22∗1)∗(a21∗0)∗(a20∗0) 我们就按照这个公式来求解a^156，原来要进行156-1=155次乘法运算，现在的差不多运算次数就是他 二进制的长度<em>二进制中1的个数=8</em>4=24次</p><pre class=" language-c++"><code class="language-c++">long long int fun( int a, int b ) {    long long int ans = 1;    int base = a;    while( b != 0 )     {        if(b & 1)//判断奇偶性        {            ans *= base;        }         base *= base; //注意：a^{2^7}=a^{2^6} * a^{2^6} ，而不是 a^{2^7}=a^{2^6} * a ，所以这是对的。        b /= 2;//与b=b>>1相同    }    return r;}</code></pre><h4 id="3-矩阵快速幂算法"><a href="#3-矩阵快速幂算法" class="headerlink" title="3.矩阵快速幂算法"></a>3.矩阵快速幂算法</h4><p>其实用的更多是使用矩阵快速幂，算递推式，注意是递推式 ，比如 f(n)=a*f(n-1)+b*f(n-2)，简单的如斐波那契数列的第一亿项的结果模上10000000后是多少你还能用递推式去，逐项递推吗？当然不能，这里就可以发挥矩阵快速幂的神威了，那斐波那契数列和矩阵快速幂能有一毛钱的关系？答案是有而且很大 对于f(n)=a*f(n-1)+b*f(n-2) ， 我们可以考虑矩阵这种数学工具,构造矩阵 </p><p><img src="https://img-blog.csdn.net/20170405182049992?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTW9zQmVzdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt> </p><p>这样求f(n),f(n-1) 就相当于求左边矩阵的n-2次幂。这个时候就可以用上面的快速幂来计算了。 代码与快速幂类似，只是实数乘法变成了矩阵乘法。用个函数写就行了。 </p><h4 id="4-快速乘"><a href="#4-快速乘" class="headerlink" title="4.快速乘"></a>4.快速乘</h4><p>求a*b%m , 当a*b结果很大，乘完后可能会移除。 可以用二进制来实现快速乘算法。 以前十进制的乘法是： 123*567=123*5*100 + 123*6*10 + 123 * 7 * 1 这里100，10，100100 都是十进制 的进制位数。那么如果考虑二进制的话，我们任选其他任意二进制数，就有 1001101∗11010=1001101∗2^4∗1+1001101∗2^3∗1+1001101∗2^2∗0+1001101∗2^1∗1+1001101∗20∗01001101∗11010=1001101∗24∗1+1001101∗23∗1+1001101∗22∗0+1001101∗21∗1+1001101∗20∗0 我们对上面的每一个加项进行取模，在加起来，就不会溢出了。</p><pre class=" language-c++"><code class="language-c++">long long int fun(long long int a ,long long int b , long long int m){    int sum=0;    int k=1;    while(b)    {       if(b&1)    {        sum=(sum+a*k)%m;    }    k=(k*2)%m;    b=b/2;}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>同余定理</title>
      <link href="/2018/09/10/tong-yu-ding-li/"/>
      <url>/2018/09/10/tong-yu-ding-li/</url>
      
        <content type="html"><![CDATA[<h4 id="1-同余定理"><a href="#1-同余定理" class="headerlink" title="1.同余定理"></a>1.同余定理</h4><p>同余定理是数论中的重要概念。给定一个正整数m，如果两个整数a和b满足（a-b）能够被m整除，即（a-b）/m得到一个整数，那么就称整数a与b对模m同余，记作<code>a≡b(mod m)</code>。</p><h4 id="1-1证明"><a href="#1-1证明" class="headerlink" title="1.1证明"></a>1.1证明</h4><p>充分性： 若a和b用m相除留下相同的余数r，则 <code>a=q1m+r</code>, <code>b=q2m+r</code>,q1和q2为某两个整数，由此的<code>a-b=(q1m+r)-(q2m-r)=m(q1-q2)</code>，根据整除定义，我们有<code>m|(a-b)</code>，由同余式定义得出结论：<code>a≡b(mod m)</code> 必要性： 若a和b用m相除留下相同的余数r，则 <code>a=q1m+r</code>,<code>b=q2m+r</code>,所以<code>a-b=m(q1-q2)</code> 故 <code>m|(a-b)</code>。</p><h4 id="1-2同余性质"><a href="#1-2同余性质" class="headerlink" title="1.2同余性质"></a>1.2<strong>同余性质</strong></h4><ul><li>反身性：a≡a (mod m)</li><li>对称性： 若a≡b(mod m)，则b≡a(mod m)</li><li>传递性： 若a≡b(mod m)，b≡c(mod m)，则a≡c(mod m)</li><li>同余式相加：若a≡b(mod m)，b≡c(mod m)，则a ± c≡b ± d(mod m)</li><li>同余式相乘：若a≡b(mod m)，b≡c(mod m)，则ac≡bd(mod m)</li><li>线性运算：如果a≡b(mod m)，c≡d(mod m)，那么a ± c≡b ± d(mod m)，且<code>a * c≡b * d(mod m)</code></li><li>除法：若ac ≡ bc (mod m) c≠0 则 a≡ b (mod m/gcd(c,m)) 其中gcd(c,m)表示c,m的最大公约数。特殊地 ,gcd(c,m)=1 则a ≡ b (mod m)</li><li>幂运算：如果a ≡ b (mod m)，那么a^n ≡ b^n (mod m)</li><li>若a ≡ b (mod m)，n|m,则 a ≡ b (mod n)</li><li>若a ≡ b (mod mi) (i=1,2…n) 则 a ≡ b (mod [m1,m2,…mn]) 其中[m1,m2,…mn]表示m1,m2,…mn的最小公倍数.</li></ul><h4 id="2-欧拉定理"><a href="#2-欧拉定理" class="headerlink" title="2.欧拉定理"></a>2.欧拉定理</h4><p>在<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E8%AE%BA" title="数论" target="_blank" rel="noopener">数论</a>中，<strong>欧拉定理</strong>（也称<strong>费马-欧拉定理</strong>或<strong>欧拉<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/af3cb274a1344747f5d71f51dc671d5b4acf26df" alt="{\varphi }">函数定理</strong>）是一个关于同余的性质。欧拉定理表明，若<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/65f10f65fcba30f32673bd2ffe9f8e006f5a624b" alt="n,a">)为正<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B0" title="整数" target="_blank" rel="noopener">整数</a>，且<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/65f10f65fcba30f32673bd2ffe9f8e006f5a624b" alt="n,a">)<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E7%B4%A0" title="互素" target="_blank" rel="noopener">互素</a>（即<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0c817b95fb4d50b2b56da323d5a01c7369827df8" alt="\gcd(a,n)=1">），则 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2e818f3f88d3e71e569f171dd86f31e1903fdc55" alt="a^{ {\varphi (n)}}\equiv 1{\pmod  n}">即{<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/bb559a70a1b64bfa864fcb458ef9ebd027dc734e" alt="a^{ {\varphi (n)}}">)与1在模n下<a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E4%BD%99" title="同余" target="_blank" rel="noopener">同余</a>；<a href="https://zh.wikipedia.org/wiki/%CE%A6" title="Φ" target="_blank" rel="noopener">φ</a>(n)为<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0" title="欧拉函数" target="_blank" rel="noopener">欧拉函数</a>。欧拉定理得名于<a href="https://zh.wikipedia.org/wiki/%E7%91%9E%E5%A3%AB" title="瑞士" target="_blank" rel="noopener">瑞士</a><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%AE%B6" title="数学家" target="_blank" rel="noopener">数学家</a><a href="https://zh.wikipedia.org/wiki/%E8%8E%B1%E6%98%82%E5%93%88%E5%BE%B7%C2%B7%E6%AC%A7%E6%8B%89" title="莱昂哈德·欧拉" target="_blank" rel="noopener">莱昂哈德·欧拉</a>。 欧拉定理实际上是<a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86" title="费马小定理" target="_blank" rel="noopener">费马小定理</a>的推广。</p><h4 id="2-1欧拉函数"><a href="#2-1欧拉函数" class="headerlink" title="2.1欧拉函数"></a>2.1欧拉函数</h4><p>在<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E8%AB%96" title="数论" target="_blank" rel="noopener">数论</a>中，对正<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B8" title="整数" target="_blank" rel="noopener">整数</a><em>n</em>，<strong>欧拉函数</strong><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f067864064667dd5f8b2508b9cbf983d89788629" alt="\varphi (n)">)是小于或等于<em>n</em>的正整数中与<em>n</em><a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%B3%AA" title="互质" target="_blank" rel="noopener">互质</a>的数的数目。此<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0_(%E6%95%B0%E5%AD%A6)" title="函数 (数学)" target="_blank" rel="noopener">函数</a>以其首名研究者<a href="https://zh.wikipedia.org/wiki/%E6%AD%90%E6%8B%89" title="欧拉" target="_blank" rel="noopener">欧拉</a>命名，它又称为<strong>φ函数</strong>（由<a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E7%88%BE%C2%B7%E5%BC%97%E9%87%8C%E5%BE%B7%E9%87%8C%E5%B8%8C%C2%B7%E9%AB%98%E6%96%AF" title="卡尔·弗里德里希·高斯" target="_blank" rel="noopener">高斯</a>所命名）或是<strong>欧拉总计函数</strong><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0#cite_note-1" target="_blank" rel="noopener">[1]</a>（totient function，由<a href="https://zh.wikipedia.org/wiki/%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E7%B4%84%E7%91%9F%E5%A4%AB%C2%B7%E8%A5%BF%E7%88%BE%E7%B6%AD%E6%96%AF%E7%89%B9" title="詹姆斯·约瑟夫·西尔维斯特" target="_blank" rel="noopener">西尔维斯特</a>所命名）。 欧拉函数实际上是模<em>n</em>的<a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E4%BD%99" title="同余" target="_blank" rel="noopener">同余类</a>所构成的乘法<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4" title="群" target="_blank" rel="noopener">群</a>（即环<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f2120ebbc85f91df66c6de5446367bf9fd620844" alt="{\mathbb  {Z}}/n{\mathbb  {Z}}">)的所有<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BD%8D%E5%85%83" title="单位元" target="_blank" rel="noopener">单位元</a>组成的乘法群）的<a href="https://zh.wikipedia.org/wiki/%E9%98%B6_(%E7%BE%A4%E8%AE%BA)" title="阶 (群论)" target="_blank" rel="noopener">阶</a>。这个性质与<a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E5%AE%9A%E7%90%86_(%E7%BE%A4%E8%AB%96)" title="拉格朗日定理 (群论)" target="_blank" rel="noopener">拉格朗日定理</a>一起构成了<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86_(%E6%95%B0%E8%AE%BA)" title="欧拉定理 (数论)" target="_blank" rel="noopener">欧拉定理</a>的证明。 1736年，欧拉证明了<a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86" title="费马小定理" target="_blank" rel="noopener">费马小定理</a><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0#cite_note-2" target="_blank" rel="noopener">[2]</a>：</p><p>假若 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p"> 为质数，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 为任意正整数，那么<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/19d2c5988bbf8e9f6e56a73c5b0d8391422f81ab" alt="a^{p}-a"> 可被 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p"> 整除。</p><p>然后欧拉予以一般化：</p><p>假若 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 与 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 互质，那么<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a7af767c337f9b624c5c058355e0a4ee644622b0" alt="{\displaystyle a^{\varphi (n)}-1}"> 可被 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 整除。亦即，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2e818f3f88d3e71e569f171dd86f31e1903fdc55" alt="a^{ {\varphi (n)}}\equiv 1{\pmod  n}">。</p><p>其中 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f067864064667dd5f8b2508b9cbf983d89788629" alt="\varphi (n)"> 即为欧拉总计函数。如果 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 为质数，那么 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2346a999a996e4a6f15819a49e41fc4ea3d6d39d" alt="{\displaystyle \varphi (n)=n-1}">)，因此，有高斯的版本<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0#cite_note-3" target="_blank" rel="noopener">[3]</a>：</p><p>假若<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p"> 为质数，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 与 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p"> 互质（<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 不是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p"> 的倍数），那么 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5b71e80b05f598bfd9ac9618c87a94323e41e688" alt="a^{ {p-1}}\equiv 1{\pmod  p}">。</p><h4 id="2-1-1欧拉函数的值"><a href="#2-1-1欧拉函数的值" class="headerlink" title="2.1.1欧拉函数的值"></a>2.1.1欧拉函数的值</h4><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/84de049893e3f6d3a1d4e84570acce498c38d469" alt="\varphi (1)=1">（小于等于1的正整数中唯一和1互质的数就是1本身）。 若<em>n</em>是<a href="https://zh.wikipedia.org/wiki/%E8%B3%AA%E6%95%B8" title="质数" target="_blank" rel="noopener">质数</a><em>p</em>的<em>k</em>次<a href="https://zh.wikipedia.org/wiki/%E5%86%AA" title="幂" target="_blank" rel="noopener">幂</a>，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1415c3d448334af031e75ba3907e7eca8480a5a8" alt="\varphi (n)=\varphi (p^{k})=p^{k}-p^{ {k-1}}=(p-1)p^{ {k-1}}">)，因为除了<em>p</em>的<a href="https://zh.wikipedia.org/wiki/%E5%80%8D%E6%95%B8" title="倍数" target="_blank" rel="noopener">倍数</a>外，其他数都跟<em>n</em>互质。 欧拉函数是<a href="https://zh.wikipedia.org/wiki/%E7%A9%8D%E6%80%A7%E5%87%BD%E6%95%B8" title="积性函数" target="_blank" rel="noopener">积性函数</a>，即是说若<em>m</em>,<em>n</em>互质，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9699cf6fa599218521c48d04ff226dcfbd1f92ce" alt="\varphi (mn)=\varphi (m)\varphi (n)">)。当A与B是互素时，Euler(A*B)=Euler(A)*Euler(B)，即欧拉函数是积性函数，但不是完全积性函数。 证明：设<em>A</em>, <em>B</em>, <em>C</em>是跟<em>m</em>, <em>n</em>, _mn_互质的数的集，据<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9C%8B%E5%89%A9%E9%A4%98%E5%AE%9A%E7%90%86" title="中国剩余定理" target="_blank" rel="noopener">中国剩余定理</a>，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/65f31ae45b0098f06b5d22c38d317eb097a88fa9" alt="A\times B">)和<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/4fc55753007cd3c18576f7933f6f089196732029" alt="C">)可建立<a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E5%B0%84" title="双射" target="_blank" rel="noopener">双射</a>(一一对应)的关系。（或者也可以从初等代数角度给出<a href="https://zh.wikipedia.org/w/index.php?title=%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E7%A7%AF%E6%80%A7%E7%9A%84%E7%AE%80%E5%8D%95%E8%AF%81%E6%98%8E&action=edit&redlink=1" title="欧拉函数积性的简单证明（页面不存在）" target="_blank" rel="noopener">欧拉函数积性的简单证明</a>） 因此<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f067864064667dd5f8b2508b9cbf983d89788629" alt="\varphi (n)">)的值使用<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E8%A1%93%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86" title="算术基本定理" target="_blank" rel="noopener">算术基本定理</a>便知，</p><p>若<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/52f9538221d0fcae917b57da97b72ef3fca710ff" alt="n=p_{1}^{ {k_{1}}}p_{2}^{ {k_{2}}}\cdots p_{r}^{ {k_{r}}}"></p><p>则<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ad6e2b0c32f6fa6a054226cace33ecc66ceec18d" alt="\varphi (n)=\prod _{ {i=1}}^{r}p_{i}^{ {k_{i}-1}}(p_{i}-1)=\prod _{ {p\mid n}}p^{ {\alpha _{p}-1}}(p-1)=n\prod _{ {p|n}}\left(1-{\frac  {1}{p}}\right)">。</p><p>欧拉函数的求法，Euler(A)=A<em>(1-1/p1)</em>(1-1/p2)<em>….</em>(1-1/pn)。（p为A的分解质因数中的不同的质因数）</p><p>其中<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5c48aa9000af59f94d3022f58beadb61cea7d8b5" alt="\alpha _{p}">是使得<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0fc4e1d2e0eb9fbc9821482a97ad563c500f9ff3" alt="p^{ {\alpha }}">)整除<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">的最大整数<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b79333175c8b3f0840bfb4ec41b8072c83ea88d3" alt="\alpha ">（这里<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7239120b2b3bfb64f68b169a2a5e406576c6d5b0" alt="\alpha _{ {p_{i}}}=k_{i}">）。 例如<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b1ad25e057815af1b8cbe0eb63a73a7ec4619502" alt="\varphi (72)=\varphi (2^{3}\times 3^{2})=2^{ {3-1}}(2-1)\times 3^{ {2-1}}(3-1)=2^{2}\times 1\times 3\times 2=24"></p><h4 id="2-1-1-1欧拉函数c-实现"><a href="#2-1-1-1欧拉函数c-实现" class="headerlink" title="2.1.1.1欧拉函数c++实现"></a>2.1.1.1欧拉函数c++实现</h4><p>1.对于素数A，有Euler(A)=A<em>(1-1/A)=A-1。（A有且只有一个质因子，它自己） 2.如果对于任意数A和素数p，有A%p==0，那么Euler(A*p)=p*Euler(A)。（证明：设A的质因子为p,P1,P2,..Pn，那么A*p的质因子也一定是p,P1,P2,..Pn，所以Euler(A)=A\</em>(1-1/p)<em>(1-1/P1)</em>…<em>(1-1/Pn)，Euler(A*p)=A*p</em>(1-1/p)<em>(1-1/P1)</em>…<em>(1-1/Pn)，所以Euler(A*p)=Euler(A)*p。） 3.如果对于任意数A和素数p,有A%p!=0,那么A与p互素，所以Euler(A*p)=Euler(A)*Euler(p)=Euler(A)</em>(p-1)。</p><pre><code>#include &lt;iostream&gt;#include &lt;bits/stdc++.h&gt;using namespace std;int euler(int n) {    int res = n;    for (int i = 2; i*i &lt;= n; i++) {        if (n % i == 0) {            n /= i;            res = res - res / i;        }        while (n % i == 0)            n /= i;    }    if(n&gt;1)        res =res - res/n;    return res;}int main(){    int n;    while(cin&gt;&gt;n)    cout&lt;&lt;euler(n)&lt;&lt;endl;    return 0;}</code></pre><h4 id="3-费马小定理"><a href="#3-费马小定理" class="headerlink" title="3.费马小定理"></a>3.<strong>费马小定理</strong></h4><p><strong>费马小定理</strong>是<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E8%AE%BA" title="数论" target="_blank" rel="noopener">数论</a>中的一个定理：假如<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">)是一个<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B0" title="整数" target="_blank" rel="noopener">整数</a>，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p">)是一个<a href="https://zh.wikipedia.org/wiki/%E8%B3%AA%E6%95%B8" title="质数" target="_blank" rel="noopener">质数</a>，那么<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/19d2c5988bbf8e9f6e56a73c5b0d8391422f81ab" alt="a^{p}-a">是p的倍数，可以表示为</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7ff656f721894b9a50a2b1d18538463a6a4ec15f" alt="a^{p}\equiv a{\pmod  {p}}"></p><p>如果<em>a</em>不是<em>p</em>的倍数，这个定理也可以写成</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5b71e80b05f598bfd9ac9618c87a94323e41e688" alt="a^{ {p-1}}\equiv 1{\pmod  {p}}">)<a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86#cite_note-1" target="_blank" rel="noopener">[1]</a></p><p>这个书写方式更加常用。</p><h4 id="4-中国剩余定理"><a href="#4-中国剩余定理" class="headerlink" title="4.中国剩余定理"></a>4.中国剩余定理</h4><p>用现代数学的语言来说明的话，中国剩余定理给出了以下的一元线性同余方程组：</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b3e3b83a47f7942fa7337d9157658625d6685ef0" alt="(S) : \quad \left\{ \begin{matrix} x \equiv a_1 \pmod {m_1} \\ x \equiv a_2 \pmod {m_2} \\ \vdots \qquad\qquad\qquad \\ x \equiv a_n \pmod {m_n} \end{matrix} \right."></p><p>有解的判定条件，并用<a href="https://zh.wikipedia.org/wiki/%E6%9E%84%E9%80%A0%E6%B3%95" title="构造法" target="_blank" rel="noopener">构造法</a>给出了在有解情况下解的具体形式。 中国剩余定理说明：假设<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B0" title="整数" target="_blank" rel="noopener">整数</a><em>m</em>1, <em>m</em>2, … , <em>m</em>n其中任两数<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%B3%AA" title="互素" target="_blank" rel="noopener">互质</a>，则对任意的整数：<em>a</em>1, <em>a</em>2, … , <em>a</em>n，方程组<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e7fcd27e8d01fdf5fe00da4f97045f079cd97bff" alt="(S)">有解，并且通解可以用如下方式构造得到：</p><ol><li>设<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/10b41471778d5a1c10a6fb0a564a8c483df606e2" alt="M = m_1 \times m_2 \times \cdots \times m_n = \prod_{i=1}^n m_i">是整数<em>m</em>1, <em>m</em>2, … , <em>m</em>n的乘积，并设<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/39b20c626ec6b04a3cbd13c524172c3638371f74" alt="M_i = M/m_i, \; \; \forall i \in \{1, 2, \cdots , n\}">)，即<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/eda8fd06f1cd5de22ed07385a0f8aa19773b2de9" alt="M_{i}">是除了<em>m</em>i以外的<em>n</em> − 1个整数的乘积。</li><li>设<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/bd32f7173a32d940eb3f995e732359ccd741ffba" alt="t_i = M_i^{-1}">)为<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/eda8fd06f1cd5de22ed07385a0f8aa19773b2de9" alt="M_{i}">)模<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/95ec8e804f69706d3f5ad235f4f983220c8df7c2" alt="m_{i}">)的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E8%AE%BA%E5%80%92%E6%95%B0" title="数论倒数" target="_blank" rel="noopener">数论倒数</a>：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e764e813b4b993880932c6b080b56f3aa2b9ea59" alt="t_i M_i \equiv 1 \pmod {m_i},  \; \; \forall i \in \{1, 2, \cdots , n\}."></li><li>方程组<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e7fcd27e8d01fdf5fe00da4f97045f079cd97bff" alt="(S)">的通解形式为：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/105e4e1aa217620e7ebfa31a2c894845dd2ca1df" alt="x = a_1 t_1 M_1 + a_2 t_2 M_2 + \cdots + a_n t_n M_n + k M= k M + \sum_{i=1}^n a_i t_i M_i, \quad k \in \mathbb{Z}."> 在模<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f82cade9898ced02fdd08712e5f0c0151758a0dd" alt="M">)的意义下，方程组<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e7fcd27e8d01fdf5fe00da4f97045f079cd97bff" alt="(S)">只有一个解：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/56e89d12fd609dc39d5c6919c2d9c47252dbf829" alt="x = \sum_{i=1}^n a_i t_i M_i.">。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>康托展开、逆康托展开与八数码问题、next_permutation函数、启发式搜索</title>
      <link href="/2018/09/05/kang-tuo-zhan-kai-ni-kang-tuo-zhan-kai-yu-ba-shu-ma-wen-ti-next-permutation-han-shu-qi-fa-shi-sou-suo/"/>
      <url>/2018/09/05/kang-tuo-zhan-kai-ni-kang-tuo-zhan-kai-yu-ba-shu-ma-wen-ti-next-permutation-han-shu-qi-fa-shi-sou-suo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-康托展开"><a href="#1-康托展开" class="headerlink" title="1.康托展开"></a>1.康托展开</h3><p>康托展开其实就是一个简单的公式： <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e9b98a7afd5ee43a1c3649845dac9daa1634e71e" alt="{\displaystyle X=a_{n}(n-1)!+a_{n-1}(n-2)!+\cdots +a_{1}\cdot 0!}"> 其中,<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0bc77764b2e74e64a63341054fa90f3e07db275f" alt="a_{i}">为整数,并且<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/aa719ffadc6a2b1e3c8d6985bc8d34a991fbdb06" alt="{\displaystyle 0\leq a_{i}&lt;i,1\leq i\leq n}"> 应用这个原理我们可以把一个很大的数转化为一个较小的数来储存，因为康托展开是一个全排列的双射（one-to-one correspondence）所以可以进行康拓展开的逆运算将数字转换回来，也可对已有数字进一步康拓展开获得更小的排列。</p><h4 id="1-1举例"><a href="#1-1举例" class="headerlink" title="1.1举例"></a>1.1举例</h4><p>例如，3 5 7 4 1 2 9 6 8 展开为 98884。因为X=2*8!+3*7!+4*6!+2*5!+0*4!+0*3!+2*2!+0*1!+0*0!=98884. 解释： 排列的第一位是3，比3小的数有两个，以这样的数开始的排列有8!个，因此第一项为2*8! 排列的第二位是5，比5小的数有1、2、3、4，由于3已经出现，因此共有3个比5小的数，这样的排列有7!个，因此第二项为3*7! 以此类推，直至0*0!</p><h5 id="1-1-1-c-实现"><a href="#1-1-1-c-实现" class="headerlink" title="1.1.1 c++实现"></a>1.1.1 c++实现</h5><pre><code>#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;const char a\[20\]={0};int  fac\[\] = {1,1,2,6,24,120,720,5040,40320}; //i的阶乘为fac\[i\]// 康托展开-\&gt; 表示数字a是 a的全排列中从小到大排，排第几// n表示1~n个数  a数组表示数字。int Cantor(int n,char *a){    int i,j,t,sum;    sum=0;    for( i=0; i&lt;n-1 ;++i)    {        t=0;        for(j=i+1;j&lt;n;++j)            if( a\[i\]&gt;a\[j\] )                ++t;            cout&lt;&lt;t&lt;&lt;&quot; &quot;;        sum+=t*fac\[n-i-1\];    }    return sum+1;}int main(){    char ba\[20\]={0};    int n;    int sum=0;    cin&gt;&gt;n;    for(int i=0;i&lt;n;i++) cin&gt;&gt;ba\[i\];    sum=Cantor(n,ba);    cout&lt;&lt; sum &lt;&lt;endl;    return 0;}</code></pre><h4 id="1-2康托展开的逆运算"><a href="#1-2康托展开的逆运算" class="headerlink" title="1.2康托展开的逆运算"></a>1.2康托展开的逆运算</h4><p>既然康托展开是一个双射，那么一定可以通过康托展开值求出原排列，即可以求出n的全排列中第x大排列。 如n=5,x=96时：</p><p>首先用96-1得到95，说明x之前有95个排列.(将此数本身减去1)<br>用95去除4! 得到3余23，说明有3个数比第1位小，所以第一位是4.<br>用23去除3! 得到3余5，说明有3个数比第2位小，所以是4，但是4已出现过，因此是5.<br>用5去除2!得到2余1，类似地，这一位是3.<br>用1去除1!得到1余0，这一位是2.<br>最后一位只能是1.<br>所以这个数是45321.</p><h4 id="1-2-1-c-实现"><a href="#1-2-1-c-实现" class="headerlink" title="1.2.1 c++实现"></a>1.2.1 c++实现</h4><pre><code>static const int FAC\[\] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};   // 阶乘//康托展开逆运算void decantor(int x, int n){    vector&lt;int&gt; v;  // 存放当前可选数    vector&lt;int&gt; a;  // 所求排列组合    for(int i=1;i&lt;=n;i++)        v.push_back(i);    for(int i=m;i&gt;=1;i--)    {        int r = x % FAC\[i-1\];        int t = x / FAC\[i-1\];        x = r;        sort(v.begin(),v.end());// 从小到大排序         a.push_back(v\[t\]);      // 剩余数里第t+1个数为当前位        v.erase(v.begin()+t);   // 移除选做当前位的数    }}</code></pre><h4 id="1-3-next-permutation函数"><a href="#1-3-next-permutation函数" class="headerlink" title="1.3 next_permutation函数"></a>1.3 next_permutation函数</h4><pre><code>//// Created by jason on 18-9-5.//#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;int  FAC\[\] = {1,1,2,6,24,120,720,5040,40320};int main() {    int n;    int k;    cin &gt;&gt; n &gt;&gt; k;    int num\[n\];    for (int i = 0; i &lt; n; i++) {        num\[i\] = i + 1;    }    for (int i = 1; i &lt; k; i++) {        for (int j = 0; j &lt; n; j++) {            cout &lt;&lt; num\[j\];        }        cout &lt;&lt; endl;        next_permutation(num, num + n);    }    for (int i = 0; i &lt; n; i++) {        cout &lt;&lt; num\[i\];    }    return 0;}</code></pre><p>太强了STL.</p><h4 id="2-八数码问题"><a href="#2-八数码问题" class="headerlink" title="2.八数码问题"></a>2.八数码问题</h4>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数分解</title>
      <link href="/2018/09/03/zheng-shu-fen-jie/"/>
      <url>/2018/09/03/zheng-shu-fen-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-试除法"><a href="#1-试除法" class="headerlink" title="1.试除法"></a>1.试除法</h3><p>试除法是整数分解算法中最简单和最容易理解的算法。首次出现于意大利数学家斐波那契出版于1202年的著作。 有合数n，n为待分解的正整数，从小于等于<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2a2994734eae382ce30100fb17b9447fd8e99f81" alt="\sqrt{n}">的每个素数去试除待分解的整数。如果找到一个数能够整除除尽，这个数就是待分解整数的因子。如果找到一个数能够整除除尽，这个数就是待分解整数的因子。试除法一定能够找到n的因子，如果没有找到则证明n是素数，如果整数的末尾不是0或5那么可以不用计算5的倍数的素因子，如果n末尾为2，检查偶数因子即可。</p><p>某种意义上说，试除法是个效率非常低的算法，如果从2开始，一直算到<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2a2994734eae382ce30100fb17b9447fd8e99f81" alt="\sqrt{n}">需要 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/70dcd123ffd5e05da1282e8bb6199a69cabb3094" alt="{\displaystyle \pi ({\sqrt {n}})}">)次试除，这里pi(x)是小于x的素数的个数。这是不包括<a href="https://zh.wikipedia.org/wiki/%E7%B4%A0%E6%80%A7%E6%B5%8B%E8%AF%95" title="素性测试" target="_blank" rel="noopener">素性测试</a>的。如果稍做变通——还是不包括素性测试——用小于<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2a2994734eae382ce30100fb17b9447fd8e99f81" alt="\sqrt{n}">的奇数去简单的试除，则需要<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/84e2f902675495ea907811a67242d5de452cc580" alt="{\displaystyle { {\sqrt {n}} \over 2}}">)次。这意味着，如果<em>n</em>有大小接近的素因子（例如<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%AD%A6" title="公钥密码学" target="_blank" rel="noopener">公钥密码学</a>中用到的），试除法是不太可能实行的。但是，当<em>n</em>有至少一个小因子，试除法可以很快找到这个小因子。值得注意的是，对于随机的<em>n</em>，2是其因子的<a href="https://zh.wikipedia.org/wiki/%E6%A6%82%E7%8E%87" title="概率" target="_blank" rel="noopener">概率</a>是50％，3是33％，等等，88％的正整数有小于100的因子，91％的有小于1000。 1.1<strong>卢卡斯-莱默检测法</strong> <strong>梅森数</strong>是指形如<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/51e4bd4ef2f9549d026cbf643a91c0d12a8c6794" alt="2^{n}-1">)的数，记为<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8656f32ad5c50e679b491b361a423727491496a0" alt="M_{n}">)；如果一个梅森数是<a href="https://zh.wikipedia.org/wiki/%E7%B4%A0%E6%95%B0" title="素数" target="_blank" rel="noopener">素数</a>那么它称为<strong>梅森素数</strong>（英语：Mersenne prime）。 卢卡斯－莱默检验法原理是这样：令梅森数 <em>M__p</em> = 2_p_− 1作为检验对象（预设<em>p</em>是<a href="https://zh.wikipedia.org/wiki/%E7%B4%A0%E6%95%B0" title="素数" target="_blank" rel="noopener">素数</a>，否则<em>M__p_就是<a href="https://zh.wikipedia.org/wiki/%E5%90%88%E6%95%B0" title="合数" target="_blank" rel="noopener">合数</a>了）。定义序列{_s__i</em> }：所有的<em>i</em> ≥ 0</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9fc749e18edade3aef75492f908b51d8557bd4b5" alt="s_{i}={\begin{cases}\;\;\,4\\s_{ {i-1}}^{2}-2\end{cases}}"></p><p>，如果<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9c43332a399f3f7b9aa3adedf804715b87afedd3" alt="\displaystyle i=0">；</p><p>，如果<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f578faf6a3a1f2c22e7c77e819a5ae06c6a27e18" alt="\displaystyle i&gt;0">。</p><p>这个序列的开始几项是<a href="https://zh.wikipedia.org/wiki/4" title="4" target="_blank" rel="noopener">4</a>, <a href="https://zh.wikipedia.org/wiki/14" title="14" target="_blank" rel="noopener">14</a>, <a href="https://zh.wikipedia.org/wiki/194" title="194" target="_blank" rel="noopener">194</a>, <a href="https://zh.wikipedia.org/w/index.php?title=37634&action=edit&redlink=1" title="37634（页面不存在）" target="_blank" rel="noopener">37634</a>, … （<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B8%E6%95%B8%E5%88%97%E7%B7%9A%E4%B8%8A%E5%A4%A7%E5%85%A8" title="整数数列线上大全" target="_blank" rel="noopener">OEIS</a>中的数列<a href="https://oeis.org/A003010" title="oeis:A003010" target="_blank" rel="noopener">A003010</a>） 那么_M__p_是素数<a href="https://zh.wikipedia.org/wiki/%E5%BD%93%E4%B8%94%E4%BB%85%E5%BD%93" title="当且仅当" target="_blank" rel="noopener">当且仅当</a></p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/927bf8c53e8606aee46b2aa67843462e2dc0dfce" alt="s_{ {p-2}}\equiv 0{\pmod  {M_{p}}};"></p><p>否则, <em>M__p_是<a href="https://zh.wikipedia.org/wiki/%E5%90%88%E6%95%B0" title="合数" target="_blank" rel="noopener">合数</a>。_s__p</em> − 2模_M__p_的余数叫做<em>p</em>的<strong>卢卡斯－莱默余数</strong>。 1.2 <strong>埃拉托斯特尼筛法</strong> <strong>埃拉托斯特尼筛法</strong>（<a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E8%87%98%E8%AA%9E" title="希腊语" target="_blank" rel="noopener">希腊语</a>：κόσκινον Ἐρατοσθένους，英语：sieve of Eratosthenes ），简称<strong>埃氏筛</strong>，也有人称素数筛。这是一种简单且历史悠久的<a href="https://zh.wikipedia.org/wiki/%E7%AD%9B%E6%B3%95" title="筛法" target="_blank" rel="noopener">筛法</a>，用来找出一定范围内所有的<a href="https://zh.wikipedia.org/wiki/%E8%B3%AA%E6%95%B8" title="素数" target="_blank" rel="noopener">素数</a>。 所使用的原理是从2开始，将每个<a href="https://zh.wikipedia.org/wiki/%E8%B3%AA%E6%95%B8" title="素数" target="_blank" rel="noopener">素数</a>的各个倍数，标记成<a href="https://zh.wikipedia.org/wiki/%E5%90%88%E6%95%B8" title="合数" target="_blank" rel="noopener">合数</a>。一个素数的各个倍数，是一个差为此素数本身的等差数列。此为这个筛法和<a href="https://zh.wikipedia.org/wiki/%E8%A9%A6%E9%99%A4%E6%B3%95" title="试除法" target="_blank" rel="noopener">试除法</a>不同的关键之处，后者是以素数来测试每个待测数能否被整除。 埃拉托斯特尼筛法是列出所有小素数最有效的方法之一，其名字来自于<a href="https://zh.wikipedia.org/wiki/%E5%8F%A4%E5%B8%8C%E8%87%98%E6%95%B8%E5%AD%B8" title="古希腊数学" target="_blank" rel="noopener">古希腊数学家</a><a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC" title="埃拉托斯特尼" target="_blank" rel="noopener">埃拉托斯特尼</a>，并且被描述在另一位古希腊数学家<a href="https://zh.wikipedia.org/wiki/%E5%B0%BC%E7%A7%91%E9%A9%AC%E5%BA%93%E6%96%AF" title="尼科马库斯" target="_blank" rel="noopener">尼科马库斯</a>所著的《算术入门》中。<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95#cite_note-1" target="_blank" rel="noopener">[1]</a> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Sieve_of_Eratosthenes_animation.gif/350px-Sieve_of_Eratosthenes_animation.gif" alt="åæææ¯ç¹å°¼ç­æ³"> 详细列出算法如下：</p><ol><li>列出2以后的所有序列：<ul><li>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li></ul></li><li>标出序列中的第一个质数，也就是2，序列变成：<ul><li>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li></ul></li><li>将剩下序列中，划摽2的倍数（用红色标出），序列变成：<ul><li>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li></ul></li><li>如果现在这个序列中最大数小于最后一个标出的素数的平方，那么剩下的序列中所有的数都是质数，否则回到第二步。</li></ol><hr><ol><li><p>本例中，因为25大于2的平方，我们返回第二步：</p></li><li><p>剩下的序列中第一个质数是3，将主序列中3的倍数划出（红色），主序列变成：</p><ul><li>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li></ul></li><li><p>我们得到的质数有：2，3</p></li><li><p>25仍然大于3的平方，所以我们还要返回第二步：</p></li><li><p>现在序列中第一个质数是5，同样将序列中5的倍数划出，主序列成了：</p><ul><li>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li></ul></li><li><p>我们得到的质数有：2, 3, 5 。</p></li><li><p>因为25等于5的平方，结束循环</p></li></ol><p>结论：去掉红色的数字，2到25之间的质数是：2, 3, 5, 7, 11, 13, 17, 19, 23。 1.2.1伪代码</p><p><strong>Input</strong>: an integer <em>n</em> &gt; 1</p><p>Let <em>A</em> be an array of Boolean values, indexed by integers 2 to <em>n</em>,<br>initially all set to <strong>true</strong>.</p><p> <strong>for</strong> <em>i</em> = 2, 3, 4, …, not exceeding <em>√n</em>:<br>  <strong>if</strong> <em>A</em>[<em>i</em>] is <strong>true</strong>:<br>    <strong>for</strong> <em>j</em> = <em>i2</em>, <em>i2+i</em>, <em>i2+2i</em>, <em>i2+3i</em>, …, not exceeding <em>n</em> :<br>      <em>A</em>[<em>j</em>] := <strong>false</strong></p><p><strong>Output</strong>: all <em>i</em> such that <em>A</em>[<em>i</em>] is <strong>true</strong>.</p><p>1.3.1 C++</p><pre class=" language-c++"><code class="language-c++">bool flag[MAXN] = {1};    //将标识初始化为truevoid erat(int maxn){    flag[0]=0;            //0不是素数    flag[1]=0;            //1不是素数    for(int i=2;i<=maxn;++i)    {        /*当i为素数时，i的所有倍数都不是素数*/        if(flag[i])        {            for(int j=i*i;j<=maxn;j+=i)            {                flag[j]=0;            }        }    } }</code></pre><pre><code>`#include &lt;iostream&gt;``#include &lt;cstdio&gt;``#include &lt;cmath&gt;``#include &lt;cstring&gt;``#include &lt;vector&gt;``#include &lt;algorithm&gt;``using` `namespace` `std;``const` `long` `long` `maxn = 10000007 + 10;``const` `long` `long` `maxp = 700000;``int` `vis[maxn];    ``// i是合数vis为1，i是素数，vis为0``long` `long` `prime[maxp];``void` `sieve(``long` `long` `n){``long` `long` `m = (``long` `long``)``sqrt``(n + 0.5);``memset``(vis, 0, ``sizeof``(vis));``vis[2] = 0;``for` `(``long` `long` `i = 3; i &lt;= m; i += 2) {``if``(!vis[i])``for` `(``long` `long` `j = i * i; j &lt;= n; j += i)``vis[j] = 1;``if``(i * i &gt; n)``break``;``}``}``long` `long` `gen(``long` `long` `n){``sieve(n);``long` `long` `c = 1;``prime[0] = 2;``for` `(``long` `long` `i = 3; i &lt;= n; i += 2)``if``(!vis[i])``prime[c++] = i;``return` `c;``}``int` `main()``{``long` `long` `n, c;``cout &lt;&lt; ``&quot;刷素数到n：&quot;``;``cin &gt;&gt; n;``c = gen(n);``for` `(``long` `long` `i = 0; i &lt; c; i++)``printf``(``&quot;%lld&quot;``, prime[i]);``cout &lt;&lt; endl &lt;&lt; c;``return` `0;``}`</code></pre><p>1.3 米勒-拉宾素性检验 <strong>米勒-拉宾素性检验</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E8%B3%AA%E6%95%B8%E5%88%A4%E5%AE%9A%E6%B3%95%E5%89%87" title="素数判定法则" target="_blank" rel="noopener">素数判定法则</a>，利用<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%AE%97%E6%B3%95" title="随机化算法" target="_blank" rel="noopener">随机化算法</a>判断一个数是<a href="https://zh.wikipedia.org/wiki/%E5%90%88%E6%95%B0" title="合数" target="_blank" rel="noopener">合数</a>还是_可能是_素数。<a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%86%85%E5%9F%BA%E6%A2%85%E9%9A%86%E5%A4%A7%E5%AD%A6" title="卡内基梅隆大学" target="_blank" rel="noopener">卡内基梅隆大学</a>的计算机系教授Gary Lee Miller首先提出了基于<a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E4%B9%89%E9%BB%8E%E6%9B%BC%E7%8C%9C%E6%83%B3" title="广义黎曼猜想" target="_blank" rel="noopener">广义黎曼猜想</a>的<a href="https://zh.wikipedia.org/wiki/%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%AE%97%E6%B3%95" title="确定性算法" target="_blank" rel="noopener">确定性算法</a>，由于广义黎曼猜想并没有被证明，其后由以色列<a href="https://zh.wikipedia.org/wiki/%E8%80%B6%E8%B7%AF%E6%92%92%E5%86%B7%E5%B8%8C%E4%BC%AF%E4%BE%86%E5%A4%A7%E5%AD%B8" title="耶路撒冷希伯来大学" target="_blank" rel="noopener">耶路撒冷希伯来大学</a>的<a href="https://zh.wikipedia.org/wiki/%E8%BF%88%E5%85%8B%E5%B0%94%C2%B7%E6%8B%89%E5%AE%BE" title="迈克尔·拉宾" target="_blank" rel="noopener">Michael O. Rabin</a>教授作出修改，提出了不依赖于该假设的<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%AE%97%E6%B3%95" title="随机化算法" target="_blank" rel="noopener">随机化算法</a>。 1.3.1 概念 首先介绍一个相关的引理。<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/65e7c059e3e4df8c6f5e3befcc9123ecf0699545" alt="{\displaystyle 1^{2}{\bmod {p}}}"> 和 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5a3697b745e05696dc2c0d59f2d8bdba087ac938" alt="{\displaystyle (-1)^{2}{\bmod {p}}}">总是得到 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/92d98b82a3778f043108d4e20960a9193df57cbf" alt="1">)，称这两个数为1的“平凡平方根”。当<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p">是素数且<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0502012bc3b4e73e6f3c2f4748feaab3fd3c350d" alt="{\displaystyle p&gt;2}">时，不存在<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5655e491d25858db6c2959a9140055d1269ccef7" alt="{\displaystyle 1{\bmod {p}}}"> 的“非平凡平方根”。为了证明该引理，我们假设<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/87f9e315fd7e2ba406057a97300593c4802b53e4" alt="x">是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5655e491d25858db6c2959a9140055d1269ccef7" alt="{\displaystyle 1{\bmod {p}}}">的平方根，于是有</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f2404e3c31b0cfd08dda220c8baa8219babc5f97" alt="{\displaystyle x^{2}\equiv 1{\pmod {p}}}"></p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/672a2fc37298d72e29c68b7013b486b6246c38db" alt="{\displaystyle (x+1)(x-1)\equiv 0{\pmod {p}}}"></p><p>也就是说，素数 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p"> 能够整除 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8eac886a1c95ee0e9751dee8a34db16419da65ed" alt="{\displaystyle (x-1)(x+1)}"> ，根据欧几里得引理，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0f1a88d34243b98b57c4df9db5724f61b59a4b9d" alt="{\displaystyle x-1}"> 或者 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/16df430ed7a23df9b160a5bbd957f306a0c3baa7" alt="x+1">)能够被<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/81eac1e205430d1f40810df36a0edffdc367af36" alt="p"> 整除，即 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c47130edf21adaddfaf7943b7f4726b9f49e0c0c" alt="{\displaystyle x\equiv 1{\pmod {p}}}"> 或 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9442867e294b731375518aa103c235126f5c5c1f" alt="{\displaystyle x\equiv -1{\pmod {p}}}">, 即 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/87f9e315fd7e2ba406057a97300593c4802b53e4" alt="x"> 是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5655e491d25858db6c2959a9140055d1269ccef7" alt="{\displaystyle 1{\bmod {p}}}"> 的平凡平方根。 现在假设<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">是一个奇素数，且 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/44e71ac55b9fbf1e9f341b946cda63d61d3ef2cd" alt="n&gt;2">)。于是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fbd0b0f32b28f51962943ee9ede4fb34198a2521" alt="n-1">是一个偶数，可以被表示为<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5aa9d1939706614a2d66d272883bd4918e5bf302" alt="{\displaystyle 2^{s}*d}"> 的形式，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/01d131dfd7673938b947072a13a9744fe997e632" alt="s">)和<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e85ff03cbe0c7341af6b982e47e9f90d235c66ab" alt="d">)都是正整数且<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e85ff03cbe0c7341af6b982e47e9f90d235c66ab" alt="d">是奇数。对任意在<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d72620a16da7fb10ee179052ceb101a91ac33098" alt="{\displaystyle (Z/nZ)^{*}}"> 范围内的 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 和<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d7adcc552e16961533f8b5d14d4aa43c696350a8" alt="{\displaystyle 0\leq r\leq s-1}">，必满足以下两种形式的一种：</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2fbd85b469a4bd1028f98a9ba2a0a9e170006f21" alt="{\displaystyle a^{d}\equiv 1{\pmod {n}}}"></p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/eb8b4bcb85512714451e65b5e92f60f84332a500" alt="{\displaystyle a^{2^{r}d}\equiv -1{\pmod {n}}}"></p><p>因为由于 <a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86" title="费马小定理" target="_blank" rel="noopener">费马小定理</a> ，对于一个素数<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">，有</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3bfc8625369c7558deadd61823842db06983423d" alt="{\displaystyle a^{n-1}\equiv 1{\pmod {n}}}"></p><p>又由于上面的引理，如果我们不断对<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2a6beb3068e2c15fb1b618b9b82f306c65430b33" alt="{\displaystyle a^{n-1}}">取平方根，我们总会得到 1 或 -1。如果我们得到了 -1，意味着②式成立，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 是一个素数。如果我们从未得到 -1，那么通过这个过程我们已经取遍了所有2的幂次，即①式成立。 米勒-拉宾素性测试就是基于上述原理的逆否，也就是说，如果如果我们能找到这样一个<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">，使得对任意<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d7adcc552e16961533f8b5d14d4aa43c696350a8" alt="{\displaystyle 0\leq r\leq s-1}">以下两个式子均满足：</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0867bd3e86262241fae38a021ed361001e28f66a" alt="{\displaystyle a^{d}\not \equiv 1{\pmod {n}}}"></p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e20bbbf10f3ef34c4e8d4e398dd978250331af54" alt="{\displaystyle a^{2^{r}d}\not \equiv -1{\pmod {n}}}"></p><p>那么<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 就不是一个素数。这样的 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 称为<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 是合数的一个凭证（witness）。否则 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 可能是是一个证明 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 是素数的“强伪证”（strong liar），即当<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">)确实是一个合数，但是对当前选取的<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 来说上述两个式子均不满足，这时我们认为<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">)是基于<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">的大概率素数。 每个奇合数 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 都有很多个对应的凭证<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">，但是要生成这些 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 并不容易。当前解决的办法是使用概率性的测试。我们从集合<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d72620a16da7fb10ee179052ceb101a91ac33098" alt="{\displaystyle (Z/nZ)^{*}}">)中随机选择非零数<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">，然后检测当前的 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 是否是 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 为合数的一个凭证。如果 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 本身确实是一个合数，那么大部分被选择的 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 都应该是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 的凭证，也即通过这个测试能检测出<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 是合数的可能性很大。然而，仍有极小概率的情况下我们找到的 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a"> 是一个“强伪证”（反而表明了<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 可能是一个素数）。通过多次独立测试不同的<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">，我们能减少这种出错的概率。 对于测试一个大数是否是素数，常见的做法随机选取基数<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">，毕竟我们并不知道凭证和伪证在<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6565c7499e7a49f53c1858eadce017451ff55543" alt="{\displaystyle [1,n-1]}">这个区间如何分布。典型的例子是 Arnault 曾经给出了一个397位的合数<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">)，但是所有小于307的基数<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ffd2487510aa438433a2579450ab2b3d557e5edc" alt="a">)都是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">是素数的“强伪证”。不出所料，这个大合数通过了 Maple 程序的<code>isprime()</code> 函数（被判定为素数）。这个函数通过检测 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ff4c8c2bb13ff520e25b9461efe76dd55292336f" alt="{\displaystyle a=2,3,5,7,11}"> 这几种情况来进行素性检验。 1.3.2 伪代码</p><pre><code>Input #1: n &gt; 3, an odd integer to be tested for primality;Input #2: k, a parameter that determines the accuracy of the testOutput: composite if n is composite, otherwise probably primewrite n − 1 as 2r·d with d odd by factoring powers of 2 from n − 1WitnessLoop: repeat k times:    pick a random integer a in the range \[2, n − 2\]    x ← ad mod n    if x = 1 or x = n − 1 then        continue WitnessLoop    repeat r − 1 times:    x ← x2 mod n    if x = 1 then        return composite    if x = n − 1 then        continue WitnessLoop    return compositereturn probably prime</code></pre><p>1.3.3 c++</p><pre><code>#include &lt;iostream&gt;#include &lt;cstdlib&gt;using namespace std;typedef long long llong;//求取(x * y) % nllong mod(llong x, llong y,llong n){    llong res = 0;    llong temp = x % n;    while(y)   {        if(y &amp; 0x1)            if((res += temp) &gt; n)                res -= n;        if((temp &lt;&lt;= 1) \&gt;  n)            temp -= n;        y &gt;&gt;= 1;    }    return res;}//求取(x ^ y) % nllong get_mod(llong x, llong y, llong n){    llong res = 1;    llong temp = x;    while(y)    {        if(y &amp; 0x1)            res = mod(res, temp, n);        temp = mod(temp, temp, n);        y &gt;&gt;= 1;    }    return res;}//编写bool函数，判定是否为素数bool is_prime(llong n, int t){    if(n &lt; 2)        return false;    if(n == 2)        return true;    if(!(n &amp; 0x1))        return false;    llong k = 0, m, a, i;    for(m = n -1; !(m &amp; 0x1); m &gt;&gt;= 1, ++k);    while(t--)    {        a = get_mod(rand() % (n - 2) \+ 2, m, n);        if(a != 1)        {            for(i = 0; i &lt; k &amp;&amp; a != n-1; ++i)            {                cout &lt;&lt; a &lt;&lt; endl;                a = mod(a, a, n);            }            //根据二次探测定理，只要不满足(a == 1) || (a == n - 1)，就会一直遍历下去，直到最后返回false            if(i &gt;= k                return false;        }    }    return true;}//主函数int main(){    int times;    llong num;    cin &gt;\&gt; times;    while(times--)    {        cin &gt;\&gt; num;        if(is_prime(num, 1))            cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;        else            cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;    }    return 0;}</code></pre><h3 id="2-轮式因子分解法"><a href="#2-轮式因子分解法" class="headerlink" title="2.轮式因子分解法"></a>2.轮式因子分解法</h3><pre><code>### 3.Pollard&#39;s rho algorithm`/* C++ program to find a prime factor of composite using``Pollard&#39;s Rho algorithm */``#include&lt;bits/stdc++.h&gt;``using` `namespace` `std;``/* Function to calculate (base^exponent)%modulus */``long` `long` `int` `modular_pow(``long` `long` `int` `base,` `int` `exponent,``long` `long` `int` `modulus)``{``/* initialize result */``long` `long` `int` `result = 1;``while` `(exponent &gt; 0)``{``/* if y is odd, multiply base with result */``if` `(exponent &amp; 1)``result = (result * base) % modulus;``/* exponent = exponent/2 */``exponent = exponent &gt;&gt; 1;``/* base = base * base */``base = (base * base) % modulus;``}``return` `result;``}``/* method to return prime divisor for n */``long` `long` `int` `PollardRho(``long` `long` `int` `n)``{``/* initialize random seed */``srand` `(``time``(NULL));``/* no prime divisor for 1 */``if` `(n==1)` `return` `n;``/* even number means one of the divisors is 2 */``if` `(n % 2 == 0)` `return` `2;``/* we will pick from the range [2, N) */``long` `long` `int` `x = (``rand``()%(n-2))+2;``long` `long` `int` `y = x;``/* the constant in f(x).``* Algorithm can be re-run with a different c``* if it throws failure for a composite. */``long` `long` `int` `c = (``rand``()%(n-1))+1;``/* Initialize candidate divisor (or result) */``long` `long` `int` `d = 1; ``/* until the prime factor isn&#39;t obtained.``If n is prime, return n */``while` `(d==1)``{``/* Tortoise Move: x(i+1) = f(x(i)) */``x = (modular_pow(x, 2, n) + c + n)%n;``/* Hare Move: y(i+1) = f(f(y(i))) */``y = (modular_pow(y, 2, n) + c + n)%n;``y = (modular_pow(y, 2, n) + c + n)%n;``/* check gcd of |x-y| and n */``d = __gcd(``abs``(x-y), n);``/* retry if the algorithm fails to find prime factor``* with chosen x and c */``if` `(d==n)` `return` `PollardRho(n);``}``return` `d;``}``/* driver function */``int` `main()``{``long` `long` `int` `n = 10967535067;``printf``(``&quot;One of the divisors for %lld is %lld.&quot;``,``n, PollardRho(n));``return` `0;``}`</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辗转相除法与线性丢番图方程</title>
      <link href="/2018/09/02/zhan-zhuan-xiang-chu-fa-yu-xian-xing-diu-fan-tu-fang-cheng/"/>
      <url>/2018/09/02/zhan-zhuan-xiang-chu-fa-yu-xian-xing-diu-fan-tu-fang-cheng/</url>
      
        <content type="html"><![CDATA[<p>0.原理：两个整数的最大公约数等于两个整数中较小的数和两数之差的最大公约数，反复应用此原理直至其中一数为零，另一个不为零的数即为最大公约数。 1.为求简明，以下只说明如何求两个非负整数a和b的最大公约数（负数的情况是简单的）。在第一步计算时（k = 0），设r−2和r−1分别等于a和b，第2步（此时k = 1）时计算r−1（即b）和r0（第一步计算产生的余数）相除产生的商和余数，以此类推。整个算法可以用如下等式表示： a = q0 b + r0 b = q1 r0 + r1 r0 = q2 r1 + r2 r1 = q3 r2 + r3 2.伪代码 </p><pre><code>function gcd（a，b） while b ≠ 0 t ← b b ← a mod b a ← t return a </code></pre><p>3.c++版本 </p><pre><code>3.1int gcd(int m,int n) { int t; while(t) { t=m%n; m=n; n=t; } return m; } </code></pre><pre><code>3.2#include &lt;iostream&gt; #include &lt;bits/stdc++.h&gt; using namespace std; int gcd(int a,int b) { int t = a % b; int temp; while (t) { a = b; b = t; t = a % b; } return b; } int main() { int a, b, temp; cin &gt;&gt; a &gt;&gt; b; if (a &lt; b) { temp = a; a = b; b = temp; } cout &lt;&lt; gcd(a, b) &lt;&lt; endl; return 0; } </code></pre><p>3.3递归版本 3.3.1伪代码 function gcd(a, b) if b = 0 return a else return gcd(b, a mod b) 3.3.1c++版本 int gcd(int n,int m) { if(m==0) return n; else return gcd(m,n%m); } <img src="https://upload.wikimedia.org/wikipedia/commons/2/21/Euclidean_algorithm_running_time_X_Y.png" alt> 用辗转相除法求 GCD(x,y) 时所需的步数。红点表示所需步骤较少（快），黄、绿、蓝点所需步骤依次增加（慢）。 3.4贝祖等式 3.4.1两个数a和b的最大公约数g可以表示为a和b的线性和。 3.4.2扩展欧几里得算法 在辗转相除法的基础上增加两个递归等式： sk = sk−2 − qksk−1 tk = tk−2 − qktk−1 算法开始时： s−2 = 1, t−2 = 0 s−1 = 0, t−1 = 1 加上这两个递归式后，当算法终止于rN = 0，贝祖等式的整数s和t分别由sN和tN给出。 3.5 线性丢番图方程 3.5.1 方程形如 ax+by=c 可以写成关于x的同余式    <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/670df7e9805bc8f32d6ab444267c6b109596bc15" alt="{\displaystyle ax\equiv c{\pmod {b}}}"> 令<em>g</em>为<em>a</em>和<em>b</em>的最大公约数，<em>ax</em> + _by_能够被<em>g</em>整除。所以，<em>c</em>一定能够被<em>g</em>整除，不然方程就无解。方程两边若同时除以 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/41f887d896e192e65343332119b53b940a63b234" alt="{\tfrac  {c}{g}}">)，方程就变成了贝祖等式：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1130639a64f01c6cc40f828668e02f75de55da3f" alt="sa+tb=g"> 其中<em>s</em>和<em>t</em>可以用扩展欧几里得算法求解。<a href="https://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95#cite_note-72" target="_blank" rel="noopener">[72]</a>所以这个丢番图方程的一个解即是：</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e03e24386b0cbb820692bb47570adca867df96fe" alt="{\begin{aligned}x_{1}=s({\tfrac  {c}{g}})\\y_{1}=t({\tfrac  {c}{g}})\end{aligned}}"></p><p>总体而言，丢番图方程如果有解，就一定有无数个解。<a href="https://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95#cite_note-73" target="_blank" rel="noopener">[73]</a>只需要考虑两个解 (x1, y1) 和 (x2, y2)：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6afebc35f7966912645b8d0eaa05d69eac52b9f7" alt="ax_{1}+by_{1}=c=ax_{2}+by_{2}"></p><p>或者可以写成：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/09c38b739f319a0bdc9bda58e5b1c4e63ba85df0" alt="a(x_{1}-x_{2})=b(y_{2}-y_{1})"> 所以相邻两个解的<em>x</em>之间的差是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a89ec905d8728196e198f22e8fa6f3cc7972366e" alt="{\tfrac  {b}{g}}">，<em>y</em>之间的差是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3e8f8913d9605955d608f7da0ae5a60e0250003e" alt="{\tfrac  {a}{g}}">。这样，所有的解都可以表示成：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/05882f0d18dc021fb919d051afb8a9e155581f47" alt="{\begin{aligned}x=x_{1}-{\tfrac  {bt}{g}}\\y=y_{1}+{\tfrac  {at}{g}}\end{aligned}}"></p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
